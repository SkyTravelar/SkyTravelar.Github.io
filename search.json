[{"title":"ATM机","url":"/2022/12/11/1/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;fstream&gt;</span><br><span class=\"line\">#include &lt;ctime&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class Account</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    string name;//姓名</span><br><span class=\"line\">    int accountNumber = 0;//账号</span><br><span class=\"line\">    int pinNumber = 0;//密码</span><br><span class=\"line\">    int balance = 0;//余额</span><br><span class=\"line\">public:</span><br><span class=\"line\">    bool welcome();//初始界面</span><br><span class=\"line\">    void show();//打印菜单</span><br><span class=\"line\">    void deposit();//存款</span><br><span class=\"line\">    void withdrawal();//取款</span><br><span class=\"line\">    void tran();//转账</span><br><span class=\"line\">    void change();//修改密码</span><br><span class=\"line\">    void getbalance();//查询余额</span><br><span class=\"line\">    void print();//打印账号信息</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;Account&gt; account;</span><br><span class=\"line\">Account ATM;</span><br><span class=\"line\">vector&lt;Account&gt;::iterator atm;</span><br><span class=\"line\"></span><br><span class=\"line\">void wait() &#123;</span><br><span class=\"line\">    int a = getchar();</span><br><span class=\"line\">    a = getchar();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void keep() &#123;</span><br><span class=\"line\">    ofstream ofs(&quot;ATM.txt&quot;);</span><br><span class=\"line\">    if (ofs.is_open()) &#123;</span><br><span class=\"line\">        vector&lt;Account&gt;::iterator it;</span><br><span class=\"line\">        for (it = account.begin(); it != account.end(); it++) &#123;</span><br><span class=\"line\">            ofs &lt;&lt; it-&gt;name &lt;&lt; &quot;\\t&quot; &lt;&lt; it-&gt;accountNumber &lt;&lt; &quot;\\t&quot; &lt;&lt; it-&gt;pinNumber &lt;&lt; &quot;\\t&quot; &lt;&lt; it-&gt;balance &lt;&lt; &quot;\\t&quot; &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ofs.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void open() &#123;</span><br><span class=\"line\">    ifstream ifs(&quot;ATM.txt&quot;);</span><br><span class=\"line\">    if (ifs.is_open()) &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;文件打开成功！&quot; &lt;&lt; endl;</span><br><span class=\"line\">        system(&quot;cls&quot;);</span><br><span class=\"line\">        Account a;</span><br><span class=\"line\">        while (ifs &gt;&gt; a.name &gt;&gt; a.accountNumber &gt;&gt; a.pinNumber &gt;&gt; a.balance) &#123;</span><br><span class=\"line\">            account.push_back(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ifs.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;文件不存在！&quot; &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool Account::welcome() &#123;</span><br><span class=\"line\">    Account temp;</span><br><span class=\"line\">    cout &lt;&lt; &quot;欢迎使用！\\n请选择操作：\\n 1、登录\\n 2、开户\\n 3、退出&quot; &lt;&lt; endl;</span><br><span class=\"line\">    int a;</span><br><span class=\"line\">    cin &gt;&gt; a;</span><br><span class=\"line\">    system(&quot;cls&quot;);</span><br><span class=\"line\">    switch (a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    case 1: &#123;</span><br><span class=\"line\">        if (account.begin() == account.end()) &#123;</span><br><span class=\"line\">            cout &lt;&lt; &quot;没有账号，无法登录！&quot; &lt;&lt; endl;</span><br><span class=\"line\">            wait();</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            cout &lt;&lt; &quot;请输入账号：&quot; &lt;&lt; endl;</span><br><span class=\"line\">            cin &gt;&gt; temp.accountNumber;</span><br><span class=\"line\">            for (vector&lt;Account&gt;::iterator it = account.begin(); it != account.end(); it++) &#123;</span><br><span class=\"line\">                if (it-&gt;accountNumber == temp.accountNumber) &#123;</span><br><span class=\"line\">                    cout &lt;&lt; &quot;请输入密码：&quot; &lt;&lt; endl;</span><br><span class=\"line\">                    cin &gt;&gt; temp.pinNumber;</span><br><span class=\"line\">                    if (it-&gt;pinNumber == temp.pinNumber) &#123;</span><br><span class=\"line\">                        atm = it;</span><br><span class=\"line\">                        cout &lt;&lt; &quot;登陆成功！&quot; &lt;&lt; endl;</span><br><span class=\"line\">                        wait();</span><br><span class=\"line\">                        return true;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else &#123;</span><br><span class=\"line\">                        cout &lt;&lt; &quot;密码错误，无法登录！&quot; &lt;&lt; endl;</span><br><span class=\"line\">                        wait();</span><br><span class=\"line\">                        return false;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout &lt;&lt; &quot;账号不存在！&quot; &lt;&lt; endl;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    case 2: &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;请输入姓名：&quot; &lt;&lt; endl;</span><br><span class=\"line\">        cin &gt;&gt; temp.name;</span><br><span class=\"line\">        cout &lt;&lt; &quot;请输入密码：&quot; &lt;&lt; endl;</span><br><span class=\"line\">        cin &gt;&gt; temp.pinNumber;</span><br><span class=\"line\">        srand(unsigned int(time(0)));</span><br><span class=\"line\">        srand(temp.pinNumber + rand());</span><br><span class=\"line\">        temp.accountNumber = rand() * 10000000 % 10000000 + 60000000;</span><br><span class=\"line\">        cout &lt;&lt; &quot;开户成功，您的账号为：&quot; &lt;&lt; temp.accountNumber &lt;&lt; endl;</span><br><span class=\"line\">        account.push_back(temp);</span><br><span class=\"line\">        wait();</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    case 3: &#123;</span><br><span class=\"line\">        keep();</span><br><span class=\"line\">        cout &lt;&lt; &quot;感谢使用，再见！&quot; &lt;&lt; endl;</span><br><span class=\"line\">        exit(0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    default:return false; break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Account::show() &#123;</span><br><span class=\"line\">    system(&quot;cls&quot;);</span><br><span class=\"line\">    cout &lt;&lt; &quot;请选择你需要的服务&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;1、存款&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;2、取款&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;3、转账&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;4、查询余额&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;5、修改密码&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;6、显示账号信息&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;7、退出&quot; &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Account::deposit() &#123;</span><br><span class=\"line\">    int temp;</span><br><span class=\"line\">    cout &lt;&lt; &quot;请输入存款金额：&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cin &gt;&gt; temp;</span><br><span class=\"line\">    atm-&gt;balance += temp;</span><br><span class=\"line\">    cout &lt;&lt; &quot;存款成功！&quot; &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Account::withdrawal() &#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;请输入取款金额：&quot; &lt;&lt; endl;</span><br><span class=\"line\">    int temp;</span><br><span class=\"line\">    cin &gt;&gt; temp;</span><br><span class=\"line\">    if (temp &gt; atm-&gt;balance)</span><br><span class=\"line\">        cout &lt;&lt; &quot;余额不足！&quot; &lt;&lt; endl;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        atm-&gt;balance -= temp;</span><br><span class=\"line\">    cout &lt;&lt; &quot;成功！&quot; &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Account::tran() &#123;</span><br><span class=\"line\">    Account temp;</span><br><span class=\"line\">    cout &lt;&lt; &quot;请输入对方账户：&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cin &gt;&gt; temp.accountNumber;</span><br><span class=\"line\">    for (vector&lt;Account&gt;::iterator it = account.begin(); it != account.end(); it++) &#123;</span><br><span class=\"line\">        if (temp.accountNumber == it-&gt;accountNumber)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int a;</span><br><span class=\"line\">            cout &lt;&lt; &quot;请输入转账金额：&quot; &lt;&lt; endl;</span><br><span class=\"line\">            cin &gt;&gt; a;</span><br><span class=\"line\">            if (a &lt; atm-&gt;balance &amp;&amp; a &gt; 0) &#123;</span><br><span class=\"line\">                atm-&gt;balance -= a;</span><br><span class=\"line\">                it-&gt;balance += a;</span><br><span class=\"line\">                cout &lt;&lt; &quot;转账成功！&quot; &lt;&lt; endl;</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if (a &gt; atm-&gt;balance) &#123;</span><br><span class=\"line\">                cout &lt;&lt; &quot;余额不足！&quot; &lt;&lt; endl;</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                cout &lt;&lt; &quot;输入错误！&quot; &lt;&lt; endl;</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; &quot;账户不存在！&quot; &lt;&lt; endl;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Account::change() &#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;请输入新密码&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cin &gt;&gt; atm-&gt;pinNumber;</span><br><span class=\"line\">    cout &lt;&lt; &quot;修改成功！&quot; &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Account::getbalance() &#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;余额为：&quot; &lt;&lt; atm-&gt;balance &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Account::print() &#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; atm-&gt;name &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;账户名：&quot; &lt;&lt; atm-&gt;accountNumber &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;余额：&quot; &lt;&lt; atm-&gt;balance &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    open();</span><br><span class=\"line\">aaa:</span><br><span class=\"line\">    system(&quot;cls&quot;);</span><br><span class=\"line\">    bool b = ATM.welcome();</span><br><span class=\"line\">    while (b) &#123;</span><br><span class=\"line\">        int a;</span><br><span class=\"line\">        ATM.show();</span><br><span class=\"line\">        cin &gt;&gt; a;</span><br><span class=\"line\">        switch (a) &#123;</span><br><span class=\"line\">        case 1:system(&quot;cls&quot;); (*atm).deposit(); wait(); break;</span><br><span class=\"line\">        case 2:system(&quot;cls&quot;); (*atm).withdrawal(); wait(); break;</span><br><span class=\"line\">        case 3:system(&quot;cls&quot;); (*atm).tran(); wait(); break;</span><br><span class=\"line\">        case 4:system(&quot;cls&quot;); (*atm).getbalance(); wait(); break;</span><br><span class=\"line\">        case 5:system(&quot;cls&quot;); (*atm).change(); wait(); break;</span><br><span class=\"line\">        case 6:system(&quot;cls&quot;); (*atm).print(); wait(); break;</span><br><span class=\"line\">        case 7:system(&quot;cls&quot;); keep(); cout &lt;&lt; &quot;感谢使用，再见！&quot; &lt;&lt; endl; b = false; break;</span><br><span class=\"line\">        default:break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    goto aaa;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","tags":["C++"]},{"title":"对二十个数进行排序","url":"/2022/12/12/10/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">data segment</span><br><span class=\"line\">array \tdw 40 dup(0)</span><br><span class=\"line\">ten \tdb 10 </span><br><span class=\"line\">fuyi \tdw -1\t</span><br><span class=\"line\">flag\tdb 0</span><br><span class=\"line\">data ends</span><br><span class=\"line\"></span><br><span class=\"line\">stack segment </span><br><span class=\"line\">\tdw 40 dup(0)</span><br><span class=\"line\">stack ends</span><br><span class=\"line\"></span><br><span class=\"line\">assume cs:code, ds:data, ss:stack</span><br><span class=\"line\"></span><br><span class=\"line\">code segment</span><br><span class=\"line\">\tstart:\t\t</span><br><span class=\"line\">\t\tmov ax,data</span><br><span class=\"line\">        mov ds,ax</span><br><span class=\"line\">        mov ax,stack</span><br><span class=\"line\">        mov ss,ax</span><br><span class=\"line\">        mov sp,80</span><br><span class=\"line\">        mov si,0 </span><br><span class=\"line\">        mov cx,20\t</span><br><span class=\"line\">        call scan\t</span><br><span class=\"line\">        mov cx,20</span><br><span class=\"line\">        call sort</span><br><span class=\"line\">        mov si,0</span><br><span class=\"line\">        mov cx,20</span><br><span class=\"line\">        call to_char</span><br><span class=\"line\">        mov ax,4c00h</span><br><span class=\"line\">        int 21h</span><br><span class=\"line\">\tscan:\t\t</span><br><span class=\"line\">\t\tpush ax</span><br><span class=\"line\">        push bx</span><br><span class=\"line\">        push dx</span><br><span class=\"line\">\tl1:\t\t</span><br><span class=\"line\">\t\tmov dx,0\t\t\t</span><br><span class=\"line\">\tll2:\t</span><br><span class=\"line\">\t\tmov ah,1</span><br><span class=\"line\">        int 21h\t\t\t\t</span><br><span class=\"line\">        cmp al,&#x27; &#x27;</span><br><span class=\"line\">        je continue\t\t\t</span><br><span class=\"line\">        cmp al,&#x27;-&#x27;</span><br><span class=\"line\">        je negtive\t\t\t</span><br><span class=\"line\">        sub al,30h</span><br><span class=\"line\">        mov bl,al </span><br><span class=\"line\">        mov ax,array[si]</span><br><span class=\"line\">        mul ten</span><br><span class=\"line\">        mov bh,0</span><br><span class=\"line\">        add ax,bx</span><br><span class=\"line\">        mov array[si],ax</span><br><span class=\"line\">        jmp ll2\t\t</span><br><span class=\"line\">negtive:</span><br><span class=\"line\">        inc dx\t</span><br><span class=\"line\">        jmp ll2\t\t\t</span><br><span class=\"line\">continue:\t\t\t\t\t\t\t</span><br><span class=\"line\">        cmp dx,0\t\t\t</span><br><span class=\"line\">        je l\t</span><br><span class=\"line\">        mov ax,array[si]</span><br><span class=\"line\">        imul fuyi</span><br><span class=\"line\">        mov array[si],ax</span><br><span class=\"line\">\t\tl:\t</span><br><span class=\"line\">        add si,2</span><br><span class=\"line\">        loop l1</span><br><span class=\"line\">        pop dx</span><br><span class=\"line\">        pop bx</span><br><span class=\"line\">        pop ax</span><br><span class=\"line\">        ret</span><br><span class=\"line\">\tsort:\t\t</span><br><span class=\"line\">\t\tpush di</span><br><span class=\"line\">        push bx</span><br><span class=\"line\">        push ax\t\t\t</span><br><span class=\"line\">\t\tdec cx</span><br><span class=\"line\">\ts1:\t\t</span><br><span class=\"line\">\t\tmov di,cx</span><br><span class=\"line\">\t\tmov bx,0</span><br><span class=\"line\">    s2:\t\t</span><br><span class=\"line\">    \tmov ax,array[bx]</span><br><span class=\"line\">        cmp ax,array[bx+2]</span><br><span class=\"line\">        jle s3</span><br><span class=\"line\">        xchg ax,array[bx+2]</span><br><span class=\"line\">        mov array[bx],ax</span><br><span class=\"line\">\ts3:\t\t</span><br><span class=\"line\">\t\tadd bx,2</span><br><span class=\"line\">        loop s2\t\t\t</span><br><span class=\"line\">        mov cx,di</span><br><span class=\"line\">        loop s1\t\t\t</span><br><span class=\"line\">        pop ax</span><br><span class=\"line\">        pop bx</span><br><span class=\"line\">        pop di</span><br><span class=\"line\">        ret\t\t\t</span><br><span class=\"line\">to_char:</span><br><span class=\"line\">    \tpush ax</span><br><span class=\"line\">    \tpush bx</span><br><span class=\"line\">    \tpush dx</span><br><span class=\"line\">    \tpush di   \t</span><br><span class=\"line\">    \tmov dl,0ah\t</span><br><span class=\"line\">    \tmov ah,2</span><br><span class=\"line\">    \tint 21h    \t</span><br><span class=\"line\">\tl2:\t\t</span><br><span class=\"line\">\t\tpush cx</span><br><span class=\"line\">\t\tmov bx,0</span><br><span class=\"line\">\t\tmov flag,0</span><br><span class=\"line\">\tl3:\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tmov ax,[si]</span><br><span class=\"line\">\t\tand ah,10000000b</span><br><span class=\"line\">\t\tcmp ah,0</span><br><span class=\"line\">\t\tje b\t\t\t\t</span><br><span class=\"line\">\t\tmov ax,[si]\t\t\t</span><br><span class=\"line\">\t\timul fuyi</span><br><span class=\"line\">\t\tmov [si],ax</span><br><span class=\"line\">\t\tmov flag,1\t\t\t\t\t</span><br><span class=\"line\">\tb:\t</span><br><span class=\"line\">\t\tinc bx\t</span><br><span class=\"line\">\t\tmov cx,10</span><br><span class=\"line\">\t\tcall divtw</span><br><span class=\"line\">    \tmov dh,7</span><br><span class=\"line\">    \tadd dl,30h</span><br><span class=\"line\">    \tpush dx\t</span><br><span class=\"line\">    \tcmp word ptr [si],0</span><br><span class=\"line\">    \tje j</span><br><span class=\"line\">    \tloop l3    \t</span><br><span class=\"line\">    j:\t</span><br><span class=\"line\">    \tcmp flag,1</span><br><span class=\"line\">    \tjne q</span><br><span class=\"line\">    \tinc bx</span><br><span class=\"line\">\t\tmov dh,7</span><br><span class=\"line\">\t\tmov dl,&#x27;-&#x27;</span><br><span class=\"line\">\t\tpush dx    \t</span><br><span class=\"line\">    q:\t</span><br><span class=\"line\">    \tmov cx,bx</span><br><span class=\"line\">    k:\t</span><br><span class=\"line\">    \tpop dx</span><br><span class=\"line\">    \tmov ah,2</span><br><span class=\"line\">    \tint 21h</span><br><span class=\"line\">    \tloop k</span><br><span class=\"line\">    \tmov dl,&#x27; &#x27;</span><br><span class=\"line\">    \tmov ah,2</span><br><span class=\"line\">    \tint 21h    \t</span><br><span class=\"line\">    \tpop cx</span><br><span class=\"line\">   \t\tadd si,2</span><br><span class=\"line\">    \tloop l2    \t</span><br><span class=\"line\">    \tpop di</span><br><span class=\"line\">    \tpop dx</span><br><span class=\"line\">    \tpop bx</span><br><span class=\"line\">    \tpop ax</span><br><span class=\"line\">    \tret    \t</span><br><span class=\"line\"> divtw:</span><br><span class=\"line\"> \t\tpush ax\t\t</span><br><span class=\"line\">\t\tmov dx,0</span><br><span class=\"line\">\t\tmov ax,[si]</span><br><span class=\"line\">\t\tdiv cx</span><br><span class=\"line\">\t\tmov [si],ax\t\t</span><br><span class=\"line\">\t\tpop ax</span><br><span class=\"line\">\t\tret\t\t\t\t\t\t\t\t</span><br><span class=\"line\">code ends</span><br><span class=\"line\">end start</span><br></pre></td></tr></table></figure>\n\n","tags":["汇编"]},{"title":"打印玫瑰花","url":"/2022/12/11/2/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">const int max_iterations = 128;</span><br><span class=\"line\">const float stop_threshold = 0.01f;</span><br><span class=\"line\">const float grad_step = 0.01f;</span><br><span class=\"line\">const float clip_far = 10.0f;</span><br><span class=\"line\"></span><br><span class=\"line\">const float PI = 3.14159265359f;</span><br><span class=\"line\">const float PI2 = 6.28318530718f;</span><br><span class=\"line\">const float DEG_TO_RAD = PI / 180.0f;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct &#123; float x, y; &#125; vec2;</span><br><span class=\"line\">typedef struct &#123; float x, y, z; &#125; vec3;</span><br><span class=\"line\">typedef struct &#123; float m[9]; &#125; mat3;</span><br><span class=\"line\"></span><br><span class=\"line\">const vec3 light_pos = &#123; 20.0f, 50.0f, 20.0f &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">float min(float a, float b) &#123; return a &lt; b ? a : b; &#125;</span><br><span class=\"line\">float max(float a, float b) &#123; return a &gt; b ? a : b; &#125;</span><br><span class=\"line\">float clamp(float f, float a, float b) &#123; return max(min(f, b), a); &#125;</span><br><span class=\"line\">vec2 make2(float x, float y) &#123; vec2 r = &#123; x, y &#125;; return r; &#125;</span><br><span class=\"line\">vec2 add2(vec2 a, vec2 b) &#123; vec2 r = &#123; a.x + b.x, a.y + b.y &#125;; return r; &#125;</span><br><span class=\"line\">vec2 sub2(vec2 a, vec2 b) &#123; vec2 r = &#123; a.x - b.x, a.y - b.y &#125;; return r; &#125;</span><br><span class=\"line\">float dot2(vec2 a, vec2 b) &#123; return a.x * b.x + a.y * b.y; &#125;</span><br><span class=\"line\">float length2(vec2 v) &#123; return sqrt(dot2(v, v)); &#125;</span><br><span class=\"line\">vec3 make3(float x, float y, float z) &#123; vec3 r = &#123; x, y, z &#125;; return r; &#125;</span><br><span class=\"line\">vec3 add3(vec3 a, vec3 b) &#123; vec3 r = &#123; a.x + b.x, a.y + b.y, a.z + b.z &#125;; return r; &#125;</span><br><span class=\"line\">vec3 sub3(vec3 a, vec3 b) &#123; vec3 r = &#123; a.x - b.x, a.y - b.y, a.z - b.z &#125;; return r; &#125;</span><br><span class=\"line\">vec3 mul3(vec3 a, vec3 b) &#123; vec3 r = &#123; a.x * b.x, a.y * b.y, a.z * b.z &#125;; return r; &#125;</span><br><span class=\"line\">vec3 scale3(vec3 v, float s) &#123; vec3 r = &#123; v.x * s, v.y * s, v.z * s &#125;; return r; &#125;</span><br><span class=\"line\">float dot3(vec3 a, vec3 b) &#123; return a.x * b.x + a.y * b.y + a.z * b.z; &#125;</span><br><span class=\"line\">float length3(vec3 v) &#123; return sqrt(dot3(v, v)); &#125;</span><br><span class=\"line\">vec3 normalize3(vec3 v) &#123; return scale3(v, 1.0f / length3(v)); &#125;</span><br><span class=\"line\">vec3 mul(mat3 m, vec3 v) &#123;</span><br><span class=\"line\">    return make3(</span><br><span class=\"line\">        m.m[0] * v.x + m.m[3] * v.y + m.m[6] * v.z,</span><br><span class=\"line\">        m.m[1] * v.x + m.m[4] * v.y + m.m[7] * v.z,</span><br><span class=\"line\">        m.m[2] * v.x + m.m[5] * v.y + m.m[8] * v.z);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mat3 rotationXY(float x, float y) &#123;</span><br><span class=\"line\">    vec2 c = &#123; cos(x), cos(y) &#125;, s = &#123; sin(x), sin(y) &#125;;</span><br><span class=\"line\">    mat3 m = &#123;</span><br><span class=\"line\">        c.y      , 0.0f, -s.y,</span><br><span class=\"line\">        s.y * s.x,  c.x,  c.y * s.x,</span><br><span class=\"line\">        s.y * c.x, -s.x,  c.y * c.x</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">float opI(float d1, float d2) &#123; return max(d1, d2); &#125;</span><br><span class=\"line\">float opU(float d1, float d2) &#123; return min(d1, d2); &#125;</span><br><span class=\"line\">float opS(float d1, float d2) &#123; return max(-d1, d2); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">float sdPetal(vec3 p, float s) &#123;</span><br><span class=\"line\">    p = add3(mul3(p, make3(0.8f, 1.5f, 0.8f)), make3(0.1f, 0.0f, 0.0f));</span><br><span class=\"line\">    vec2 q = make2(length2(make2(p.x, p.z)), p.y);</span><br><span class=\"line\"></span><br><span class=\"line\">    float lower = length2(q) - 1.0f;</span><br><span class=\"line\">    lower = opS(length2(q) - 0.97f, lower);</span><br><span class=\"line\">    lower = opI(lower, q.y);</span><br><span class=\"line\"></span><br><span class=\"line\">    float upper = length2(sub2(q, make2(s, 0.0f))) + 1.0f - s;</span><br><span class=\"line\">    upper = opS(upper, length2(sub2(q, make2(s, 0.0f))) + 0.97f - s);</span><br><span class=\"line\">    upper = opI(upper, -q.y);</span><br><span class=\"line\">    upper = opI(upper, q.x - 2.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">    float region = length3(sub3(p, make3(1.0f, 0.0f, 0.0f))) - 1.0f;</span><br><span class=\"line\">    return opI(opU(upper, lower), region);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">float map(vec3 p) &#123;</span><br><span class=\"line\">    float d = 1000.0f, s = 2.0f;</span><br><span class=\"line\">    mat3 r = rotationXY(0.1f, PI2 * 0.618034f);</span><br><span class=\"line\">    r.m[0] *= 1.08f;  r.m[1] *= 1.08f;  r.m[2] *= 1.08f;</span><br><span class=\"line\">    r.m[3] *= 0.995f; r.m[4] *= 0.995f; r.m[5] *= 0.995f;</span><br><span class=\"line\">    r.m[6] *= 1.08f;  r.m[7] *= 1.08f;  r.m[8] *= 1.08f;</span><br><span class=\"line\">    for (int i = 0; i &lt; 21; i++) &#123;</span><br><span class=\"line\">        d = opU(d, sdPetal(p, s));</span><br><span class=\"line\">        p = mul(r, p);</span><br><span class=\"line\">        p = add3(p, make3(0.0, -0.02, 0.0));</span><br><span class=\"line\">        s *= 1.05f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vec3 gradient(vec3 pos) &#123;</span><br><span class=\"line\">    const vec3 dx = &#123; grad_step, 0.0, 0.0 &#125;;</span><br><span class=\"line\">    const vec3 dy = &#123; 0.0, grad_step, 0.0 &#125;;</span><br><span class=\"line\">    const vec3 dz = &#123; 0.0, 0.0, grad_step &#125;;</span><br><span class=\"line\">    return normalize3(make3(</span><br><span class=\"line\">        map(add3(pos, dx)) - map(sub3(pos, dx)),</span><br><span class=\"line\">        map(add3(pos, dy)) - map(sub3(pos, dy)),</span><br><span class=\"line\">        map(add3(pos, dz)) - map(sub3(pos, dz))));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">float ray_marching(vec3 origin, vec3 dir, float start, float end) &#123;</span><br><span class=\"line\">    float depth = start;</span><br><span class=\"line\">    for (int i = 0; i &lt; max_iterations; i++) &#123;</span><br><span class=\"line\">        float dist = map(add3(origin, scale3(dir, depth)));</span><br><span class=\"line\">        if (dist &lt; stop_threshold)</span><br><span class=\"line\">            return depth;</span><br><span class=\"line\">        depth += dist * 0.3;</span><br><span class=\"line\">        if (depth &gt;= end)</span><br><span class=\"line\">            return end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return end;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">float shading(vec3 v, vec3 n, vec3 eye) &#123;</span><br><span class=\"line\">    vec3 ev = normalize3(sub3(v, eye));</span><br><span class=\"line\">    vec3 vl = normalize3(sub3(light_pos, v));</span><br><span class=\"line\">    float diffuse = dot3(vl, n) * 0.5f + 0.5f;</span><br><span class=\"line\">    vec3 h = normalize3(sub3(vl, ev));</span><br><span class=\"line\">    float rim = pow(1.0f - max(-dot3(n, ev), 0.0f), 2.0f) * 0.15f;</span><br><span class=\"line\">    float ao = clamp(v.y * 0.5f + 0.5f, 0.0f, 1.0f);</span><br><span class=\"line\">    return (diffuse + rim) * ao;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vec3 ray_dir(float fov, vec2 pos) &#123;</span><br><span class=\"line\">    vec3 r = &#123; pos.x, pos.y, -tan((90.0f - fov * 0.5f) * DEG_TO_RAD) &#125;;</span><br><span class=\"line\">    return normalize3(r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">float f(vec2 fragCoord) &#123;</span><br><span class=\"line\">    vec3 dir = ray_dir(45.0f, fragCoord);</span><br><span class=\"line\">    vec3 eye = &#123; 0.0f, 0.0f, 4.5f &#125;;</span><br><span class=\"line\">    mat3 rot = rotationXY(-1.0f, 1.0f);</span><br><span class=\"line\"></span><br><span class=\"line\">    dir = mul(rot, dir);</span><br><span class=\"line\">    eye = mul(rot, eye);</span><br><span class=\"line\"></span><br><span class=\"line\">    float depth = ray_marching(eye, dir, 0.0f, clip_far);</span><br><span class=\"line\">    vec3 pos = add3(eye, scale3(dir, depth));</span><br><span class=\"line\">    if (depth &gt;= clip_far)</span><br><span class=\"line\">        return 0.0f;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        return shading(pos, gradient(pos), eye);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    puts(&quot;\\033[91m&quot;);</span><br><span class=\"line\">    for (int y = 0; y &lt; 80; y++) &#123;</span><br><span class=\"line\">        for (int x = 0; x &lt; 160; x++)</span><br><span class=\"line\">            putchar(&quot;  .,-:;+=*#@&quot;[(int)(f(make2((x / 160.0f - 0.5f) * 2.0f, (y / 80.0f - 0.5f) * -2.0f)) * 12.0f)]);</span><br><span class=\"line\">        putchar(&#x27;\\n&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","tags":["C++"]},{"title":"算法分析与设计","url":"/2023/04/25/11/","content":"<h1 id=\"P1302-可见矩形\"><a href=\"#P1302-可见矩形\" class=\"headerlink\" title=\"P1302 可见矩形\"></a>P1302 可见矩形</h1><h2 id=\"问题来源及登录账号\"><a href=\"#问题来源及登录账号\" class=\"headerlink\" title=\"问题来源及登录账号\"></a>问题来源及登录账号</h2><ul>\n<li>问题来源：洛谷</li>\n<li>问题号：P1302</li>\n<li>登陆账号：SkyTravelar</li>\n</ul>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定平面上 n 个互不相交（指公共面积为零）的正方形，它们的顶点坐标均为整数。设坐标原点为 O(0,0)。对于任一正方形 R，如果可以找到 R 的边上 2 个不同的点 A 和 B，使  三角形OAB 的内部与其他正方形无公共点，则称正方形 R 是从 O 点可见的正方形。</p>\n<p>对于给定的 n 个互不相交的正方形，计算从坐标原点 O 可见的正方形个数。</p>\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>输入文件的第一行是正方形个数n（1≤n≤10001≤n≤1000）</p>\n<p>接下来n行中，每行有三个表示正方形的整数 X,Y,L。其中，X 和 Y 表示正方形的左下角顶点坐标，L表示边长，1≤X,Y,Z≤10000。</p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>输出文件仅有一行包含一个整数，表示从坐标原点 O 可见的正方形个数。</p>\n<h3 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">2 6 4</span><br><span class=\"line\">1 4 1</span><br><span class=\"line\">2 4 1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计\"><a href=\"#问题分析与算法设计\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>​\t\t设正方形的左下端点（aa，bb），边长为cc，参数cmp&#x3D;aa+bb+cc。不难发现，cmp较小的正方形可以遮挡cmp较大的正方形，于是记录每个正方形的斜率范围。即最小斜率bb&#x2F;(aa+cc)和最大斜率(bb+cc)&#x2F;aa，并针对cmp参数进行递增排序</p>\n<p>​\t\t建立二维数组a负责储存不可用的斜率范围，a数组奇数编号储存起始斜率，偶数编号储存截止斜率。于是便可用数组a表示所有不可用范围。初始的斜率范围即为k[1].s到k[1].l，下面依次使各正方形的斜率进入数组。</p>\n<p>​\t\t第i号正方形进入数组：比k[i].s还小的元素直接照抄，不需更改，直到找到第一个大于等于k[i].s的元素。若该元素编号为奇数，即为一个范围的起始位置，说明k[i].s的进入产生了一个新的不可用范围，直接使k[i].s进入数组。若该元素编号为偶数，即为一个范围的结束位置，说明k[i].s处在某个范围内部，不需要产生新的起始点，不进行操作，继续向下查找元素。处在k[i].s和k[i].l之间的元素无需理会，直到找到第一个大于等于k[i].l的元素，对k[i].l的操作跟k[i].s基本相同。</p>\n<h3 id=\"算法代码\"><a href=\"#算法代码\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int n;</span><br><span class=\"line\">int ans;</span><br><span class=\"line\">struct node&#123;</span><br><span class=\"line\">\tdouble l,s,cmp;</span><br><span class=\"line\">&#125;k[100100];</span><br><span class=\"line\">bool cmp(node x,node y)&#123;</span><br><span class=\"line\">\treturn x.cmp&lt;y.cmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">double a[10001][10001];</span><br><span class=\"line\">int cnt[10001];</span><br><span class=\"line\">inline int read()&#123;</span><br><span class=\"line\">\tint x=0,f=1;</span><br><span class=\"line\">\tchar c=getchar();</span><br><span class=\"line\">\twhile(c&gt;&#x27;9&#x27;||c&lt;&#x27;0&#x27;)&#123;</span><br><span class=\"line\">\t\tif(c==&#x27;-&#x27;) f=-1;</span><br><span class=\"line\">\t\tc=getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twhile(c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;)&#123;</span><br><span class=\"line\">\t\tx=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48);</span><br><span class=\"line\">\t\tc=getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\tn=read();</span><br><span class=\"line\">\tint aa,bb,cc;</span><br><span class=\"line\">\tfor(int i=1;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\taa=read();</span><br><span class=\"line\">\t\tbb=read();</span><br><span class=\"line\">\t\tcc=read();</span><br><span class=\"line\">\t\tk[i].l=(bb+cc)*1.0/aa;</span><br><span class=\"line\">\t\tk[i].s=bb*1.0/(aa+cc);</span><br><span class=\"line\">\t\tk[i].cmp=aa+bb+cc;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort(k+1,k+1+n,cmp);</span><br><span class=\"line\">\ta[1][1]=k[1].s;</span><br><span class=\"line\">\ta[1][2]=k[1].l;</span><br><span class=\"line\">\tcnt[1]=2;</span><br><span class=\"line\">\tfor(int i=2;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\tint t=1;</span><br><span class=\"line\">\t\twhile(a[i-1][t]&lt;k[i].s&amp;&amp;t&lt;=cnt[i-1])&#123;</span><br><span class=\"line\">\t\t\ta[i][t]=a[i-1][t];</span><br><span class=\"line\">\t\t\tt++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tint l=t;</span><br><span class=\"line\">\t\tcnt[i]=t-1;</span><br><span class=\"line\">\t\tif(t%2==1)&#123;</span><br><span class=\"line\">\t\t\ta[i][++cnt[i]]=k[i].s;</span><br><span class=\"line\">\t\t\tif(a[i-1][t]==a[i][t]) l=t+1;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\twhile(a[i-1][t]&lt;=k[i].l&amp;&amp;t&lt;=cnt[i-1])&#123;</span><br><span class=\"line\">\t\t\tt++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tint r=t;</span><br><span class=\"line\">\t\tif(t%2==1)&#123;</span><br><span class=\"line\">\t\t\ta[i][++cnt[i]]=k[i].l;</span><br><span class=\"line\">\t\t\tif(a[i-1][t-1]==a[i][cnt[i]]) r--;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\twhile(t&lt;=cnt[i-1])&#123;</span><br><span class=\"line\">\t\t\ta[i][++cnt[i]]=a[i-1][t]; </span><br><span class=\"line\">\t\t\tt++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(r-l&gt;=1) ans++;</span><br><span class=\"line\">\t\telse&#123;</span><br><span class=\"line\">\t\t\tif(r%2==1) ans++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout&lt;&lt;ans+1;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论\"><a href=\"#总结与讨论\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>算法的时间复杂度比较高。</p>\n<h1 id=\"P1784-数独\"><a href=\"#P1784-数独\" class=\"headerlink\" title=\"P1784 数独\"></a>P1784 数独</h1><h2 id=\"问题来源及登录账号-1\"><a href=\"#问题来源及登录账号-1\" class=\"headerlink\" title=\"问题来源及登录账号\"></a>问题来源及登录账号</h2><ul>\n<li>问题来源：洛谷</li>\n<li>问题号：P1784</li>\n<li>登陆账号：SkyTravelar</li>\n</ul>\n<h2 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>数独是根据 $9 \\times 9$ 盘面上的已知数字，推理出所有剩余空格的数字，并满足每一行、每一列、每一个粗线宫内的数字均含 $1 - 9$ ，不重复。每一道合格的数独谜题都有且仅有唯一答案，推理方法也以此为基础，任何无解或多解的题目都是不合格的。</p>\n<p>芬兰一位数学家号称设计出全球最难的“数独游戏”，并刊登在报纸上，让大家去挑战。</p>\n<p>这位数学家说，他相信只有“智慧最顶尖”的人才有可能破解这个“数独之谜”。</p>\n<p>据介绍，目前数独游戏的难度的等级有一到五级，一是入门等级，五则比较难。不过这位数学家说，他所设计的数独游戏难度等级是十一，可以说是所以数独游戏中，难度最高的等级。他还表示，他目前还没遇到解不出来的数独游戏，因此他认为“最具挑战性”的数独游戏并没有出现。</p>\n<h3 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>一个未填的数独。</p>\n<h3 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>填好的数独。</p>\n<h3 id=\"样例-1-1\"><a href=\"#样例-1-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-1\"><a href=\"#样例输入-1-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">8 0 0 0 0 0 0 0 0 </span><br><span class=\"line\">0 0 3 6 0 0 0 0 0 </span><br><span class=\"line\">0 7 0 0 9 0 2 0 0 </span><br><span class=\"line\">0 5 0 0 0 7 0 0 0 </span><br><span class=\"line\">0 0 0 0 4 5 7 0 0 </span><br><span class=\"line\">0 0 0 1 0 0 0 3 0 </span><br><span class=\"line\">0 0 1 0 0 0 0 6 8 </span><br><span class=\"line\">0 0 8 5 0 0 0 1 0 </span><br><span class=\"line\">0 9 0 0 0 0 4 0 0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-1\"><a href=\"#样例输出-1-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">8 1 2 7 5 3 6 4 9 </span><br><span class=\"line\">9 4 3 6 8 2 1 7 5 </span><br><span class=\"line\">6 7 5 4 9 1 2 8 3 </span><br><span class=\"line\">1 5 4 2 3 7 8 9 6 </span><br><span class=\"line\">3 6 9 8 4 5 7 2 1 </span><br><span class=\"line\">2 8 7 1 6 9 5 3 4 </span><br><span class=\"line\">5 2 1 9 7 4 3 6 8 </span><br><span class=\"line\">4 3 8 5 2 6 9 1 7 </span><br><span class=\"line\">7 9 6 3 1 8 4 5 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例-2\"><a href=\"#样例-2\" class=\"headerlink\" title=\"样例 #2\"></a>样例 #2</h3><h4 id=\"样例输入-2\"><a href=\"#样例输入-2\" class=\"headerlink\" title=\"样例输入 #2\"></a>样例输入 #2</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">9 0 0 8 0 0 0 0 0</span><br><span class=\"line\">0 0 0 0 0 0 5 0 0 </span><br><span class=\"line\">0 0 0 0 0 0 0 0 0 </span><br><span class=\"line\">0 2 0 0 1 0 0 0 3</span><br><span class=\"line\">0 1 0 0 0 0 0 6 0</span><br><span class=\"line\">0 0 0 4 0 0 0 7 0</span><br><span class=\"line\">7 0 8 6 0 0 0 0 0 </span><br><span class=\"line\">0 0 0 0 3 0 1 0 0 </span><br><span class=\"line\">4 0 0 0 0 0 2 0 0 </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-2\"><a href=\"#样例输出-2\" class=\"headerlink\" title=\"样例输出 #2\"></a>样例输出 #2</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">9 7 2 8 5 3 6 1 4 </span><br><span class=\"line\">1 4 6 2 7 9 5 3 8 </span><br><span class=\"line\">5 8 3 1 4 6 7 2 9 </span><br><span class=\"line\">6 2 4 7 1 8 9 5 3 </span><br><span class=\"line\">8 1 7 3 9 5 4 6 2 </span><br><span class=\"line\">3 5 9 4 6 2 8 7 1 </span><br><span class=\"line\">7 9 8 6 2 1 3 4 5 </span><br><span class=\"line\">2 6 5 9 3 4 1 8 7 </span><br><span class=\"line\">4 3 1 5 8 7 2 9 6 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"算法-1\"><a href=\"#算法-1\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-1\"><a href=\"#问题分析与算法设计-1\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>​\t\t数独是源自18世纪瑞士的一种数学游戏。是一种运用纸、笔进行演算的逻辑游戏。玩家需要根据9×9盘面上的已知数字，推理出所有剩余空格的数字，并满足每一行、每一列、每一个粗线宫（3×3）内的数字均含1-9，不重复。</p>\n<p>​\t\t数独要求每一行、每一列、每一个3×3方阵内的数字，不重复。行和列重复判断是相当简单的。我们可以定义两个bool型二维数组，当此行（或列）填充数字时，我们可以直接把这行的这个数字打上true表示有数字了。</p>\n<h3 id=\"算法代码-1\"><a href=\"#算法代码-1\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int sd[11][11];//数独方阵定义 </span><br><span class=\"line\">bool p[11][11],l[11][11],fz[11][11];//行，列，方阵。 </span><br><span class=\"line\"></span><br><span class=\"line\">void _out()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">\tfor(int i=1;i&lt;=9;i++)</span><br><span class=\"line\">\t&#123;\t</span><br><span class=\"line\">  \t\tfor(int j=1;j&lt;=9;j++)</span><br><span class=\"line\">\t\t\tcout&lt;&lt;sd[i][j]&lt;&lt;&quot; &quot;;</span><br><span class=\"line\">\t\tcout&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\texit(0); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void dfs(int x,int y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif(sd[x][y]!=0)//如果原来这个位置有数字，跳过。 </span><br><span class=\"line\">\t\tif(x==9&amp;&amp;y==9)_out();//当行列都为9，填充完成，输出</span><br><span class=\"line\">\t\telse if(y==9)dfs(x+1,1);//当列数为9，搜索下一排。 </span><br><span class=\"line\">\t\telse dfs(x,y+1);//搜下一列 </span><br><span class=\"line\">\telse//原来的地方没有数字，准备填充！ </span><br><span class=\"line\">\t\tfor(int i=1;i&lt;=9;i++)</span><br><span class=\"line\">\t\t\tif((!p[x][i])&amp;&amp;(!l[y][i])&amp;&amp;(!fz[(x-1)/3*3+(y-1)/3+1][i]))</span><br><span class=\"line\">\t\t\t//判断是不是重复了。</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tsd[x][y]=i;//填充！ </span><br><span class=\"line\">\t\t\t\tp[x][i]=l[y][i]=fz[(x-1)/3*3+(y-1)/3+1][i]=true;//打上标记。 </span><br><span class=\"line\">\t\t\t\tif(x==9&amp;&amp;y==9)_out();//全部填完！输出</span><br><span class=\"line\">\t\t\t\telse if(y==9)dfs(x+1,1);//同上！搜下一行。</span><br><span class=\"line\">\t\t\t\telse dfs(x,y+1);//搜下一列！ </span><br><span class=\"line\">\t\t\t\tsd[x][y]=0; //恢复标记。 </span><br><span class=\"line\">\t\t\t\tp[x][i]=l[y][i]=fz[(x-1)/3*3+(y-1)/3+1][i]=false;//恢复标记。 </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfor(int i=1;i&lt;=9;i++)</span><br><span class=\"line\">\t\tfor(int j=1;j&lt;=9;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tint t;//定义tmp（防止下面代码太长？） </span><br><span class=\"line\">\t\t\tcin&gt;&gt;t;//输入 </span><br><span class=\"line\">\t\t\tif(t!=0)</span><br><span class=\"line\">\t\t\t\tp[i][t]=l[j][t]=fz[(i-1)/3*3+(j-1)/3+1][t]=true;</span><br><span class=\"line\">\t\t\t//填充的不是0的话，表示原来有数字了。打上标记。\t</span><br><span class=\"line\">\t\t\tsd[i][j]=t;//填充进数独。 </span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\tdfs(1,1);//搜索</span><br><span class=\"line\">\treturn 0;//结束 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-1\"><a href=\"#总结与讨论-1\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t算法的难点在于判断数字的重复。</p>\n<h1 id=\"P1229-遍历问题\"><a href=\"#P1229-遍历问题\" class=\"headerlink\" title=\"P1229 遍历问题\"></a>P1229 遍历问题</h1><h2 id=\"问题来源及登录账号-2\"><a href=\"#问题来源及登录账号-2\" class=\"headerlink\" title=\"问题来源及登录账号\"></a>问题来源及登录账号</h2><ul>\n<li>问题来源：洛谷</li>\n<li>问题号：P1229</li>\n<li>登陆账号：SkyTravelar</li>\n</ul>\n<h2 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>我们都很熟悉二叉树的前序、中序、后序遍历，在数据结构中常提出这样的问题：已知一棵二叉树的前序和中序遍历，求它的后序遍历，相应的，已知一棵二叉树的后序遍历和中序遍历序列你也能求出它的前序遍历。然而给定一棵二叉树的前序和后序遍历，你却不能确定其中序遍历序列，考虑如下图中的几棵二叉树：</p>\n<p> <img src=\"https://cdn.luogu.com.cn/upload/pic/73.png\"> </p>\n<p>所有这些二叉树都有着相同的前序遍历和后序遍历，但中序遍历却不相同。</p>\n<h3 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>输A数据共两行，第一行表示该二叉树的前序遍历结果s1，第二行表示该二叉树的后序遍历结果s2。</p>\n<h3 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>输出可能的中序遍历序列的总数，结果不超过长整型数。</p>\n<h3 id=\"样例-1-2\"><a href=\"#样例-1-2\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-2\"><a href=\"#样例输入-1-2\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">abc                           </span><br><span class=\"line\">cba</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-2\"><a href=\"#样例输出-1-2\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"算法-2\"><a href=\"#算法-2\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-2\"><a href=\"#问题分析与算法设计-2\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>​\t\t给定中能确定树的具体结构，是因为可以确定是左子树还是右子树，而之给定前和后，则不能确定，这就是会出现不同树结构的原因。只有前和后那么主要问题就是没有办法处理只有一个子树的情况，因为这种情况不知道子树究竟是这个节点的左子树还是右子树，也就是说其实这道题要判断遍历中存在着多少个只有一棵子树的情况。对于前，如果一个结点的下个结点等于后中对应结点的前一个结点的话，那么这个结点就是根节点且其只有一个子树。sum初始化为1，出现一个只有一棵子树的情况，就把sum*2。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    long long c=1;</span><br><span class=\"line\">    string s1,s2,s3;</span><br><span class=\"line\">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class=\"line\">    for (i=0; i&lt;s1.length()-1; i++) &#123;</span><br><span class=\"line\">        s3 = s1.substr(i,2); // 截取相邻的两个字符串</span><br><span class=\"line\">        reverse(s3.begin(),s3.end()); // 反转</span><br><span class=\"line\">        if (s2.find(s3) != string::npos) c *= 2; // 匹配成功则总数*2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-2\"><a href=\"#总结与讨论-2\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t乍一看很难，实则找规律。</p>\n<h1 id=\"P1387-最大正方形\"><a href=\"#P1387-最大正方形\" class=\"headerlink\" title=\"P1387 最大正方形\"></a>P1387 最大正方形</h1><h2 id=\"问题来源及登录账号-3\"><a href=\"#问题来源及登录账号-3\" class=\"headerlink\" title=\"问题来源及登录账号\"></a>问题来源及登录账号</h2><ul>\n<li>问题来源：洛谷</li>\n<li>问题号：P1387</li>\n<li>登陆账号：SkyTravelar</li>\n</ul>\n<h2 id=\"题目描述-3\"><a href=\"#题目描述-3\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>在一个 n×mn×m的只包含 0和1的矩阵里找出一个不包含 0的最大正方形，输出边长。</p>\n<h3 id=\"输入格式-3\"><a href=\"#输入格式-3\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>输入文件第一行为两个整数n,m(1≤n,m≤100)，接下来 n 行，每行 m 个数字，用空格隔开，0 或 1。</p>\n<h3 id=\"输出格式-3\"><a href=\"#输出格式-3\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>一个整数，最大正方形的边长。</p>\n<h3 id=\"样例-1-3\"><a href=\"#样例-1-3\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-3\"><a href=\"#样例输入-1-3\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">4 4</span><br><span class=\"line\">0 1 1 1</span><br><span class=\"line\">1 1 1 0</span><br><span class=\"line\">0 1 1 0</span><br><span class=\"line\">1 1 0 1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-3\"><a href=\"#样例输出-1-3\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"算法-3\"><a href=\"#算法-3\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-3\"><a href=\"#问题分析与算法设计-3\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>暴力算法：枚举每一个点作为所选正方形的左上角的点，然后枚举正方形边长，逐一判断。</p>\n<h3 id=\"算法代码-2\"><a href=\"#算法代码-2\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">bool f[202][202]=&#123;0&#125;,p;</span><br><span class=\"line\">int n,m,i,j,k,x,y,ans=0;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  cin&gt;&gt;m;</span><br><span class=\"line\">  cin&gt;&gt;n;</span><br><span class=\"line\">  for (int i=0; i&lt;n; i++)</span><br><span class=\"line\">    for (int j=0; j&lt;m; j++)</span><br><span class=\"line\">      cin&gt;&gt;f[i][j];          </span><br><span class=\"line\">  for (int i=0; i&lt;n; i++)</span><br><span class=\"line\">    for (int j=0; j&lt;m; j++)</span><br><span class=\"line\">      for (int k=min(n,m); k&gt;ans; k--)&#123;</span><br><span class=\"line\">          p=1;</span><br><span class=\"line\">          for (int x=i; x&lt;i+k; x++)&#123;</span><br><span class=\"line\">              for (int y=j; y&lt;j+k; y++)&#123;</span><br><span class=\"line\">                  if (!f[x][y])      </span><br><span class=\"line\">                      &#123;</span><br><span class=\"line\">                        p=0; </span><br><span class=\"line\">                        break;   </span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              if (!p)&#123;</span><br><span class=\"line\">              \tbreak;</span><br><span class=\"line\">              &#125;     </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          if (p)&#123;</span><br><span class=\"line\">              ans=k; </span><br><span class=\"line\">              break;       </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  cout&lt;&lt;ans&lt;&lt;endl;                </span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-3\"><a href=\"#总结与讨论-3\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t时间复杂度略高，还需要改进。</p>\n<h1 id=\"P1123-取数游戏\"><a href=\"#P1123-取数游戏\" class=\"headerlink\" title=\"P1123 取数游戏\"></a>P1123 取数游戏</h1><h2 id=\"问题来源及登录账号-4\"><a href=\"#问题来源及登录账号-4\" class=\"headerlink\" title=\"问题来源及登录账号\"></a>问题来源及登录账号</h2><ul>\n<li>问题来源：洛谷</li>\n<li>问题号：P1123</li>\n<li>登陆账号：SkyTravelar</li>\n</ul>\n<h2 id=\"题目描述-4\"><a href=\"#题目描述-4\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>一个$N \\times M$的由非负整数构成的数字矩阵，你需要在其中取出若干个数字，使得取出的任意两个数字不相邻（若一个数字在另外一个数字相邻$8$个格子中的一个即认为这两个数字相邻），求取出数字和最大是多少。</p>\n<h3 id=\"输入格式-4\"><a href=\"#输入格式-4\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第1行有一个正整数$T$，表示了有$T$组数据。</p>\n<p>对于每一组数据，第一行有两个正整数$N$和$M$，表示了数字矩阵为$N$行$M$列。</p>\n<p>接下来$N$行，每行$M$个非负整数，描述了这个数字矩阵。</p>\n<h3 id=\"输出格式-4\"><a href=\"#输出格式-4\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>$T$行，每行一个非负整数，输出所求得的答案。</p>\n<h3 id=\"样例-1-4\"><a href=\"#样例-1-4\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-4\"><a href=\"#样例输入-1-4\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">4 4</span><br><span class=\"line\">67 75 63 10</span><br><span class=\"line\">29 29 92 14</span><br><span class=\"line\">21 68 71 56</span><br><span class=\"line\">8 67 91 25</span><br><span class=\"line\">2 3</span><br><span class=\"line\">87 70 85</span><br><span class=\"line\">10 3 17</span><br><span class=\"line\">3 3</span><br><span class=\"line\">1 1 1</span><br><span class=\"line\">1 99 1</span><br><span class=\"line\">1 1 1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-4\"><a href=\"#样例输出-1-4\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">271</span><br><span class=\"line\">172</span><br><span class=\"line\">99</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p>对于第1组数据，取数方式如下：</p>\n<p>[67] 75 63 10</p>\n<p>29 29 [92] 14</p>\n<p>[21] 68 71 56</p>\n<p>8 67 [91] 25</p>\n<p>对于$20%$的数据，$N, M≤3$；</p>\n<p>对于$40%$的数据，$N,M≤4$；</p>\n<p>对于$60%$的数据，$N, M≤5$；</p>\n<p>对于$100%$的数据，$N, M≤6,T≤20$。</p>\n<h2 id=\"算法-4\"><a href=\"#算法-4\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-4\"><a href=\"#问题分析与算法设计-4\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>​\t\t对于本题，如果使用贪心法，每次去最大值，那么可以发现有问题。因为每取一个数，相邻的数就不能再取，那么每次决策就会影响下次结果，从而导致贪心决策不能最优化。动态规划也是如此，在动态规划中，每一个分步决策不能影响后续结果，所以此算法也排除。</p>\n<p>​\t\t根据数据范围，所以可以考虑暴力枚举，而对于一个图，以及一个变化的状态，深度优先搜索（dfs） 应该是一个比较适合的算法。<br>再考虑每个数的状态。显然，对于一个数，有取与不取两种状态，状态改变取决于周围取数的变化。我们用 mark[ i ][ j ] 记录点 ( i , j ) 附近有几个数，若 mark[i] [j] ! &#x3D; 0 就代表不能取这个数。</p>\n<h3 id=\"算法代码-3\"><a href=\"#算法代码-3\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">const int d[8][2]=&#123;1,0,-1,0,0,1,0,-1,1,1,-1,1,1,-1,-1,-1&#125;;//方向数组用来控制搜索时的方向 </span><br><span class=\"line\">int t,n,m,s[8][8],mark[8][8],ans,mx;</span><br><span class=\"line\"></span><br><span class=\"line\">void dfs(int x,int y)&#123;//搜索函数，表示搜索点(x,y) </span><br><span class=\"line\">\tif(y==m+1)&#123;//当y到边界时，搜索下一行 </span><br><span class=\"line\">\t\tdfs(x+1,1);</span><br><span class=\"line\">\t\treturn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(x==n+1)&#123;//当x到边界时，搜索结束，刷新最大值 </span><br><span class=\"line\">\t\tmx=max(ans,mx);</span><br><span class=\"line\">\t\treturn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdfs(x,y+1);// 不取此数的情况 </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tif(mark[x][y]==0)&#123; //取此数的情况（需保证此数周围没有取其他数，即mark[i][j]==0）</span><br><span class=\"line\">\t\tans+=s[x][y];</span><br><span class=\"line\">\t\tfor(int fx=0;fx&lt;8;++fx)&#123; //标记周围的数 </span><br><span class=\"line\">\t\t\t++mark[x+d[fx][0]][y+d[fx][1]];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdfs(x,y+1);</span><br><span class=\"line\">\t\tfor(int fx=0;fx&lt;8;++fx)&#123; //回溯 </span><br><span class=\"line\">\t\t\t--mark[x+d[fx][0]][y+d[fx][1]];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans-=s[x][y];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\tcin&gt;&gt;t; </span><br><span class=\"line\">\twhile(t--)&#123;</span><br><span class=\"line\">\t\tmemset(s,0,sizeof(s));</span><br><span class=\"line\">\t\tmemset(mark,0,sizeof(mark));//在做每个数据前都要初始化数组 </span><br><span class=\"line\">\t\tcin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">\t\tfor(int i=1;i&lt;=n;++i)&#123;</span><br><span class=\"line\">\t\t\tfor(int j=1;j&lt;=m;++j)&#123;</span><br><span class=\"line\">\t\t\t\tcin&gt;&gt;s[i][j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmx=0;</span><br><span class=\"line\">\t\tdfs(1,1);//从点(1,1)开始搜索 </span><br><span class=\"line\">\t\tcout&lt;&lt;mx&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-4\"><a href=\"#总结与讨论-4\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t主要需要确定算法和考虑标记状态。</p>\n<h1 id=\"P1576-最小花费\"><a href=\"#P1576-最小花费\" class=\"headerlink\" title=\"P1576 最小花费\"></a>P1576 最小花费</h1><h2 id=\"问题来源及登录账号-5\"><a href=\"#问题来源及登录账号-5\" class=\"headerlink\" title=\"问题来源及登录账号\"></a>问题来源及登录账号</h2><ul>\n<li>问题来源：洛谷</li>\n<li>问题号：P1576</li>\n<li>登陆账号：SkyTravelar</li>\n</ul>\n<h2 id=\"题目描述-5\"><a href=\"#题目描述-5\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>在 $n$ 个人中，某些人的银行账号之间可以互相转账。这些人之间转账的手续费各不相同。给定这些人之间转账时需要从转账金额里扣除百分之几的手续费，请问 $A$ 最少需要多少钱使得转账后 $B$ 收到 $100$ 元。</p>\n<h3 id=\"输入格式-5\"><a href=\"#输入格式-5\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第一行输入两个正整数 $n,m$，分别表示总人数和可以互相转账的人的对数。</p>\n<p>以下 $m$ 行每行输入三个正整数 $x,y,z$，表示标号为 $x$ 的人和标号为 $y$ 的人之间互相转账需要扣除 $z%$ 的手续费 $(z&lt;100)$。</p>\n<p>最后一行输入两个正整数 $A,B$。数据保证 $A$ 与 $B$ 之间可以直接或间接地转账。</p>\n<h3 id=\"输出格式-5\"><a href=\"#输出格式-5\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>输出 $A$ 使得 $B$ 到账 $100$ 元最少需要的总费用。精确到小数点后 $8$ 位。</p>\n<h3 id=\"样例-1-5\"><a href=\"#样例-1-5\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-5\"><a href=\"#样例输入-1-5\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">3 3                                     </span><br><span class=\"line\">1 2 1</span><br><span class=\"line\">2 3 2</span><br><span class=\"line\">1 3 3</span><br><span class=\"line\">1 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-5\"><a href=\"#样例输出-1-5\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">103.07153164</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提示-1\"><a href=\"#提示-1\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p>$1\\le n \\le 2000,m\\le 100000$。</p>\n<h2 id=\"算法-5\"><a href=\"#算法-5\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-5\"><a href=\"#问题分析与算法设计-5\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>​\t将本题抽象化之后不难发现本题就是最短路径问题，可采用Dijkstra算法解决。最小花费就是把每个人看做一个点，每次转账看做一个边，把花费看做边权，并且要建双向边。 i，j互相转账就相当于节点i和j之间有一条权值为（1-z%）的边，求一条路径使路径上各边权值乘积最大。结果就是100&#x2F;max。 </p>\n<h3 id=\"算法代码-4\"><a href=\"#算法代码-4\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n,m,a,b;//意思如题意</span><br><span class=\"line\">bool mark[2005];//记下该点有无被遍历过</span><br><span class=\"line\">double d[2005];//B点到该点的费用</span><br><span class=\"line\">vector &lt; pair &lt;int,int&gt; &gt; s[2005];//用可变数组来记两点之间能否到达和费用如何，相较于普通数组更加方便</span><br><span class=\"line\">multiset &lt;pair &lt;int,int&gt; &gt; f;//multiset里用pair 是按前面的数排序</span><br><span class=\"line\"></span><br><span class=\"line\">void dij() &#123;</span><br><span class=\"line\">\tfor(int i=1; i&lt;=n; i++) d[i]=1e9;//若B到达不了，则费用无限大</span><br><span class=\"line\">\td[b]=100;//B到B，100元</span><br><span class=\"line\">\tf.insert(make_pair(d[b],b));</span><br><span class=\"line\">\tfor(int i=1; i&lt;=n; i++) &#123;</span><br><span class=\"line\">\t\twhile(!f.empty()&amp;&amp;mark[(*f.begin()).second]) f.erase(f.begin());//如果该点被遍历过则不要</span><br><span class=\"line\">\t\tint p=(*f.begin()).second;//遍历点</span><br><span class=\"line\">\t\tmark[p]=1;</span><br><span class=\"line\">\t\tfor(int j=0; j&lt;s[p].size(); j++) &#123;</span><br><span class=\"line\">\t\t\tint h=s[p][j].second,z=s[p][j].first;//h为加入点</span><br><span class=\"line\">\t\t\tdouble mon=d[p]/(100-z)*100;//费用</span><br><span class=\"line\">\t\t\tif(mon&lt;d[h]) &#123;</span><br><span class=\"line\">\t\t\t\td[h]=mon;</span><br><span class=\"line\">\t\t\t\tf.insert(make_pair(d[h],h));</span><br><span class=\"line\">\t\t\t&#125;//取最小，加入。</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">\tcin&gt;&gt;m&gt;&gt;n;</span><br><span class=\"line\">\tfor(int i=0; i&lt;m; i++) &#123;</span><br><span class=\"line\">\t\tint u,v,w;//u、v为点，w为费用</span><br><span class=\"line\">\t\tcin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class=\"line\">\t\ts[u].push_back(make_pair(w,v));</span><br><span class=\"line\">\t\ts[v].push_back(make_pair(w,u));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">\tdij();</span><br><span class=\"line\">\tprintf(&quot;%.8f&quot;,d[a]);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-5\"><a href=\"#总结与讨论-5\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t本题可以借助数据结构，更加方便，如堆，优先队列，multiset。</p>\n<h1 id=\"P2141-NOIP2014-普及组-珠心算测验\"><a href=\"#P2141-NOIP2014-普及组-珠心算测验\" class=\"headerlink\" title=\"P2141 [NOIP2014 普及组] 珠心算测验\"></a>P2141 [NOIP2014 普及组] 珠心算测验</h1><h2 id=\"问题来源及登录账号-6\"><a href=\"#问题来源及登录账号-6\" class=\"headerlink\" title=\"问题来源及登录账号\"></a>问题来源及登录账号</h2><ul>\n<li>问题来源：洛谷</li>\n<li>问题号：P2141</li>\n<li>登陆账号：SkyTravelar</li>\n</ul>\n<h2 id=\"题目描述-6\"><a href=\"#题目描述-6\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。</p>\n<p>某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？</p>\n<p>最近老师出了一些测验题，请你帮忙求出答案。</p>\n<p>(本题目为 2014NOIP 普及 T1)</p>\n<h3 id=\"输入格式-6\"><a href=\"#输入格式-6\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>共两行，第一行包含一个整数 $n$，表示测试题中给出的正整数个数。</p>\n<p>第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。</p>\n<h3 id=\"输出格式-6\"><a href=\"#输出格式-6\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>一个整数，表示测验题答案。</p>\n<h3 id=\"样例-1-6\"><a href=\"#样例-1-6\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-6\"><a href=\"#样例输入-1-6\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">1 2 3 4</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-6\"><a href=\"#样例输出-1-6\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提示-2\"><a href=\"#提示-2\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p>【样例说明】</p>\n<p>由 $1+2&#x3D;3,1+3&#x3D;4$，故满足测试要求的答案为 $2$。  </p>\n<p>注意，加数和被加数必须是集合中的两个不同的数。</p>\n<p>【数据说明】</p>\n<p>对于 $100%$ 的数据，$3 \\leq n \\leq 100$，测验题给出的正整数大小不超过 $10,000$。</p>\n<h2 id=\"算法-6\"><a href=\"#算法-6\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-6\"><a href=\"#问题分析与算法设计-6\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>​\t\t采用三个数组，一个存储数值，另外两个标记数值状态。其中一个存储输入数值的状态，另一个存储数值相加之和的状态。最后遍历两个数组即可。</p>\n<h3 id=\"算法代码-5\"><a href=\"#算法代码-5\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int t[200005],g[200005];</span><br><span class=\"line\">int n,a[105],ans;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    for (int i=1;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;a[i];//读入</span><br><span class=\"line\">        g[a[i]]=1;//在集合中赋值为1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (int i=1;i&lt;n;i++)&#123;//枚举</span><br><span class=\"line\">        for (int j=i+1;j&lt;=n;j++)&#123;</span><br><span class=\"line\">            t[a[i]+a[j]]++;//被加出来了</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (int i=1;i&lt;=200002;i++)&#123;</span><br><span class=\"line\">        if (t[i]&gt;0&amp;&amp;g[i]) ans++;//判断是否满足，满足ans++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-6\"><a href=\"#总结与讨论-6\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t此题算法简单，暴力算法即可求解，倘若数据范围未给出或者指明很大，则另当别论。</p>\n<h1 id=\"P1004-NOIP2000-提高组-方格取数\"><a href=\"#P1004-NOIP2000-提高组-方格取数\" class=\"headerlink\" title=\"P1004 [NOIP2000 提高组] 方格取数\"></a>P1004 [NOIP2000 提高组] 方格取数</h1><h2 id=\"问题来源及登录账号-7\"><a href=\"#问题来源及登录账号-7\" class=\"headerlink\" title=\"问题来源及登录账号\"></a>问题来源及登录账号</h2><ul>\n<li>问题来源：洛谷</li>\n<li>问题号：P1004</li>\n<li>登陆账号：SkyTravelar</li>\n</ul>\n<h2 id=\"题目描述-7\"><a href=\"#题目描述-7\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>设有 $N \\times N$ 的方格图 $(N \\le 9)$，我们将其中的某些方格中填入正整数，而其他的方格中则放入数字 $0$。如下图所示（见样例）:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">A</span><br><span class=\"line\"> 0  0  0  0  0  0  0  0</span><br><span class=\"line\"> 0  0 13  0  0  6  0  0</span><br><span class=\"line\"> 0  0  0  0  7  0  0  0</span><br><span class=\"line\"> 0  0  0 14  0  0  0  0</span><br><span class=\"line\"> 0 21  0  0  0  4  0  0</span><br><span class=\"line\"> 0  0 15  0  0  0  0  0</span><br><span class=\"line\"> 0 14  0  0  0  0  0  0</span><br><span class=\"line\"> 0  0  0  0  0  0  0  0</span><br><span class=\"line\">                         B</span><br></pre></td></tr></table></figure>\n<p>某人从图的左上角的 $A$ 点出发，可以向下行走，也可以向右走，直到到达右下角的 $B$ 点。在走过的路上，他可以取走方格中的数（取走后的方格中将变为数字 $0$）。<br>此人从 $A$ 点到 $B$ 点共走两次，试找出 $2$ 条这样的路径，使得取得的数之和为最大。</p>\n<h3 id=\"输入格式-7\"><a href=\"#输入格式-7\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>输入的第一行为一个整数 $N$（表示 $N \\times N$ 的方格图），接下来的每行有三个整数，前两个表示位置，第三个数为该位置上所放的数。一行单独的 $0$ 表示输入结束。</p>\n<h3 id=\"输出格式-7\"><a href=\"#输出格式-7\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>只需输出一个整数，表示 $2$ 条路径上取得的最大的和。</p>\n<h3 id=\"样例-1-7\"><a href=\"#样例-1-7\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-7\"><a href=\"#样例输入-1-7\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">8</span><br><span class=\"line\">2 3 13</span><br><span class=\"line\">2 6  6</span><br><span class=\"line\">3 5  7</span><br><span class=\"line\">4 4 14</span><br><span class=\"line\">5 2 21</span><br><span class=\"line\">5 6  4</span><br><span class=\"line\">6 3 15</span><br><span class=\"line\">7 2 14</span><br><span class=\"line\">0 0  0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-7\"><a href=\"#样例输出-1-7\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">67</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提示-3\"><a href=\"#提示-3\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p>NOIP 2000 提高组第四题</p>\n<h2 id=\"算法-7\"><a href=\"#算法-7\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-7\"><a href=\"#问题分析与算法设计-7\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>​\t\t本题采用深度优先算法解决，并且采用四维dp。之所以不用二维dp，原因在于，局部最优解不是全局最优解。</p>\n<p>​\t\t设dp[i] [j] [k] [l] 存放的是两个人同时分别走到i,j和k,l点时的最大路径和。易知，两个同时走的人均需遵守只能向下或向右的规则，那么两个人的选择2 x 2就一共有四种可能，即1.都往下走。2.一个往下，一个往右。3.一个往右，一个往下。4.都往右走。</p>\n<p>​\t\t倘若某格子有人走过了，另一个人倘若也需要经过那个格子，只需在原算法基础上减掉那个格子的值即可，而无需考虑将其数值置零的问题。</p>\n<h3 id=\"算法代码-6\"><a href=\"#算法代码-6\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int a[10][10];</span><br><span class=\"line\">int dp[10][10][10][10];</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint n;</span><br><span class=\"line\">\tcin &gt;&gt; n;\t</span><br><span class=\"line\">\t//输入数据</span><br><span class=\"line\">\tint x,y,num;</span><br><span class=\"line\">\twhile (1)&#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; x &gt;&gt; y &gt;&gt; num;</span><br><span class=\"line\">\t\tif ( !x &amp;&amp; !y &amp;&amp; !num )</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\ta[x][y] = num;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t//四重循环</span><br><span class=\"line\">\tint i,j,k,l;</span><br><span class=\"line\">\tfor ( i=1; i&lt;=n; ++i )</span><br><span class=\"line\">\t\tfor ( j=1; j&lt;=n; ++j )</span><br><span class=\"line\">\t\t\tfor ( k=1; k&lt;=n; ++k )</span><br><span class=\"line\">\t\t\t\tfor ( l=1; l&lt;=n; ++l )&#123;</span><br><span class=\"line\">\t\t\t\t\tdp[i][j][k][l] = max ( max (max ( dp[i-1][j][k-1][l], dp[i-1][j][k][l-1] ), dp[i][j-1][k-1][l] ), dp[i][j-1][k][l-1] ) + a[i][j] + a[k][l];</span><br><span class=\"line\">\t\t\t\t\t//注意相同去重</span><br><span class=\"line\">\t\t\t\t\tif ( i==k &amp;&amp; j== l )</span><br><span class=\"line\">\t\t\t\t\t\tdp[i][j][k][l] -= a[k][l];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; dp[n][n][n][n] &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-7\"><a href=\"#总结与讨论-7\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t本题难点在于理解两次局部最优解和全局最优解的不同之处。对于四维dp理解不到位也很难写出该算法。</p>\n<h1 id=\"P1006-NOIP2008-提高组-传纸条\"><a href=\"#P1006-NOIP2008-提高组-传纸条\" class=\"headerlink\" title=\"P1006 [NOIP2008 提高组] 传纸条\"></a>P1006 [NOIP2008 提高组] 传纸条</h1><h2 id=\"问题来源及登录账号-8\"><a href=\"#问题来源及登录账号-8\" class=\"headerlink\" title=\"问题来源及登录账号\"></a>问题来源及登录账号</h2><ul>\n<li>问题来源：洛谷</li>\n<li>问题号：P1006</li>\n<li>登陆账号：SkyTravelar</li>\n</ul>\n<h2 id=\"题目描述-8\"><a href=\"#题目描述-8\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>小渊和小轩是好朋友也是同班同学，他们在一起总有谈不完的话题。一次素质拓展活动中，班上同学安排坐成一个 $m$ 行 $n$ 列的矩阵，而小渊和小轩被安排在矩阵对角线的两端，因此，他们就无法直接交谈了。幸运的是，他们可以通过传纸条来进行交流。纸条要经由许多同学传到对方手里，小渊坐在矩阵的左上角，坐标 $(1,1)$，小轩坐在矩阵的右下角，坐标 $(m,n)$。从小渊传到小轩的纸条只可以向下或者向右传递，从小轩传给小渊的纸条只可以向上或者向左传递。</p>\n<p>在活动进行中，小渊希望给小轩传递一张纸条，同时希望小轩给他回复。班里每个同学都可以帮他们传递，但只会帮他们一次，也就是说如果此人在小渊递给小轩纸条的时候帮忙，那么在小轩递给小渊的时候就不会再帮忙。反之亦然。</p>\n<p>还有一件事情需要注意，全班每个同学愿意帮忙的好感度有高有低（注意：小渊和小轩的好心程度没有定义，输入时用 $0$ 表示），可以用一个 $[0,100]$ 内的自然数来表示，数越大表示越好心。小渊和小轩希望尽可能找好心程度高的同学来帮忙传纸条，即找到来回两条传递路径，使得这两条路径上同学的好心程度之和最大。现在，请你帮助小渊和小轩找到这样的两条路径。</p>\n<h3 id=\"输入格式-8\"><a href=\"#输入格式-8\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第一行有两个用空格隔开的整数 $m$ 和 $n$，表示班里有 $m$ 行 $n$ 列。</p>\n<p>接下来的 $m$ 行是一个 $m \\times n$ 的矩阵，矩阵中第 $i$ 行 $j$ 列的整数表示坐在第 $i$ 行 $j$ 列的学生的好心程度。每行的 $n$ 个整数之间用空格隔开。</p>\n<h3 id=\"输出格式-8\"><a href=\"#输出格式-8\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>输出文件共一行一个整数，表示来回两条路上参与传递纸条的学生的好心程度之和的最大值。</p>\n<h3 id=\"样例-1-8\"><a href=\"#样例-1-8\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-8\"><a href=\"#样例输入-1-8\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">3 3</span><br><span class=\"line\">0 3 9</span><br><span class=\"line\">2 8 5</span><br><span class=\"line\">5 7 0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-8\"><a href=\"#样例输出-1-8\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">34</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提示-4\"><a href=\"#提示-4\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p><strong>【数据范围】</strong></p>\n<p>对于 $30%$ 的数据，满足 $1 \\le m,n \\le 10$。<br>对于 $100%$ 的数据，满足 $1 \\le m,n \\le 50$。</p>\n<p><strong>【题目来源】</strong></p>\n<p>NOIP 2008 提高组第三题。</p>\n<h2 id=\"算法-8\"><a href=\"#算法-8\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-8\"><a href=\"#问题分析与算法设计-8\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>​\t\t最好想的做法是四维dp，设f[i][j][k] [l]为从小渊传到小轩的纸条到达(i,j)，从小轩传给小渊的纸条到达(k,l)的路径上取得的最大的好心程度和。完全可以换一个思路想，即求从给定的起点出发走到指定位置的两条最短严格不相交路线。那么特别显然，转移方程是 f[i] [j] [k] [l]&#x3D;max( f[i][j-1][k-1] [l] , f[i-1] [j] [k] [l-1] , f[i] [j-1] [k] [l-1] , f[i-1] [j] [k-1] [l] )+a[i] [j]+a[k] [l]。要小心l的枚举范围，应该是从j+1到m，只有这样，在枚举第二条路的时候可以控制下标的l不会和j有相等的可能，这样可以保证两条路一定不相交。由于终点的值是0，所以目标状态就是f[n] [m-1] [n-1] [m]。如果你不想这样做，那就让l直接从1枚举，但需要加一个判断，判断当前的(i,j)和(k,l)是不是重合了，如果重合那就把f数组对应的这个地方在转移后减掉一个a[i] [j]或者a[k] [l]。</p>\n<h3 id=\"算法代码-7\"><a href=\"#算法代码-7\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#define maxn 55</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int f[2 * maxn][maxn][maxn];</span><br><span class=\"line\">int a[maxn][maxn];</span><br><span class=\"line\">int n,m;</span><br><span class=\"line\"> </span><br><span class=\"line\">int max_ele(int a,int b,int c,int d)&#123;</span><br><span class=\"line\">    if (b&gt;a)</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">    if (c&gt;a)</span><br><span class=\"line\">        a = c;</span><br><span class=\"line\">    if (d&gt;a)</span><br><span class=\"line\">        a = d;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    for (int i=1;i&lt;=n;i++)</span><br><span class=\"line\">        for (int j=1;j&lt;=m;j++)</span><br><span class=\"line\">            cin &gt;&gt; a[i][j];</span><br><span class=\"line\">    for (int k=1;k&lt;=n+m-1;k++)</span><br><span class=\"line\">        for (int i=1;i&lt;=n;i++)</span><br><span class=\"line\">            for (int j=1;j&lt;=n;j++)&#123;</span><br><span class=\"line\">                if (k-i+1&lt;1 || k-j+1&lt;1) //这里是判断纵坐标的合法性，如果纵坐标不合法那就跳过去</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">                 f[k][i][j] = max_ele(f[k-1][i][j],f[k-1][i-1][j-1],f[k-1][i][j-1],f[k-1][i-1][j]) + a[i][k-i+1] + a[j][k-j+1];</span><br><span class=\"line\">                if (i==j) //判断重合路径</span><br><span class=\"line\">                    f[k][i][j]-=a[i][k-i+1];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    cout &lt;&lt; f[n+m-1][n][n] &lt;&lt; endl;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-8\"><a href=\"#总结与讨论-8\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t算法时间复杂度是O(n^2 * m^2)。</p>\n<h1 id=\"P1018-NOIP2000-提高组-乘积最大\"><a href=\"#P1018-NOIP2000-提高组-乘积最大\" class=\"headerlink\" title=\"P1018 [NOIP2000 提高组] 乘积最大\"></a>P1018 [NOIP2000 提高组] 乘积最大</h1><h2 id=\"问题来源及登录账号-9\"><a href=\"#问题来源及登录账号-9\" class=\"headerlink\" title=\"问题来源及登录账号\"></a>问题来源及登录账号</h2><ul>\n<li>问题来源：洛谷</li>\n<li>问题号：P1018</li>\n<li>登陆账号：SkyTravelar</li>\n</ul>\n<h2 id=\"题目描述-9\"><a href=\"#题目描述-9\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>今年是国际数学联盟确定的“ 2000 ――世界数学年”，又恰逢我国著名数学家华罗庚先生诞辰 90 周年。在华罗庚先生的家乡江苏金坛，组织了一场别开生面的数学智力竞赛的活动，你的一个好朋友 XZ 也有幸得以参加。活动中，主持人给所有参加活动的选手出了这样一道题目：</p>\n<p>设有一个长度为 $N$ 的数字串，要求选手使用 $K$ 个乘号将它分成 $K+1$ 个部分，找出一种分法，使得这 $K+1$ 个部分的乘积能够为最大。</p>\n<p>同时，为了帮助选手能够正确理解题意，主持人还举了如下的一个例子：</p>\n<p>有一个数字串：$312$， 当 $N&#x3D;3,K&#x3D;1$ 时会有以下两种分法：</p>\n<ol>\n<li>$3  \\times  12&#x3D;36$ </li>\n<li>$31  \\times   2&#x3D;62$</li>\n</ol>\n<p>这时，符合题目要求的结果是: $31  \\times  2 &#x3D; 62$</p>\n<p>现在，请你帮助你的好朋友 XZ 设计一个程序，求得正确的答案。</p>\n<h3 id=\"输入格式-9\"><a href=\"#输入格式-9\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>程序的输入共有两行：</p>\n<p>第一行共有 $2$ 个自然数 $N,K$</p>\n<p>第二行是一个长度为 $N$ 的数字串。</p>\n<h3 id=\"输出格式-9\"><a href=\"#输出格式-9\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>结果显示在屏幕上，相对于输入，应输出所求得的最大乘积（一个自然数）。</p>\n<h3 id=\"样例-1-9\"><a href=\"#样例-1-9\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-9\"><a href=\"#样例输入-1-9\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">4  2</span><br><span class=\"line\">1231</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-9\"><a href=\"#样例输出-1-9\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">62</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提示-5\"><a href=\"#提示-5\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p><strong>数据范围与约定</strong></p>\n<p>对于 $60%$ 的测试数据满足 $6≤N≤20$。<br>对于所有测试数据，$6≤N≤40,1≤K≤6$。</p>\n<p>NOIp2000 提高组第二题</p>\n<h2 id=\"算法-9\"><a href=\"#算法-9\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-9\"><a href=\"#问题分析与算法设计-9\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>首先，这道题是显而易见的区间DP，那么，做这道题时，可以分为以下几步：<br>1.确定状态，一般是f[i] [j]之类的，一般题目问什么，就设什么，这道题的状态定义为：f[ i ] [ j ]表示在前i个数中放j个乘号所得到的最大值。把这个状态带回题目，发现f[n−1] [k]恰为所求。<br>2.确定阶段，这道题很显然是以乘号为阶段的，乘号具有明显的顺序性，即：先放完一个乘号，记录在DP数组中，放两个乘号是才能顺利调用之前的计算结果。<br>3.确定状态转移方程：f[i] [j] &#x3D; max(f[i] [j],f[i−1] [k−1]∗num(k,j))。<br>4.初始化，这道题肯定是要初始化的，即 f [i] [0]时（前i个数中放0个乘号所得到的最大值就是i本身）</p>\n<h3 id=\"算法代码-8\"><a href=\"#算法代码-8\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define INF 0x3f3f3f3f</span><br><span class=\"line\">#define ll long long</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string s;</span><br><span class=\"line\">ll n,m,f[50][10];//f[i][j]:前i个数字放j个乘号</span><br><span class=\"line\"></span><br><span class=\"line\">ll js(ll x,ll y)//将字符串从x位到y位转换为一个数字</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tll sum = 0;</span><br><span class=\"line\">\tfor(int i = x;i &lt;= y;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsum = sum * 10;</span><br><span class=\"line\">\t\tsum += s[i] - 48;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\tcin &gt;&gt; s;</span><br><span class=\"line\">\tfor(int i = 0;i &lt; n;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tf[i][0] = js(0,i);//初始化</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor(int i = 1;i &lt;= m;++i)//放i个乘号</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfor(int j = i;j &lt; n;++j)//在第j个位置放乘号，j不能=n，因为乘号必须要放在数字之间</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tfor(int k = i;k &lt;= j;++k)//分割线</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tf[j][i] = max(f[j][i],f[k - 1][i - 1] * js(k,j));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\tcout &lt;&lt; f[n - 1][m] &lt;&lt; endl; </span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-9\"><a href=\"#总结与讨论-9\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t或许暴力算法也能解决？</p>\n<h1 id=\"P1016-NOIP1999-提高组-旅行家的预算\"><a href=\"#P1016-NOIP1999-提高组-旅行家的预算\" class=\"headerlink\" title=\"P1016 [NOIP1999 提高组] 旅行家的预算\"></a>P1016 [NOIP1999 提高组] 旅行家的预算</h1><h2 id=\"问题来源及登录账号-10\"><a href=\"#问题来源及登录账号-10\" class=\"headerlink\" title=\"问题来源及登录账号\"></a>问题来源及登录账号</h2><ul>\n<li>问题来源：洛谷</li>\n<li>问题号：P1016</li>\n<li>登陆账号：SkyTravelar</li>\n</ul>\n<h2 id=\"题目描述-10\"><a href=\"#题目描述-10\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>一个旅行家想驾驶汽车以最少的费用从一个城市到另一个城市（假设出发时油箱是空的）。给定两个城市之间的距离 $D_1$、汽车油箱的容量 $C$（以升为单位）、每升汽油能行驶的距离 $D_2$、出发点每升汽油价格$P$和沿途油站数 $N$（$N$ 可以为零），油站 $i$ 离出发点的距离 $D_i$、每升汽油价格 $P_i$（$i&#x3D;1,2,…,N$）。计算结果四舍五入至小数点后两位。如果无法到达目的地，则输出 <code>No Solution</code>。</p>\n<h3 id=\"输入格式-10\"><a href=\"#输入格式-10\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第一行，$D_1$，$C$，$D_2$，$P$，$N$。</p>\n<p>接下来有 $N$ 行。</p>\n<p>第 $i+1$ 行，两个数字，油站 $i$ 离出发点的距离 $D_i$ 和每升汽油价格 $P_i$。</p>\n<h3 id=\"输出格式-10\"><a href=\"#输出格式-10\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>所需最小费用，计算结果四舍五入至小数点后两位。如果无法到达目的地，则输出 <code>No Solution</code>。</p>\n<h3 id=\"样例-1-10\"><a href=\"#样例-1-10\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-10\"><a href=\"#样例输入-1-10\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">275.6 11.9 27.4 2.8 2</span><br><span class=\"line\">102.0 2.9</span><br><span class=\"line\">220.0 2.2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-10\"><a href=\"#样例输出-1-10\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">26.95</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提示-6\"><a href=\"#提示-6\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p>$N \\le 6$，其余数字$ \\le 500$。</p>\n<h2 id=\"算法-10\"><a href=\"#算法-10\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-10\"><a href=\"#问题分析与算法设计-10\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>首先做如下定义：加油站距离数组dis[n+2], 汽油价格数组pri[n+2], 两者一一对应。</p>\n<p>接着对这两个数组初始化，dis[0] &#x3D; 0; pri[0] &#x3D; p; &#x2F;&#x2F; 将出发点的距离 0 和 油价p 放入数组</p>\n<p>　　　　　　　　　　　　　　dis[n+1] &#x3D; d1; pri[n+1] &#x3D; 0; &#x2F;&#x2F; 终点的距离 d1, 油价 0 放入数组</p>\n<p>将之后输入的N行数据按照距离从小到大排列，需要注意的是，交换距离的时候需要将对应的价格也交换。</p>\n<p>那么只需要从距离最小的点开始出发，依次进行计算。</p>\n<h3 id=\"算法代码-9\"><a href=\"#算法代码-9\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double dis;</span><br><span class=\"line\">    double price;</span><br><span class=\"line\">&#125;station;</span><br><span class=\"line\">int wrong=99999;</span><br><span class=\"line\">station st[100000];</span><br><span class=\"line\">double d1,c,d2,p;</span><br><span class=\"line\">int n;</span><br><span class=\"line\">int now;//当前所在位置</span><br><span class=\"line\">int t;</span><br><span class=\"line\">double maxn;//最远走到哪里</span><br><span class=\"line\"></span><br><span class=\"line\">double res;//剩余；</span><br><span class=\"line\">double price_sum=0;//总价钱</span><br><span class=\"line\">int cmp(station a,station b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return a.dis&lt;b.dis;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int func(int now)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int index=wrong;//next</span><br><span class=\"line\">    for(int i=now+1;i&lt;=n&amp;&amp;st[i].dis-st[now].dis&lt;=maxn;i++)//找能到的加油站</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(st[i].price&lt;st[now].price)//能到&amp;&amp;便宜</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            price_sum+=(st[i].dis-st[now].dis)/d2*st[now].price;</span><br><span class=\"line\">            res=0;</span><br><span class=\"line\">            return i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(index==wrong||st[i].price&lt;st[index].price)</span><br><span class=\"line\">            index=i;//能到，不便宜</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(d1-st[now].dis&lt;=maxn)//没有更便宜的，且能到终点了</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        price_sum+=(d1-st[now].dis-res)/d2*st[now].price;</span><br><span class=\"line\">        return wrong;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(index==wrong)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //到不了下个站</span><br><span class=\"line\">        cout&lt;&lt;&quot;No Solution&quot;&lt;&lt;endl;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    else//没有更便宜的，又不能一次到终点</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        price_sum+=c*st[now].price;</span><br><span class=\"line\">        res+=(maxn-(st[index].dis-st[now].dis));</span><br><span class=\"line\">        return index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    cin&gt;&gt;d1&gt;&gt;c&gt;&gt;d2&gt;&gt;p&gt;&gt;n;</span><br><span class=\"line\"></span><br><span class=\"line\">    st[0].dis=0;</span><br><span class=\"line\">    st[0].price=p;</span><br><span class=\"line\">    for(int i=1;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin&gt;&gt;st[i].dis&gt;&gt;st[i].price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sort(st,st+n+1,cmp);</span><br><span class=\"line\">    now=0;</span><br><span class=\"line\">    maxn=c*d2;</span><br><span class=\"line\"></span><br><span class=\"line\">    do</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t=func(now);</span><br><span class=\"line\">        now=t;</span><br><span class=\"line\">        if(t==-1)</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">    &#125;while(t!=wrong);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt;price_sum&lt;&lt;endl;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-10\"><a href=\"#总结与讨论-10\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t需要注意的地方：1、每次都需要判断是否能够到达下一个加油站，如果无法到达，则直接退出。</p>\n<p>　　　　　　　　\t\t2、每次在当前能够走到的最远距离内进行判断，寻找是否有比当前油价更低的加油站。如果没有更低的，价格相等也可以。</p>\n<p>　　　　　　　　\t\t3、由于最后一点 pir[n+1]  的油价为0，所以要对其特殊处理。</p>\n<h1 id=\"P2434-SDOI2005-区间\"><a href=\"#P2434-SDOI2005-区间\" class=\"headerlink\" title=\"P2434 [SDOI2005]区间\"></a>P2434 [SDOI2005]区间</h1><h2 id=\"问题来源及登录账号-11\"><a href=\"#问题来源及登录账号-11\" class=\"headerlink\" title=\"问题来源及登录账号\"></a>问题来源及登录账号</h2><ul>\n<li>问题来源：洛谷</li>\n<li>问题号：P2434</li>\n<li>登陆账号：SkyTravelar</li>\n</ul>\n<h2 id=\"题目描述-11\"><a href=\"#题目描述-11\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>现给定 $n$ 个闭区间 $[a_i, b_i]$（$1 \\le i \\le n$）。这些区间的并可以表示为一些不相交的闭区间的并。你的任务就是在这些表示方式中找出包含最少区间的方案。你的输出应该按照区间的升序排列。这里如果说两个区间 $[a, b]$ 和 $[c, d]$ 是按照升序排列的，那么我们有 $a \\le b &lt; c \\le d$。</p>\n<p>请写一个程序：</p>\n<p>读入这些区间；</p>\n<p>计算满足给定条件的不相交闭区间；</p>\n<p>把这些区间按照升序输出。</p>\n<h3 id=\"输入格式-11\"><a href=\"#输入格式-11\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第一行包含一个整数 $n$（$3 \\le n \\le 50000$）为区间的数目。<br>以下 $n$ 行为对区间的描述，第 $i$ 行为对第 $i$ 个区间的描述，为两个整数 $a_i, b_i$（$1 \\le a _ i \\leq b _ i \\le 1000000$），表示一个区间 $[a_i, b_i]$。</p>\n<h3 id=\"输出格式-11\"><a href=\"#输出格式-11\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>输出计算出来的不相交的区间。每一行都是对一个区间的描述，包括两个用空格分开的整数，为区间的上下界。你应该把区间按照升序排序。</p>\n<h3 id=\"样例-1-11\"><a href=\"#样例-1-11\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-11\"><a href=\"#样例输入-1-11\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">5 6</span><br><span class=\"line\">1 4</span><br><span class=\"line\">10 10</span><br><span class=\"line\">6 9</span><br><span class=\"line\">8 10</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-11\"><a href=\"#样例输出-1-11\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1 4</span><br><span class=\"line\">5 10</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提示-7\"><a href=\"#提示-7\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p>对于 $100 %$ 的数据，$3 \\le n \\le 50000$，$1 \\le a _ i \\leq b _ i \\le 1000000$。</p>\n<h2 id=\"算法-11\"><a href=\"#算法-11\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-11\"><a href=\"#问题分析与算法设计-11\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>​\t\t将所有区间按左端点排序，然后将n个区间扫一遍，若能合并成一个大区间便合并， 并用l,r记录当前区间的左右端点，若不能合并（即q[i].l&gt;r），输出，并重置l,r</p>\n<h3 id=\"算法代码-10\"><a href=\"#算法代码-10\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\">#define N 50005</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"> </span><br><span class=\"line\">int n; </span><br><span class=\"line\"> </span><br><span class=\"line\">struct node</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int l,r;</span><br><span class=\"line\">&#125;q[N];</span><br><span class=\"line\">bool cmp(node x,node y) &#123;return x.l&lt;y.l;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class=\"line\">    for(int i=1;i&lt;=n;i++) scanf(&quot;%d%d&quot;,&amp;q[i].l,&amp;q[i].r);</span><br><span class=\"line\">    sort(q+1,q+1+n,cmp);</span><br><span class=\"line\">    int l=q[1].l,r=q[1].r;</span><br><span class=\"line\">    for(int i=2;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(q[i].l&gt;r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(&quot;%d %d\\n&quot;,l,r);</span><br><span class=\"line\">            l=q[i].l;r=q[i].r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else r=max(r,q[i].r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;%d %d&quot;,l,r);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-11\"><a href=\"#总结与讨论-11\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t这题也可用线段树完成，先将每一段区间插入线段树，然后用两个指针l&#x3D;1,r&#x3D;1扫[l,r]，若区间[l,r]被覆盖，r++,若不是，重置l,r，并在 l !&#x3D;r时输出</p>\n<h1 id=\"P3842-TJOI2007-线段\"><a href=\"#P3842-TJOI2007-线段\" class=\"headerlink\" title=\"P3842 [TJOI2007]线段\"></a>P3842 [TJOI2007]线段</h1><h2 id=\"题目描述-12\"><a href=\"#题目描述-12\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>在一个 $n \\times n$ 的平面上，在每一行中有一条线段，第 $i$ 行的线段的左端点是$(i, L_{i})$，右端点是$(i, R_{i})$。</p>\n<p>你从 $(1,1)$ 点出发，要求沿途走过所有的线段，最终到达 $(n,n)$ 点，且所走的路程长度要尽量短。</p>\n<p>更具体一些说，你在任何时候只能选择向下走一步（行数增加 $1$）、向左走一步（列数减少 $1$）或是向右走一步（列数增加 $1$）。当然，由于你不能向上行走，因此在从任何一行向下走到另一行的时候，你必须保证已经走完本行的那条线段。</p>\n<h3 id=\"输入格式-12\"><a href=\"#输入格式-12\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第一行有一个整数 $n$。</p>\n<p>以下 $n$ 行，在第 $i$ 行（总第 $(i+1)$ 行）的两个整数表示 $L_i$ 和 $R_i$。</p>\n<h3 id=\"输出格式-12\"><a href=\"#输出格式-12\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>仅包含一个整数，你选择的最短路程的长度。</p>\n<h3 id=\"样例-1-12\"><a href=\"#样例-1-12\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-12\"><a href=\"#样例输入-1-12\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\">2 6</span><br><span class=\"line\">3 4</span><br><span class=\"line\">1 3</span><br><span class=\"line\">1 2</span><br><span class=\"line\">3 6</span><br><span class=\"line\">4 5</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-12\"><a href=\"#样例输出-1-12\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">24</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提示-8\"><a href=\"#提示-8\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p>我们选择的路线是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(1, 1) (1, 6)</span><br><span class=\"line\">(2, 6) (2, 3)</span><br><span class=\"line\">(3, 3) (3, 1)</span><br><span class=\"line\">(4, 1) (4, 2)</span><br><span class=\"line\">(5, 2) (5, 6)</span><br><span class=\"line\">(6, 6) (6, 4) (6, 6)</span><br></pre></td></tr></table></figure>\n<p>不难计算得到，路程的总长度是 $24$。 </p>\n<p>对于 $100%$ 的数据中，$n \\le 2 \\times 10^4$，$1 \\le L_i \\le R_i \\le n$。</p>\n<h2 id=\"算法-12\"><a href=\"#算法-12\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-12\"><a href=\"#问题分析与算法设计-12\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>​\t\t比较典型的DP，首先先想，每一层的最优肯定是由上一层限制的左端点或者右端点下来得到的，那么就可以有状态转移方程了。f[i] [0]表示走完第i行且停在第i行的左端点最少用的步数，f[i] [1]同理，停在右端点的最少步数。<br>​\t\t那么转移就很简单了，走完当前行且停到左端点，那么一定是从右端点过来的，那么从上一行左端点转移的话就是f[i] [0]&#x3D;abs(上一行左端点的坐标-本行右端点的坐标+本行线段长度)</p>\n<h3 id=\"算法代码-11\"><a href=\"#算法代码-11\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n,hang,ans=0;</span><br><span class=\"line\">int l[20005];</span><br><span class=\"line\">int r[20005];</span><br><span class=\"line\">int f[29999][3];//F[X][0] left max </span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\"> scanf(&quot;%d&quot;,&amp;n);</span><br><span class=\"line\"> for(int i=1;i&lt;=n;i++) scanf(&quot;%d%d&quot;,&amp;l[i],&amp;r[i]);</span><br><span class=\"line\"> f[1][1]=r[1]-1;</span><br><span class=\"line\"> f[1][0]=r[1]-1+r[1]-l[1];</span><br><span class=\"line\"> for(int i=2;i&lt;=n;i++)&#123;</span><br><span class=\"line\">   if(l[i-1]&gt;=r[i])&#123;</span><br><span class=\"line\">      f[i][1]=min(r[i]-l[i]+r[i]-l[i]+f[i-1][0]+1+l[i-1]-r[i],r[i]-l[i]+r[i]-l[i]+f[i-1][1]+1+r[i-1]-r[i]);</span><br><span class=\"line\">      f[i][0]=min(f[i-1][0]+1+l[i-1]-l[i],f[i-1][1]+1+r[i-1]-l[i]); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else if(r[i-1]&lt;=l[i]) &#123;</span><br><span class=\"line\">       f[i][0]=min(r[i]-l[i]+r[i]-l[i]+f[i-1][1]+1+l[i]-r[i-1],r[i]-l[i]+r[i]-l[i]+f[i-1][0]+1+l[i]-l[i-1]);</span><br><span class=\"line\">       f[i][1]=min(f[i-1][1]+1+r[i]-r[i-1],f[i-1][0]+1+r[i]-l[i-1]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   else if(l[i]&lt;=l[i-1]&amp;&amp;r[i]&gt;=r[i-1])&#123;</span><br><span class=\"line\">    f[i][0]=min(r[i]-l[i]+f[i-1][1]+1+r[i]-r[i-1],r[i]-l[i]+r[i]-l[i]+f[i-1][0]+1+l[i-1]-l[i]);</span><br><span class=\"line\">    f[i][1]=min(r[i]-l[i]+r[i]-l[i]+f[i-1][1]+1+r[i]-r[i-1],r[i]-l[i]+f[i-1][0]+1+l[i-1]-l[i]); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   else if(l[i]&gt;=l[i-1]&amp;&amp;r[i]&lt;=r[i-1])&#123;</span><br><span class=\"line\">    f[i][0]=min(r[i]-l[i]+f[i-1][1]+1+r[i-1]-r[i],r[i]-l[i]+r[i]-l[i]+f[i-1][0]+1+l[i]-l[i-1]);</span><br><span class=\"line\">    f[i][1]=min(r[i]-l[i]+r[i]-l[i]+f[i-1][1]+1+r[i-1]-r[i],r[i]-l[i]+f[i-1][0]+1+l[i]-l[i-1]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   else if(l[i]&gt;=l[i-1]&amp;&amp;l[i]&lt;=r[i-1])&#123;</span><br><span class=\"line\">    f[i][0]=min(r[i]-l[i]+f[i-1][1]+1+r[i]-r[i-1],r[i]-l[i]+r[i]-l[i]+f[i-1][0]+1+l[i]-l[i-1]);</span><br><span class=\"line\">    f[i][1]=min(r[i-1]-l[i]+r[i]-l[i]+f[i-1][1]+1,f[i-1][0]+1+r[i]-l[i-1]); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   else if(r[i]&gt;=l[i-1]&amp;&amp;r[i]&lt;=r[i-1])&#123;</span><br><span class=\"line\">    f[i][1]=min(r[i]-l[i]+r[i]-l[i]+f[i-1][1]+1+r[i-1]-r[i],r[i]-l[i]+l[i-1]-l[i]+f[i-1][0]+1);</span><br><span class=\"line\">    f[i][0]=min(r[i]-l[i]+f[i-1][1]+1+r[i-1]-r[i],r[i]-l[i]+f[i-1][0]+1+r[i]-l[i-1]);</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ans=min(f[n][0]+n-l[n],f[n][1]+n-r[n]);</span><br><span class=\"line\"> cout&lt;&lt;ans;</span><br><span class=\"line\"> return 0;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-12\"><a href=\"#总结与讨论-12\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t贪心算法基本不可解。</p>\n<h1 id=\"P5414-YNOI2019-排序\"><a href=\"#P5414-YNOI2019-排序\" class=\"headerlink\" title=\"P5414 [YNOI2019] 排序\"></a>P5414 [YNOI2019] 排序</h1><h2 id=\"题目描述-13\"><a href=\"#题目描述-13\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>对于一个数列 ${7, 1, 2, 3}$ 进行排序，我们可以把 $7$ 从头移动到尾。但是这个操作的成本是 $7$，并不是最佳的。最佳的排序方式是将连续的 $1,2,3$ 移动到 $7$ 的前面。这样的话，总的操作成本就是 $1+2+3&#x3D;6$，比之前的成本 $7$ 要小。</p>\n<p>你的任务是，对于一个给定的数列，输出对这个数列进行排序的最小成本。</p>\n<h3 id=\"输入格式-13\"><a href=\"#输入格式-13\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>输入文件名为sort.in。</p>\n<p>每个输入文件包含多组数据。</p>\n<p>输入文件的第一行，包含一个正整数 $T$，代表该输入文件中所含的数据组数。</p>\n<p>接下来是 $T$ 组数据，每组数据的格式如下：</p>\n<p>每组数据包含 $2$ 行；</p>\n<p>第一行包含一个正整数 $n$，代表数列中元素的个数，其中 $0 &lt; n \\leq 10^2$；</p>\n<p>第二行包含 $n$ 个整数，两个数之间以一个空格隔开，代表数列中的元素 $k_i$，其中$-10^{7} \\leq k_i \\leq 10^{7}$。</p>\n<h3 id=\"输出格式-13\"><a href=\"#输出格式-13\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>输出文件名为sort.out。</p>\n<p>输出文件包含 $T$ 行，分别对应 $T$ 组数据的答案，即对数列进行排序的最小成本。</p>\n<h3 id=\"样例-1-13\"><a href=\"#样例-1-13\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-13\"><a href=\"#样例输入-1-13\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">4</span><br><span class=\"line\">7 1 2 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-13\"><a href=\"#样例输出-1-13\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提示-9\"><a href=\"#提示-9\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p>对于 $60%$ 的数据：$0 &lt; n \\leq 60$，$-10^{7} \\leq k_i \\leq 10^{7}$</p>\n<p>对于 $80%$ 的数据：$0 &lt; n \\leq 80$，$-10^{7} \\leq k_i \\leq 10^{7}$</p>\n<p>对于 $100%$ 的数据：$0 &lt; n ≤ 10^2$，$-10^{7} \\leq k_i \\leq 10^{7}$</p>\n<h2 id=\"算法-13\"><a href=\"#算法-13\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-13\"><a href=\"#问题分析与算法设计-13\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>​\t\t这道题就是移动几个数字使得数列单调上升，每次移动可以移动到任意位置，花费就是移动数字的大小。看到这个题之后，我们可以得到 ：最优解不可能把同一个数字移动2次及以上。既然我们可以一次把它移到正确的位置上，那么这个数字就可以理解为直接被移走了。那么问题就变成了：删除几个数字，使得数列单调递增，所求的是移走数字的最小和。 使得删除的和最小，就意味着留下的和最大。那么问题就变成了：保留几个单调递增的数字，使得和最大。</p>\n<h3 id=\"算法代码-12\"><a href=\"#算法代码-12\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">const int N=205;</span><br><span class=\"line\">int a[N],dp[N];</span><br><span class=\"line\"></span><br><span class=\"line\">int read()&#123;</span><br><span class=\"line\">\tint x=0; </span><br><span class=\"line\">\tchar c=getchar();</span><br><span class=\"line\">\twhile(c&lt;&#x27;0&#x27;||c&gt;&#x27;9&#x27;) </span><br><span class=\"line\">\t\tc=getchar();</span><br><span class=\"line\">\twhile(&#x27;0&#x27;&lt;=c&amp;&amp;c&lt;=&#x27;9&#x27;)&#123; </span><br><span class=\"line\">\t\tx=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48); </span><br><span class=\"line\">\t\tc=getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\tint i,j,n;</span><br><span class=\"line\">\tfor(int T=read(),sum=0,ans=0;T;T--,sum=0,ans=0)&#123;</span><br><span class=\"line\">\t\tn=read(); </span><br><span class=\"line\">\t\tfor(i=1;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t\ta[i]=read(),sum+=a[i];</span><br><span class=\"line\">\t\t\tfor(j=1;j&lt;i;j++)</span><br><span class=\"line\">\t\t\t\tif(a[j]&lt;=a[i]&amp;&amp;dp[i]&lt;dp[j])</span><br><span class=\"line\">\t\t\t\t\tdp[i]=dp[j];</span><br><span class=\"line\">\t\t\tdp[i]+=a[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfor(i=1;i&lt;=n;i++)</span><br><span class=\"line\">\t\t\tans=max(ans,dp[i]);</span><br><span class=\"line\">\t\tprintf(&quot;%d\\n&quot;,sum-ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-13\"><a href=\"#总结与讨论-13\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t将问题转化之后其实并不是太难。</p>\n<h1 id=\"P2023-AHOI2009-维护序列\"><a href=\"#P2023-AHOI2009-维护序列\" class=\"headerlink\" title=\"P2023 [AHOI2009] 维护序列\"></a>P2023 [AHOI2009] 维护序列</h1><h2 id=\"问题来源及登录账号-12\"><a href=\"#问题来源及登录账号-12\" class=\"headerlink\" title=\"问题来源及登录账号\"></a>问题来源及登录账号</h2><ul>\n<li>问题来源：洛谷</li>\n<li>问题号：P2023</li>\n<li>登陆账号：SkyTravelar</li>\n</ul>\n<h2 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h2><p>老师交给小可可一个维护数列的任务，现在小可可希望你来帮他完成。</p>\n<h2 id=\"题目描述-14\"><a href=\"#题目描述-14\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>有一个长为 $n$ 的数列 ${a_n}$，有如下三种操作形式：</p>\n<ol>\n<li>格式 <code>1 t g c</code>，表示把所有满足 $t\\le i\\le g$ 的 $a_i$ 改为 $a_i\\times c$ ;</li>\n<li>格式 <code>2 t g c</code> 表示把所有满足 $t\\le i\\le g$ 的 $a_i$ 改为 $a_i+c$ ;</li>\n<li>格式 <code>3 t g</code> 询问所有满足 $t\\le i\\le g$ 的 $a_i$ 的和，由于答案可能很大，你只需输出这个数模 $p$ 的值。</li>\n</ol>\n<h3 id=\"输入格式-14\"><a href=\"#输入格式-14\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第一行两个整数 $n$ 和 $p$。</p>\n<p>第二行含有 $n$ 个非负整数，表示数列 ${a_i}$ 。</p>\n<p>第三行有一个整数 $m$，表示操作总数。</p>\n<p>从第四行开始每行描述一个操作，同一行相邻两数之间用一个空格隔开，每行开头和末尾没有多余空格。</p>\n<h3 id=\"输出格式-14\"><a href=\"#输出格式-14\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>对每个操作 3，按照它在输入中出现的顺序，依次输出<strong>一行一个整数</strong>表示询问结果。</p>\n<h3 id=\"样例-1-14\"><a href=\"#样例-1-14\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1-14\"><a href=\"#样例输入-1-14\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">7 43</span><br><span class=\"line\">1 2 3 4 5 6 7</span><br><span class=\"line\">5</span><br><span class=\"line\">1 2 5 5</span><br><span class=\"line\">3 2 4</span><br><span class=\"line\">2 3 7 9</span><br><span class=\"line\">3 1 3</span><br><span class=\"line\">3 4 7</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1-14\"><a href=\"#样例输出-1-14\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">35</span><br><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提示-10\"><a href=\"#提示-10\" class=\"headerlink\" title=\"提示\"></a>提示</h4><h5 id=\"样例输入输出-1-解释\"><a href=\"#样例输入输出-1-解释\" class=\"headerlink\" title=\"样例输入输出 1 解释\"></a>样例输入输出 1 解释</h5><ul>\n<li>初始时数列为 ${1,2,3,4,5,6,7}$。</li>\n<li>经过第 $1$ 次操作后，数列为 ${1,10,15,20,25,6,7}$。</li>\n<li>对第 $2$ 次操作，和为 $10+15+20&#x3D;45$，模 $43$ 的结果是 $2$。</li>\n<li>经过第 $3$ 次操作后，数列为 ${1,10,24,29,34,15,16}$。</li>\n<li>对第 $4$ 次操作，和为 $1+10+24&#x3D;35$，模 $43$ 的结果是 $35$。</li>\n<li>对第 $5$ 次操作，和为 $29+34+15+16&#x3D;94$，模 $43$ 的结果是$8$。</li>\n</ul>\n<h5 id=\"数据规模与约定\"><a href=\"#数据规模与约定\" class=\"headerlink\" title=\"数据规模与约定\"></a>数据规模与约定</h5><p>测试数据规模如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数据点编号</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th align=\"center\">6</th>\n<th align=\"center\">7</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9,10</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$n&#x3D;$</td>\n<td align=\"center\">$10$</td>\n<td align=\"center\">$1000$</td>\n<td align=\"center\">$1000$</td>\n<td align=\"center\">$10000$</td>\n<td align=\"center\">$60000$</td>\n<td align=\"center\">$70000$</td>\n<td align=\"center\">$80000$</td>\n<td align=\"center\">$90000$</td>\n<td align=\"center\">$100000$</td>\n</tr>\n<tr>\n<td align=\"center\">$m&#x3D;$</td>\n<td align=\"center\">$10$</td>\n<td align=\"center\">$1000$</td>\n<td align=\"center\">$1000$</td>\n<td align=\"center\">$10000$</td>\n<td align=\"center\">$60000$</td>\n<td align=\"center\">$70000$</td>\n<td align=\"center\">$80000$</td>\n<td align=\"center\">$90000$</td>\n<td align=\"center\">$100000$</td>\n</tr>\n</tbody></table>\n<p>对于全部的测试点，保证 $0 \\leq p, a_i, c \\leq 10^9$，$1 \\leq t \\leq g \\leq n$。</p>\n<h2 id=\"算法-14\"><a href=\"#算法-14\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"问题分析与算法设计-14\"><a href=\"#问题分析与算法设计-14\" class=\"headerlink\" title=\"问题分析与算法设计\"></a>问题分析与算法设计</h3><p>​\t\t本题较之平常的线段树,会有一点不同.就是多了一个乘的操作.所以我们需要令一个优先级,即先乘后加.因为加无论什么时候加都没有关系,但是乘会对整个答案产生影响.于是乎,只要打两个标记.在乘的时候,加的标记也要乘上那个值.</p>\n<h3 id=\"算法代码-13\"><a href=\"#算法代码-13\" class=\"headerlink\" title=\"算法代码\"></a>算法代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">typedef long long ll;</span><br><span class=\"line\">const int N=2e5+1;</span><br><span class=\"line\">struct Node&#123;</span><br><span class=\"line\">\tll l;</span><br><span class=\"line\">\tll r;</span><br><span class=\"line\">\tll k;</span><br><span class=\"line\">\tll add;</span><br><span class=\"line\">\tll mul;</span><br><span class=\"line\">&#125;tree[N*4];</span><br><span class=\"line\">ll n,m,Mod,pos;</span><br><span class=\"line\">inline ll build_tree(ll value,ll l,ll r)&#123;</span><br><span class=\"line\">\ttree[value]=Node&#123;l,r,0,0,1&#125;;</span><br><span class=\"line\">\tif (l==r)&#123;</span><br><span class=\"line\">\t\tll num;</span><br><span class=\"line\">\t\tscanf(&quot;%lld&quot;,&amp;num);</span><br><span class=\"line\">\t\treturn tree[value].k=num%Mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tll mid=(l+r)&gt;&gt;1;</span><br><span class=\"line\">\treturn tree[value].k=(build_tree(value*2,l,mid)+build_tree(value*2+1,mid+1,r))%Mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inline void pushdown(ll value)&#123;</span><br><span class=\"line\">\ttree[value*2].add=(tree[value].add+tree[value*2].add*tree[value].mul)%Mod;</span><br><span class=\"line\">\ttree[value*2+1].add=(tree[value].add+tree[value*2+1].add*tree[value].mul)%Mod;</span><br><span class=\"line\">\ttree[value*2].mul=(tree[value].mul*tree[value*2].mul)%Mod;</span><br><span class=\"line\">\ttree[value*2+1].mul=(tree[value].mul*tree[value*2+1].mul)%Mod;</span><br><span class=\"line\">\ttree[value*2].k=(tree[value].mul*tree[value*2].k+tree[value].add*(tree[value*2].r-tree[value*2].l+1))%Mod;</span><br><span class=\"line\">\ttree[value*2+1].k=(tree[value].mul*tree[value*2+1].k+tree[value].add*(tree[value*2+1].r-tree[value*2+1].l+1))%Mod;</span><br><span class=\"line\">\ttree[value].add=0;</span><br><span class=\"line\">\ttree[value].mul=1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inline ll query(ll value,ll L,ll R)&#123;</span><br><span class=\"line\">\tpushdown(value);</span><br><span class=\"line\">\tif (tree[value].l&gt;=L&amp;&amp;tree[value].r&lt;=R)</span><br><span class=\"line\">\t\treturn tree[value].k%Mod;</span><br><span class=\"line\">\tll mid=(tree[value].l+tree[value].r)&gt;&gt;1;</span><br><span class=\"line\">    return ((L&lt;=mid?query(value*2,L,R):0)+(R&gt;mid?query(value*2+1,L,R):0))%Mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inline void updata(ll value,ll x,ll pos,ll L,ll R)&#123;</span><br><span class=\"line\">\tpushdown(value);</span><br><span class=\"line\">\tif (pos==1&amp;&amp;tree[value].l&gt;=L&amp;&amp;tree[value].r&lt;=R)&#123;</span><br><span class=\"line\">\t\ttree[value].mul=(tree[value].mul*x)%Mod;</span><br><span class=\"line\">        tree[value].add=(tree[value].add*x)%Mod;</span><br><span class=\"line\">        tree[value].k=(tree[value].k*tree[value].mul)%Mod;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(pos==2&amp;&amp;tree[value].l&gt;=L&amp;&amp;tree[value].r&lt;=R)&#123;</span><br><span class=\"line\">        tree[value].add=(tree[value].add+x)%Mod;</span><br><span class=\"line\">        tree[value].k=(tree[value].k+tree[value].add*(tree[value].r-tree[value].l+1))%Mod;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll mid=(tree[value].l+tree[value].r)/2;</span><br><span class=\"line\">    if(L&lt;=mid)</span><br><span class=\"line\">        updata(value*2,x,pos,L,R);</span><br><span class=\"line\">    if(R&gt;mid)</span><br><span class=\"line\">        updata((value*2)+1,x,pos,L,R);</span><br><span class=\"line\">    tree[value].k=(tree[value*2].k+tree[value*2+1].k)%Mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\tscanf(&quot;%lld%lld&quot;,&amp;n,&amp;Mod);</span><br><span class=\"line\">\tbuild_tree(1,1,n);</span><br><span class=\"line\">\tcin&gt;&gt;m;</span><br><span class=\"line\">\tfor (ll i=1;i&lt;=m;i++)&#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;pos;</span><br><span class=\"line\">\t\tll x,y;</span><br><span class=\"line\">\t\tcin&gt;&gt;x&gt;&gt;y; </span><br><span class=\"line\">\t\tif (pos!=3)&#123;</span><br><span class=\"line\">\t\t\tll k;</span><br><span class=\"line\">\t\t\tcin&gt;&gt;k;</span><br><span class=\"line\">\t\t\tupdata(1,k,pos,x,y);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (pos==3)</span><br><span class=\"line\">\t\t\tprintf(&quot;%lld\\n&quot;,query(1,x,y));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结与讨论-14\"><a href=\"#总结与讨论-14\" class=\"headerlink\" title=\"总结与讨论\"></a>总结与讨论</h2><p>​\t\t难</p>\n","tags":["算法"]},{"title":"日期类","url":"/2022/12/11/5/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class Date</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void set(int year, int month, int day)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this-&gt;year = year;</span><br><span class=\"line\">        this-&gt;month = month;</span><br><span class=\"line\">        this-&gt;day = day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //前置++</span><br><span class=\"line\">    Date&amp; operator++()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (day &lt; 28)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            day++;</span><br><span class=\"line\">            return *this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (month == 2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (day == 28 &amp;&amp; !(year % 400 == 0 || (year % 4 == 0 &amp;&amp; year % 100 != 0)))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                day++;</span><br><span class=\"line\">                return *this;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            month++, day = 1;</span><br><span class=\"line\">            return *this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (day == 29)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            day++;</span><br><span class=\"line\">            return *this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (day == 30)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            switch (month)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            case 4:case 6:case 9:case 11:</span><br><span class=\"line\">                day = 1;</span><br><span class=\"line\">                month++;</span><br><span class=\"line\">                return *this;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            day++;</span><br><span class=\"line\">            return *this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (month == 12)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            year++, month = 1, day = 1;</span><br><span class=\"line\">            return *this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            month++;</span><br><span class=\"line\">            day = 1;</span><br><span class=\"line\">            return *this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //后置++</span><br><span class=\"line\">    Date operator++(int)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Date* temp = this;</span><br><span class=\"line\">        return *temp;</span><br><span class=\"line\">        ++(*this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //前置--</span><br><span class=\"line\">    Date&amp; operator--()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (day == 1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            switch (month)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            case 2:case4:case 6:case 8:case 9:case 11:</span><br><span class=\"line\">                day = 31;</span><br><span class=\"line\">                month--;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case 5:case 7:case 10:case 12:</span><br><span class=\"line\">                day = 30;</span><br><span class=\"line\">                month--;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case 1:</span><br><span class=\"line\">                month = 12;</span><br><span class=\"line\">                year--;</span><br><span class=\"line\">                day = 31;</span><br><span class=\"line\">            case 3:</span><br><span class=\"line\">                if (year % 4 != 0)</span><br><span class=\"line\">                    month--;</span><br><span class=\"line\">                day = 28;</span><br><span class=\"line\">                month--;</span><br><span class=\"line\">                day = 29;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            day--;</span><br><span class=\"line\">        return *this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //后置--</span><br><span class=\"line\">    Date operator--(int)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Date* temp = this;</span><br><span class=\"line\">        return *temp;</span><br><span class=\"line\">        --(*this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int year;</span><br><span class=\"line\">    int month;</span><br><span class=\"line\">    int day;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">void show(Date data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;年：&quot; &lt;&lt; data.year &lt;&lt; &quot;月：&quot; &lt;&lt; data.month &lt;&lt; &quot;日：&quot; &lt;&lt; data.day &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Date data;</span><br><span class=\"line\">    data.set(2012, 4, 29);</span><br><span class=\"line\">    show(data);</span><br><span class=\"line\">    int a;</span><br><span class=\"line\">    cout &lt;&lt; &quot;选择：1、后置递增\\t 2、前置递增\\t 3、后置递减\\t 4、前置递减&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cin &gt;&gt; a;</span><br><span class=\"line\">    switch (a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    case 1:</span><br><span class=\"line\">        show(data++);</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    case 2:</span><br><span class=\"line\">        show(++data);</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    case 3:</span><br><span class=\"line\">        show(data--);</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    case 4:</span><br><span class=\"line\">        show(--data);</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["C++"]},{"title":"学生信息管理系统","url":"/2022/12/11/4/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;string&gt;</span><br><span class=\"line\">#include&lt;vector&gt;</span><br><span class=\"line\">#include&lt;windows.h&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class student</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    string s_name;</span><br><span class=\"line\">    int s_id = 0;</span><br><span class=\"line\">    int y_score = 0;//语文成绩</span><br><span class=\"line\">    int s_score = 0;//数学成绩</span><br><span class=\"line\">    int e_score = 0;//英语成绩</span><br><span class=\"line\">    int s_total = 0;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;student&gt; v;</span><br><span class=\"line\">vector&lt;student&gt;z;</span><br><span class=\"line\"></span><br><span class=\"line\">void showmenu()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;*******************************&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;欢迎来到学生管理系统&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;请选择您的操作&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;1.添加学生&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;2.输出学生列表&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;3.对成绩进行排序&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;4.根据学号查找学生信息&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;输入其他字符退出程序&quot; &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;*******************************&quot; &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void showstudent(vector&lt;student&gt;&amp; a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for (vector&lt;student&gt;::iterator it = a.begin(); it != a.end(); it++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; (*it).s_name &lt;&lt; &quot;\\t学号：&quot; &lt;&lt; (*it).s_id &lt;&lt; &quot;\\t语文成绩：&quot; &lt;&lt; (*it).y_score &lt;&lt; &quot;\\t数学成绩：&quot; &lt;&lt; (*it).s_score &lt;&lt; &quot;\\t英语成绩：&quot; &lt;&lt; (*it).e_score &lt;&lt; &quot;\\t总成绩：&quot; &lt;&lt; (*it).s_total &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void showstudent1(vector&lt;student&gt;&amp; a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i = 1;</span><br><span class=\"line\">    for (vector&lt;student&gt;::iterator it = a.begin(); it != a.end(); it++, i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;第&quot; &lt;&lt; i &lt;&lt; &quot;名： 姓名：&quot; &lt;&lt; (*it).s_name &lt;&lt; &quot;\\t学号：&quot; &lt;&lt; (*it).s_id &lt;&lt; &quot;\\t语文成绩：&quot; &lt;&lt; (*it).y_score &lt;&lt; &quot;\\t数学成绩：&quot; &lt;&lt; (*it).s_score &lt;&lt; &quot;\\t英语成绩：&quot; &lt;&lt; (*it).e_score &lt;&lt; &quot;\\t总成绩：&quot; &lt;&lt; (*it).s_total &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool comp(const student&amp; a, const student&amp; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return a.s_total &gt; b.s_total;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    aaa:</span><br><span class=\"line\">        showmenu();</span><br><span class=\"line\">        int a;</span><br><span class=\"line\">        cin &gt;&gt; a;</span><br><span class=\"line\">        system(&quot;cls&quot;);</span><br><span class=\"line\">        switch (a)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        case 1:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            student stu;</span><br><span class=\"line\">            cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; endl;</span><br><span class=\"line\">            cin &gt;&gt; stu.s_name;</span><br><span class=\"line\">            cout &lt;&lt; &quot;学生号：&quot; &lt;&lt; endl;</span><br><span class=\"line\">            cin &gt;&gt; stu.s_id;</span><br><span class=\"line\">            cout &lt;&lt; &quot;语文成绩&quot; &lt;&lt; endl;</span><br><span class=\"line\">            cin &gt;&gt; stu.y_score;</span><br><span class=\"line\">            cout &lt;&lt; &quot;数学成绩&quot; &lt;&lt; endl;</span><br><span class=\"line\">            cin &gt;&gt; stu.s_score;</span><br><span class=\"line\">            cout &lt;&lt; &quot;英语成绩&quot; &lt;&lt; endl;</span><br><span class=\"line\">            cin &gt;&gt; stu.e_score;</span><br><span class=\"line\">            stu.s_total = stu.y_score + stu.s_score + stu.e_score;</span><br><span class=\"line\">            v.push_back(stu);</span><br><span class=\"line\">            cout &lt;&lt; &quot;添加成功！&quot; &lt;&lt; endl;</span><br><span class=\"line\">            Sleep(1000);</span><br><span class=\"line\">            system(&quot;cls&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        case 2:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            showstudent(v);</span><br><span class=\"line\">            system(&quot;pause&quot;);</span><br><span class=\"line\">            system(&quot;cls&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        case 3:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            z = v;</span><br><span class=\"line\">            sort(z.begin(), z.end(), comp);</span><br><span class=\"line\">            showstudent1(z);</span><br><span class=\"line\">            system(&quot;pause&quot;);</span><br><span class=\"line\">            system(&quot;cls&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        case 4:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int id;</span><br><span class=\"line\">            cout &lt;&lt; &quot;请输入学生id号：&quot; &lt;&lt; endl;</span><br><span class=\"line\">            cin &gt;&gt; id;</span><br><span class=\"line\">            for (vector&lt;student&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if ((*it).s_id == id)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    cout &lt;&lt; &quot;查找成功 学生信息如下：&quot; &lt;&lt; endl;</span><br><span class=\"line\">                    cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; (*it).s_name &lt;&lt; &quot;\\t学号：&quot; &lt;&lt; (*it).s_id &lt;&lt; &quot;\\t语文成绩：&quot; &lt;&lt; (*it).y_score &lt;&lt; &quot;\\t数学成绩：&quot; &lt;&lt; (*it).s_score &lt;&lt; &quot;\\t英语成绩：&quot; &lt;&lt; (*it).e_score &lt;&lt; &quot;\\t总成绩：&quot; &lt;&lt; (*it).s_total &lt;&lt; endl;</span><br><span class=\"line\">                    system(&quot;pause&quot;);</span><br><span class=\"line\">                    system(&quot;cls&quot;);</span><br><span class=\"line\">                    goto aaa;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout &lt;&lt; &quot;查无此人！&quot; &lt;&lt; endl;</span><br><span class=\"line\">            system(&quot;pause&quot;);</span><br><span class=\"line\">            system(&quot;cls&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            goto bbb;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">bbb:</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","tags":["C++"]},{"title":"糖果机","url":"/2022/12/11/3/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include&lt;map&gt;</span><br><span class=\"line\">#include&lt;vector&gt;</span><br><span class=\"line\">#include&lt;cstdio&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">#include&lt;string&gt;</span><br><span class=\"line\">#include&lt;windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class Users &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">\tmap&lt;string, string&gt; m;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tUsers()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm[&quot;Administrator&quot;] = string(&quot;114514&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbool check(string username, string password)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tauto it = m.find(username);</span><br><span class=\"line\">\t\tif (it == m.end())</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\tif (it-&gt;second != password)</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbool login()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tputs(&quot;输入用户名:&quot;);</span><br><span class=\"line\">\t\tstring uname;</span><br><span class=\"line\">\t\tcin &gt;&gt; uname;</span><br><span class=\"line\">\t\tputs(&quot;输入密码:&quot;);</span><br><span class=\"line\">\t\tstring passw;</span><br><span class=\"line\">\t\tcin &gt;&gt; passw;</span><br><span class=\"line\">\t\tif (!check(uname, passw))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tputs(&quot;用户名或密码错误&quot;);</span><br><span class=\"line\">\t\t\tSleep(600);</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tputs(&quot;登录成功&quot;);</span><br><span class=\"line\">\t\tSleep(600);</span><br><span class=\"line\">\t\tsystem(&quot;cls&quot;);</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;users;</span><br><span class=\"line\"></span><br><span class=\"line\">class CandyList &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">\tmap&lt;string, int&gt; list;//名字到id的映射</span><br><span class=\"line\">\tvector&lt;string&gt; nameList;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tCandyList()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnameList.resize(1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint queryId(string name)//传入名字，返回id，不存在返回0</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tauto it = list.find(name);</span><br><span class=\"line\">\t\tif (it != list.end())</span><br><span class=\"line\">\t\t\treturn it-&gt;second;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstring queryName(int id)//传入ID 返回名字</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif (id &gt; nameList.size())</span><br><span class=\"line\">\t\t\treturn string(&quot;&quot;);</span><br><span class=\"line\">\t\treturn nameList[id];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint addCandyKind(string name)//无论有没有，都返回id</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint id = queryId(name);</span><br><span class=\"line\">\t\tif (id)</span><br><span class=\"line\">\t\t\treturn id;</span><br><span class=\"line\">\t\tid = list.size() + 1;</span><br><span class=\"line\">\t\tlist[name] = id;</span><br><span class=\"line\">\t\tnameList.push_back(name);</span><br><span class=\"line\">\t\treturn id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;candyList;</span><br><span class=\"line\"></span><br><span class=\"line\">class Store &#123;//仓库</span><br><span class=\"line\">private:</span><br><span class=\"line\">\tvector&lt;pair&lt;int, int&gt; &gt; s; //数量、单价</span><br><span class=\"line\">\tint sum;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tStore()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ts.clear();</span><br><span class=\"line\">\t\ts.resize(100);</span><br><span class=\"line\">\t\tsum = 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tint getSum()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint getPrice(int id)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn s[id].second;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvoid displayCandy()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;编号\\t品名\\t剩余数量 单价&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; s.size(); i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif (s[i].first &gt; 0)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; i &lt;&lt; &quot;\\t&quot; &lt;&lt; candyList.queryName(i) &lt;&lt; &quot;\\t&quot; &lt;&lt; s[i].first &lt;&lt; &quot;\\t &quot; &lt;&lt; s[i].second &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvoid addCandy(string name, int num, int price = -1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tbool ok = 1;</span><br><span class=\"line\">\t\tif (num &lt; 1)</span><br><span class=\"line\">\t\t\tok = 0, puts(&quot;数量错误&quot;);</span><br><span class=\"line\">\t\tif (price &lt; -1 || price == 0)</span><br><span class=\"line\">\t\t\tok = 0, puts(&quot;价格错误&quot;);</span><br><span class=\"line\">\t\tif (!ok)</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\tint id = candyList.addCandyKind(name);</span><br><span class=\"line\">\t\ts[id].first += num;</span><br><span class=\"line\">\t\tsum += num;</span><br><span class=\"line\">\t\tif (~price)</span><br><span class=\"line\">\t\t\ts[id].second = price;//更新价格</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint rmCandy(int id, int num, int pay)//卖糖</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif (!id)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tputs(&quot;编号错误！&quot;);</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (s[id].first &lt; num)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tputs(&quot;数量不足&quot;);</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tint totPrice = num * s[id].second;</span><br><span class=\"line\">\t\tif (pay &lt; totPrice)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tputs(&quot;钱不够&quot;);</span><br><span class=\"line\">\t\t\treturn -1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ts[id].first -= num;</span><br><span class=\"line\">\t\tsum -= num;</span><br><span class=\"line\">\t\treturn pay - totPrice;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;store;</span><br><span class=\"line\"></span><br><span class=\"line\">class Show &#123;//前端</span><br><span class=\"line\">private:</span><br><span class=\"line\">\tinline void read(int&amp; x)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint s = 0, w = 1;</span><br><span class=\"line\">\t\tchar ch = getchar();</span><br><span class=\"line\">\t\twhile (ch &lt; &#x27;0&#x27; || ch &gt; &#x27;9&#x27;)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif (ch == &#x27;-&#x27;)</span><br><span class=\"line\">\t\t\t\tw = -1;</span><br><span class=\"line\">\t\t\tch = getchar();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\twhile (ch &gt;= &#x27;0&#x27; &amp;&amp; ch &lt;= &#x27;9&#x27;)</span><br><span class=\"line\">\t\t\ts = s * 10 + ch - &#x27;0&#x27;, ch = getchar();</span><br><span class=\"line\">\t\tx = s * w;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">\tShow()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstore.addCandy(string(&quot;白砂糖&quot;), 10, 10);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvoid run()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;启动中&quot;);</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 5; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSleep(100);</span><br><span class=\"line\">\t\t\tprintf(&quot;.&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\twhile (1)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\taa:</span><br><span class=\"line\">\t\t\tsystem(&quot;cls&quot;);</span><br><span class=\"line\">\t\t\tif (store.getSum())</span><br><span class=\"line\">\t\t\t\tprintf(&quot;营业中!\\n买糖请输入1\\n&quot;);</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t\tprintf(&quot;缺货 暂停营业！\\n&quot;);</span><br><span class=\"line\">\t\t\tputs(&quot;加糖请输入2\\n退出系统输入3&quot;);</span><br><span class=\"line\">\t\t\tint type = 0;</span><br><span class=\"line\">\t\t\t//read(type);//提高容错性</span><br><span class=\"line\">\t\t\tcin &gt;&gt; type;</span><br><span class=\"line\">\t\t\tswitch (type)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\tcase 1:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; &quot;欢迎光临！&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t\tstore.displayCandy();</span><br><span class=\"line\">\t\t\t\tputs(&quot;输入编号：&quot;);</span><br><span class=\"line\">\t\t\t\tint id;</span><br><span class=\"line\">\t\t\t\tread(id);</span><br><span class=\"line\">\t\t\t\tputs(&quot;输入数量：&quot;);</span><br><span class=\"line\">\t\t\t\tint num;</span><br><span class=\"line\">\t\t\t\tread(num);</span><br><span class=\"line\">\t\t\t\tputs(&quot;请付款：&quot;);</span><br><span class=\"line\">\t\t\t\tint pay;</span><br><span class=\"line\">\t\t\t\tread(pay);</span><br><span class=\"line\">\t\t\t\tint temp = store.rmCandy(id, num, pay);</span><br><span class=\"line\">\t\t\t\tif (temp &gt; 0)</span><br><span class=\"line\">\t\t\t\t\tcout &lt;&lt; &quot;给你找零:&quot; &lt;&lt; temp &lt;&lt; endl &lt;&lt; &quot;\\n欢迎下次光临！&quot;;</span><br><span class=\"line\">\t\t\t\telse if (temp == 0)</span><br><span class=\"line\">\t\t\t\t\tcout &lt;&lt; &quot;交易成功 欢迎下次光临！&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t\tSleep(1000);</span><br><span class=\"line\">\t\t\t\tsystem(&quot;cls&quot;);</span><br><span class=\"line\">\t\t\t\tgoto aa;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcase 2:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tif (!users.login())</span><br><span class=\"line\">\t\t\t\t\tcontinue;</span><br><span class=\"line\">\t\t\t\tputs(&quot;请输入品名&quot;);</span><br><span class=\"line\">\t\t\t\tstring name;</span><br><span class=\"line\">\t\t\t\tcin &gt;&gt; name;</span><br><span class=\"line\">\t\t\t\tint id = candyList.queryId(name);//不存在这个糖 id==0</span><br><span class=\"line\">\t\t\t\tputs(&quot;请输入数量&quot;);</span><br><span class=\"line\">\t\t\t\tint num, price;</span><br><span class=\"line\">\t\t\t\tbool transPrice = 0;</span><br><span class=\"line\">\t\t\t\tread(num);</span><br><span class=\"line\">\t\t\t\tif (!id)</span><br><span class=\"line\">\t\t\t\t\tputs(&quot;输入定价(分/个)&quot;), read(price), transPrice = 1;</span><br><span class=\"line\">\t\t\t\tif (transPrice)</span><br><span class=\"line\">\t\t\t\t\tstore.addCandy(name, num, price);</span><br><span class=\"line\">\t\t\t\telse</span><br><span class=\"line\">\t\t\t\t\tstore.addCandy(name, num);</span><br><span class=\"line\">\t\t\t\tgoto aa;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcase 3:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tgoto flag;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tdefault:</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; &quot;输入错误！请重新输入！&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t\tSleep(1000);</span><br><span class=\"line\">\t\t\t\tgoto aa;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\tflag:</span><br><span class=\"line\">\t\t\tcout &lt;&lt; &quot;正在退出&quot;;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; 5; i++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tSleep(100);</span><br><span class=\"line\">\t\t\t\tprintf(&quot;.&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; &quot;\\n已退出！再见！&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tShow machine;</span><br><span class=\"line\">\tmachine.run();</span><br><span class=\"line\">\tsystem(&quot;pause&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","tags":["C++"]},{"title":"航班信息管理系统","url":"/2022/12/12/7/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string&gt;   </span><br><span class=\"line\">#include &lt;iomanip&gt;   </span><br><span class=\"line\">#include &lt;fstream&gt; </span><br><span class=\"line\">#include &lt;random&gt; </span><br><span class=\"line\">#include &lt;ctime&gt;   </span><br><span class=\"line\">#include &lt;windows.h&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct flightnode</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring flight_num;       //航班号</span><br><span class=\"line\">\tstring time;             //起飞时间</span><br><span class=\"line\">\tint date = 0;            //起飞日期</span><br><span class=\"line\">\tstring start_place;      //出发地</span><br><span class=\"line\">\tstring end_place;        //目的地</span><br><span class=\"line\">\tfloat discount = 0;      //折扣</span><br><span class=\"line\">\tint left = 0;            //余票</span><br><span class=\"line\">\tfloat price = 0;         //价格</span><br><span class=\"line\">\tflightnode* next = NULL;</span><br><span class=\"line\">&#125;*flightlist;</span><br><span class=\"line\"></span><br><span class=\"line\">struct ticket</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring flight_num;\t  //航班号</span><br><span class=\"line\">\tstring time;\t\t  //起飞时间</span><br><span class=\"line\">\tstring start_place;\t  //出发地</span><br><span class=\"line\">\tstring end_place;     //目的地</span><br><span class=\"line\">\tfloat price = 0;      //价格</span><br><span class=\"line\">\tint date = 0;         //起飞日期</span><br><span class=\"line\">\tstring order_num;\t  //订单编号</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct passengernode</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring name;        //名字</span><br><span class=\"line\">\tstring ID_num;      //证件号</span><br><span class=\"line\">\tticket ticket;      //票</span><br><span class=\"line\">\tint full = 0;       //预约标志  1表示预约状态</span><br><span class=\"line\">\tpassengernode* next = NULL;</span><br><span class=\"line\">&#125;*passengerlist;</span><br><span class=\"line\"></span><br><span class=\"line\">//航班类信息</span><br><span class=\"line\">void Init_flight(flightlist&amp; h);\t\t//初始化航班</span><br><span class=\"line\">void Load_flight(flightlist&amp; h);\t\t//载入航班</span><br><span class=\"line\">void Add_flight(flightlist&amp; h);\t\t\t//添加航班</span><br><span class=\"line\">void Check_flight(flightlist&amp; h);\t\t//查找航班</span><br><span class=\"line\">void Check_flightnum(flightlist&amp; h);\t//航班号查找</span><br><span class=\"line\">void Check_seplace(flightlist&amp; h);\t\t//起始地查找</span><br><span class=\"line\">void Check_all(flightlist&amp; h);\t\t\t//浏览全部航班</span><br><span class=\"line\">void Revise_flight(flightlist&amp; h);\t\t//修改航班信息</span><br><span class=\"line\">void Delete_flight(flightlist&amp; h);\t\t//删除航班</span><br><span class=\"line\">void Revise_time(flightlist&amp; h);\t\t//修改起飞抵达时间</span><br><span class=\"line\">void Revise_price(flightlist&amp; h);\t\t//修改价格</span><br><span class=\"line\">void Save_flight(flightlist&amp; h);\t\t//保存航班信息</span><br><span class=\"line\">//用户信息</span><br><span class=\"line\">void Init_passenger(passengerlist&amp; c);\t\t\t//初始化用户</span><br><span class=\"line\">void Load_passenger(passengerlist&amp; c);\t\t\t//载入用户信息</span><br><span class=\"line\">void Book(flightlist&amp; h, passengerlist&amp; c);\t\t//定票</span><br><span class=\"line\">void Qbook(flightlist&amp; h, passengerlist&amp; c);\t//退票</span><br><span class=\"line\">void Check_book(passengerlist&amp; c);\t\t\t\t//查询订单</span><br><span class=\"line\">void Save_passenger(passengerlist&amp; c);\t\t\t//保存用户信息</span><br><span class=\"line\">//管理操作</span><br><span class=\"line\">void manage(flightlist&amp; flight, passengerlist&amp; passenger);</span><br><span class=\"line\">void password();//密码管理</span><br><span class=\"line\">//通用</span><br><span class=\"line\">void wait();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">void manage(flightlist&amp; flight, passengerlist&amp; passenger)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\twhile (1) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;航班信息管理系统&quot; &lt;&lt; endl &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;主菜单&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;1.录入航班信息&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;2.查询航班&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;3.订票&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;4.退票&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;5.查询订单&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;6.修改航班信息&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;0.退出系统 &quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;请输入您想要进行的功能：&quot;;</span><br><span class=\"line\">\t\tint i;</span><br><span class=\"line\">\t\tcin &gt;&gt; i;</span><br><span class=\"line\">\t\tsystem(&quot;cls&quot;);</span><br><span class=\"line\">\t\tswitch (i) &#123;</span><br><span class=\"line\">\t\tcase 1:Add_flight(flight); Save_flight(flight); wait(); break;</span><br><span class=\"line\">\t\tcase 2:Check_flight(flight); wait(); break;</span><br><span class=\"line\">\t\tcase 3:Book(flight, passenger); Save_flight(flight); Save_passenger(passenger); wait(); break;</span><br><span class=\"line\">\t\tcase 4:Qbook(flight, passenger); Save_flight(flight); Save_passenger(passenger); wait(); break;</span><br><span class=\"line\">\t\tcase 5:Check_book(passenger); wait(); break;</span><br><span class=\"line\">\t\tcase 6:Revise_flight(flight); Save_flight(flight); wait(); break;</span><br><span class=\"line\">\t\tcase 0:exit(0); break;</span><br><span class=\"line\">\t\tdefault:cout &lt;&lt; &quot;请检查你的输入！&quot; &lt;&lt; endl; break;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Sort_flight(flightlist&amp; h)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tflightlist p = h-&gt;next;  //指向第一个结点</span><br><span class=\"line\">\twhile (p != NULL) &#123;</span><br><span class=\"line\">\t\tflightlist q = h-&gt;next;   //指向p后一个结点</span><br><span class=\"line\">\t\twhile (q) &#123;</span><br><span class=\"line\">\t\t\tif (q-&gt;date &gt; p-&gt;date) &#123;</span><br><span class=\"line\">\t\t\t\tflightnode temp = *p;   //临时保存指针交换</span><br><span class=\"line\">\t\t\t\ttemp.next = q-&gt;next;</span><br><span class=\"line\">\t\t\t\tq-&gt;next = p-&gt;next;</span><br><span class=\"line\">\t\t\t\t*p = *q;</span><br><span class=\"line\">\t\t\t\t*q = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tq = q-&gt;next;   //指针移动</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp = p-&gt;next;    //指针移动</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Init_flight(flightlist&amp; h)//初始化航班</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\th = new flightnode;  //头指针</span><br><span class=\"line\">\th-&gt;next = NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Load_flight(flightlist&amp; h)//载入航班</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tflightlist f = h;</span><br><span class=\"line\">\tflightlist newp = new flightnode;</span><br><span class=\"line\">\tifstream ifs(&quot;FlightList.txt&quot;);</span><br><span class=\"line\">\tif (!ifs.is_open()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;文件未被打开！&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\treturn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twhile (ifs &gt;&gt; newp-&gt;flight_num &gt;&gt; newp-&gt;date &gt;&gt; newp-&gt;time &gt;&gt; newp-&gt;start_place &gt;&gt; newp-&gt;end_place &gt;&gt; newp-&gt;price &gt;&gt; newp-&gt;discount &gt;&gt; newp-&gt;left) &#123;</span><br><span class=\"line\">\t\tf-&gt;next = newp;</span><br><span class=\"line\">\t\tf = f-&gt;next;</span><br><span class=\"line\">\t\tnewp = new flightnode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf-&gt;next = NULL;</span><br><span class=\"line\">\tdelete newp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Add_flight(flightlist&amp; h)//添加航班</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar mark = &#x27;y&#x27;;</span><br><span class=\"line\">\tflightlist s, rear;</span><br><span class=\"line\">\tfor (rear = h; rear-&gt;next != NULL; rear = rear-&gt;next) &#123;&#125;  // rear移动结点尾</span><br><span class=\"line\">\twhile (mark == &#x27;y&#x27; || mark == &#x27;Y&#x27;) &#123;</span><br><span class=\"line\">\t\ts = new flightnode;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;请输入航班号：&quot;;</span><br><span class=\"line\">\t\tcin &gt;&gt; s-&gt;flight_num;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;请输入起飞日期：&quot;;</span><br><span class=\"line\">\t\tcin &gt;&gt; s-&gt;date;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;请输入起飞时间：&quot;;</span><br><span class=\"line\">\t\tcin &gt;&gt; s-&gt;time;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;请输入出发地：&quot;;</span><br><span class=\"line\">\t\tcin &gt;&gt; s-&gt;start_place;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;请输入目的地：&quot;;</span><br><span class=\"line\">\t\tcin &gt;&gt; s-&gt;end_place;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;请输入价格：&quot;;</span><br><span class=\"line\">\t\tcin &gt;&gt; s-&gt;price;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;请输入折扣：&quot;;</span><br><span class=\"line\">\t\tcin &gt;&gt; s-&gt;discount;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;请输入余票：&quot;;</span><br><span class=\"line\">\t\tcin &gt;&gt; s-&gt;left;</span><br><span class=\"line\">\t\trear-&gt;next = s;</span><br><span class=\"line\">\t\trear = s;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;添加成功！&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;是否继续添加？（是“y”/否“n”）：&quot;;</span><br><span class=\"line\">\t\tcin &gt;&gt; mark;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trear-&gt;next = NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Check_flight(flightlist&amp; h)//查找航班</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint i;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;查找方式&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;1.航班查找&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;2.起始地查找&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;3.浏览全部航班&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入查找方式：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; i;</span><br><span class=\"line\">\tswitch (i) &#123;</span><br><span class=\"line\">\tcase 1:Check_flightnum(h); break;</span><br><span class=\"line\">\tcase 2:Check_seplace(h); break;</span><br><span class=\"line\">\tcase 3:Check_all(h); break;</span><br><span class=\"line\">\tdefault:break;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Check_flightnum(flightlist&amp; h)//航班号查找</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring flightnum;</span><br><span class=\"line\">\tflightlist p = h-&gt;next;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入航班号：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; flightnum;</span><br><span class=\"line\">\tcout &lt;&lt; setw(6) &lt;&lt; &quot;航班号&quot; &lt;&lt; setw(17) &lt;&lt; &quot;起飞日期&quot; &lt;&lt; setw(15) &lt;&lt; &quot;起飞时间&quot; &lt;&lt; setw(15) &lt;&lt; &quot;出发地&quot; &lt;&lt; setw(15) &lt;&lt; &quot;目的地&quot; &lt;&lt; setw(15) &lt;&lt; &quot;价格&quot; &lt;&lt; setw(15) &lt;&lt; &quot;折扣&quot; &lt;&lt; setw(15) &lt;&lt; &quot;余票&quot; &lt;&lt; endl;</span><br><span class=\"line\">\twhile (p != NULL) &#123;</span><br><span class=\"line\">\t\tif (p-&gt;flight_num == flightnum) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; setw(6) &lt;&lt; p-&gt;flight_num &lt;&lt; setw(15) &lt;&lt; p-&gt;date &lt;&lt; &quot;日&quot; &lt;&lt; setw(15) &lt;&lt; p-&gt;time &lt;&lt; setw(15) &lt;&lt; p-&gt;start_place &lt;&lt; setw(15) &lt;&lt; p-&gt;end_place &lt;&lt; setw(15) &lt;&lt; p-&gt;price &lt;&lt; setw(15) &lt;&lt; p-&gt;discount &lt;&lt; setw(15) &lt;&lt; p-&gt;left &lt;&lt; endl;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; setw(32) &lt;&lt; &quot;未查到任何信息。&quot;;</span><br><span class=\"line\">\twait();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Check_seplace(flightlist&amp; h)//起始地查找</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring start_place, end_place;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入出发地：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; start_place;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入目的地：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; end_place;</span><br><span class=\"line\">\tflightlist p = h-&gt;next;</span><br><span class=\"line\">\tcout &lt;&lt; setw(6) &lt;&lt; &quot;航班号&quot; &lt;&lt; setw(17) &lt;&lt; &quot;起飞日期&quot; &lt;&lt; setw(15) &lt;&lt; &quot;起飞时间&quot; &lt;&lt; setw(15) &lt;&lt; &quot;出发地&quot; &lt;&lt; setw(15) &lt;&lt; &quot;目的地&quot; &lt;&lt; setw(15) &lt;&lt; &quot;价格&quot; &lt;&lt; setw(15) &lt;&lt; &quot;折扣&quot; &lt;&lt; setw(15) &lt;&lt; &quot;余票&quot; &lt;&lt; endl;</span><br><span class=\"line\">\twhile (p != NULL) &#123;</span><br><span class=\"line\">\t\tif (p-&gt;start_place == start_place &amp;&amp; p-&gt;end_place == end_place) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; setw(6) &lt;&lt; p-&gt;flight_num &lt;&lt; setw(15) &lt;&lt; p-&gt;date &lt;&lt; &quot;号&quot; &lt;&lt; setw(15) &lt;&lt; p-&gt;time &lt;&lt; setw(15) &lt;&lt; p-&gt;start_place &lt;&lt; setw(15) &lt;&lt; p-&gt;end_place &lt;&lt; setw(15) &lt;&lt; p-&gt;price &lt;&lt; setw(15) &lt;&lt; p-&gt;discount &lt;&lt; setw(15) &lt;&lt; p-&gt;left &lt;&lt; endl;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp = p-&gt;next;        //移动</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;未查到任何信息&quot; &lt;&lt; endl;</span><br><span class=\"line\">\twait();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Check_all(flightlist&amp; h)//浏览全部航班</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tSort_flight(h);  //日期排序</span><br><span class=\"line\">\tflightlist p = h-&gt;next;</span><br><span class=\"line\">\tcout &lt;&lt; setw(6) &lt;&lt; &quot;航班号&quot; &lt;&lt; setw(17) &lt;&lt; &quot;起飞日期&quot; &lt;&lt; setw(15) &lt;&lt; &quot;起飞时间&quot; &lt;&lt; setw(15) &lt;&lt; &quot;出发地&quot; &lt;&lt; setw(15) &lt;&lt; &quot;目的地&quot; &lt;&lt; setw(15) &lt;&lt; &quot;价格&quot; &lt;&lt; setw(15) &lt;&lt; &quot;折扣&quot; &lt;&lt; setw(15) &lt;&lt; &quot;余票&quot; &lt;&lt; endl;</span><br><span class=\"line\">\twhile (p != NULL)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; setw(6) &lt;&lt; p-&gt;flight_num &lt;&lt; setw(15) &lt;&lt; p-&gt;date &lt;&lt; &quot;号&quot; &lt;&lt; setw(15) &lt;&lt; p-&gt;time &lt;&lt; setw(15) &lt;&lt; p-&gt;start_place &lt;&lt; setw(15) &lt;&lt; p-&gt;end_place &lt;&lt; setw(15) &lt;&lt; p-&gt;price &lt;&lt; setw(15) &lt;&lt; p-&gt;discount &lt;&lt; setw(15) &lt;&lt; p-&gt;left &lt;&lt; endl;</span><br><span class=\"line\">\t\tp = p-&gt;next;   //移动</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Revise_flight(flightlist&amp; h)//修改航班信息</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tflightlist f = h-&gt;next;</span><br><span class=\"line\">\tint i;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;修改内容:&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;1.删除航班&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;2.修改起飞时间&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;3.修改航班价格&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;4.返回&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入查找方式：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; i;</span><br><span class=\"line\">\tCheck_all(h);     //浏览全部</span><br><span class=\"line\">\tswitch (i) &#123;</span><br><span class=\"line\">\tcase 1:Delete_flight(h); break;</span><br><span class=\"line\">\tcase 2:Revise_time(h); break;</span><br><span class=\"line\">\tcase 3:Revise_price(h); break;</span><br><span class=\"line\">\tcase 4:return; break;</span><br><span class=\"line\">\tdefault:cout &lt;&lt; &quot;请检查你的输入！&quot; &lt;&lt; endl; break;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Delete_flight(flightlist&amp; h)//删除航班</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tflightlist p = h-&gt;next, q = h;  //q是p的前驱</span><br><span class=\"line\">\tstring flightnum;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入您想要修改的航班号：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; flightnum;</span><br><span class=\"line\">\twhile (p != NULL) &#123;</span><br><span class=\"line\">\t\tif (p-&gt;flight_num == flightnum) &#123;</span><br><span class=\"line\">\t\t\tq-&gt;next = p-&gt;next;      //p是要删除的结点，q是前一个结点</span><br><span class=\"line\">\t\t\tdelete p;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; &quot;删除成功！&quot;;</span><br><span class=\"line\">\t\t\twait();</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tq = q-&gt;next;</span><br><span class=\"line\">\t\tp = q-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;未查找到相关航班！&quot;;</span><br><span class=\"line\">\twait();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Revise_time(flightlist&amp; h)//修改起飞抵达时间</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring flightnum;</span><br><span class=\"line\">\tflightlist p = h-&gt;next;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入您想要修改的航班号：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; flightnum;</span><br><span class=\"line\">\twhile (p != NULL) &#123;</span><br><span class=\"line\">\t\tif (p-&gt;flight_num == flightnum) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; &quot;请输入新的起飞日期：&quot;;</span><br><span class=\"line\">\t\t\tcin &gt;&gt; p-&gt;date;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; &quot;请输入新的起飞时间：&quot;;</span><br><span class=\"line\">\t\t\tcin &gt;&gt; p-&gt;time;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; &quot;修改成功！&quot;;</span><br><span class=\"line\">\t\t\twait();</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;没有您想要修改的航班号!&quot;;</span><br><span class=\"line\">\twait();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Revise_price(flightlist&amp; h)//修改价格</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring flightnum;</span><br><span class=\"line\">\tflightlist p = h-&gt;next;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入您想要修改的航班号：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; flightnum;</span><br><span class=\"line\">\twhile (p != NULL) &#123;</span><br><span class=\"line\">\t\tif (p-&gt;flight_num == flightnum) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; &quot;请输入新的价格：&quot;;</span><br><span class=\"line\">\t\t\tcin &gt;&gt; p-&gt;price;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; &quot;请输入新的折扣：&quot;;</span><br><span class=\"line\">\t\t\tcin &gt;&gt; p-&gt;discount;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; &quot;修改成功！\t&quot;;</span><br><span class=\"line\">\t\t\twait();</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;没有您想要修改的航班号!&quot;;</span><br><span class=\"line\">\twait();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Save_flight(flightlist&amp; h)//保存航班信息</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tflightlist f = h-&gt;next;</span><br><span class=\"line\">\tSort_flight(h);</span><br><span class=\"line\">\tofstream ofs(&quot;FlightList.txt&quot;);</span><br><span class=\"line\">\tif (!ofs)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;存储失败！&quot;;</span><br><span class=\"line\">\t\treturn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twhile (f != NULL)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tofs &lt;&lt; f-&gt;flight_num &lt;&lt; &quot; &quot; &lt;&lt; f-&gt;date &lt;&lt; &quot; &quot; &lt;&lt; f-&gt;time &lt;&lt; &quot; &quot; &lt;&lt; f-&gt;start_place &lt;&lt; &quot; &quot; &lt;&lt; f-&gt;end_place &lt;&lt; &quot; &quot; &lt;&lt; f-&gt;price &lt;&lt; &quot; &quot; &lt;&lt; f-&gt;discount &lt;&lt; &quot; &quot; &lt;&lt; f-&gt;left &lt;&lt; endl;</span><br><span class=\"line\">\t\tf = f-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tofs.close();   //关闭文件</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Init_passenger(passengerlist&amp; c)//初始化用户</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tc = new passengernode;   //头结点</span><br><span class=\"line\">\tc-&gt;next = NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Load_passenger(passengerlist&amp; c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpassengerlist p = c;</span><br><span class=\"line\">\tpassengerlist newp = new passengernode;</span><br><span class=\"line\">\tifstream ifs(&quot;PassengerList.txt&quot;);</span><br><span class=\"line\">\tif (!ifs.is_open()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;文件未被打开！&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\treturn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;数据读取成功！&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tsystem(&quot;cls&quot;);</span><br><span class=\"line\">\twhile (ifs &gt;&gt; newp-&gt;name &gt;&gt; newp-&gt;ID_num &gt;&gt; newp-&gt;ticket.flight_num &gt;&gt; newp-&gt;ticket.date &gt;&gt; newp-&gt;ticket.time &gt;&gt; newp-&gt;ticket.start_place &gt;&gt; newp-&gt;ticket.end_place &gt;&gt; newp-&gt;ticket.price &gt;&gt; newp-&gt;ticket.order_num)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp-&gt;next = newp;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t\tnewp = new passengernode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tp-&gt;next = NULL;</span><br><span class=\"line\">\tdelete newp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Book(flightlist&amp; h, passengerlist&amp; c)//订票</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring start_place, end_place, flightnum;</span><br><span class=\"line\">\tint date;//航班信息</span><br><span class=\"line\">\tflightlist p = h-&gt;next, q = h-&gt;next;</span><br><span class=\"line\">\tpassengerlist s, r = c;</span><br><span class=\"line\">\tchar mark, check = &#x27;1&#x27;;</span><br><span class=\"line\">\tchar mark02 = &#x27;1&#x27;;         //标志</span><br><span class=\"line\">\tfor (; r-&gt;next != NULL; r = r-&gt;next) &#123;&#125;   //r移动到结点尾</span><br><span class=\"line\">\ts = new passengernode;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入乘客的姓名：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; s-&gt;name;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入乘客的证件号：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; s-&gt;ID_num;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入出发地：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; start_place;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入目的地：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; end_place;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请选择出发日期：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; date;</span><br><span class=\"line\">\tcout &lt;&lt; setw(6) &lt;&lt; &quot;航班号&quot; &lt;&lt; setw(17) &lt;&lt; &quot;起飞日期&quot; &lt;&lt; setw(15) &lt;&lt; &quot;起飞时间&quot; &lt;&lt; setw(15) &lt;&lt; &quot;出发地&quot; &lt;&lt; setw(15) &lt;&lt; &quot;目的地&quot; &lt;&lt; setw(15) &lt;&lt; &quot;价格&quot; &lt;&lt; setw(15) &lt;&lt; &quot;折扣&quot; &lt;&lt; setw(15) &lt;&lt; &quot;余票&quot; &lt;&lt; endl;</span><br><span class=\"line\">\twhile (p != NULL)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif (p-&gt;start_place == start_place &amp;&amp; p-&gt;end_place == end_place &amp;&amp; p-&gt;date == date)//匹配日期相符的航班</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; setw(6) &lt;&lt; p-&gt;flight_num &lt;&lt; setw(15) &lt;&lt; p-&gt;date &lt;&lt; &quot;号&quot; &lt;&lt; setw(15) &lt;&lt; p-&gt;time &lt;&lt; setw(15) &lt;&lt; p-&gt;start_place &lt;&lt; setw(15) &lt;&lt; p-&gt;end_place &lt;&lt; setw(15) &lt;&lt; p-&gt;price &lt;&lt; setw(15) &lt;&lt; p-&gt;discount &lt;&lt; setw(15) &lt;&lt; p-&gt;left &lt;&lt; endl;</span><br><span class=\"line\">\t\t\tcheck = &#x27;0&#x27;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif (check == &#x27;1&#x27;) &#123;</span><br><span class=\"line\">\t\tp = h-&gt;next;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;无&quot; &lt;&lt; setw(15) &lt;&lt; &quot;无&quot; &lt;&lt; setw(17) &lt;&lt; &quot;无&quot; &lt;&lt; setw(15) &lt;&lt; &quot;无&quot; &lt;&lt; setw(15) &lt;&lt; &quot;无&quot; &lt;&lt; setw(15) &lt;&lt; &quot;无&quot; &lt;&lt; setw(15) &lt;&lt; &quot;无&quot; &lt;&lt; setw(15) &lt;&lt; &quot;无&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;该天没相关的航班&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\tif (mark02 == &#x27;1&#x27;)</span><br><span class=\"line\">\t\t\treturn;//结束</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;是否进行购买？（Y/N）&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; mark;</span><br><span class=\"line\">\tif (mark == &#x27;y&#x27; || mark == &#x27;Y&#x27;) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;请输入您想要购买的航班号：&quot;;</span><br><span class=\"line\">\t\tcin &gt;&gt; flightnum;</span><br><span class=\"line\">\t\twhile (q != NULL) &#123;</span><br><span class=\"line\">\t\t\tif (q-&gt;flight_num == flightnum &amp;&amp; q-&gt;start_place == start_place &amp;&amp; q-&gt;end_place == end_place) &#123;</span><br><span class=\"line\">\t\t\t\tif (q-&gt;left == 0) &#123;</span><br><span class=\"line\">\t\t\t\t\tcout &lt;&lt; &quot;余票不足，请选择是否预约（Y/N）&quot;;</span><br><span class=\"line\">\t\t\t\t\tcin &gt;&gt; mark;</span><br><span class=\"line\">\t\t\t\t\tif (mark == &#x27;y&#x27; || mark == &#x27;Y&#x27;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\ts-&gt;full = 1;  //修改预约标志</span><br><span class=\"line\">\t\t\t\t\t\ts-&gt;ticket.flight_num = flightnum;</span><br><span class=\"line\">\t\t\t\t\t\ts-&gt;ticket.start_place = start_place;</span><br><span class=\"line\">\t\t\t\t\t\ts-&gt;ticket.end_place = end_place;</span><br><span class=\"line\">\t\t\t\t\t\ts-&gt;ticket.time = &quot;预约&quot;;</span><br><span class=\"line\">\t\t\t\t\t\ts-&gt;ticket.price = 000;</span><br><span class=\"line\">\t\t\t\t\t\ts-&gt;ticket.date = date;</span><br><span class=\"line\">\t\t\t\t\t\ts-&gt;ticket.order_num = &quot;预约&quot;;</span><br><span class=\"line\">\t\t\t\t\t\tcout &lt;&lt; &quot; 预约成功&quot;;</span><br><span class=\"line\">\t\t\t\t\t\tr-&gt;next = s;</span><br><span class=\"line\">\t\t\t\t\t\tr = s;</span><br><span class=\"line\">\t\t\t\t\t\tr-&gt;next = NULL;</span><br><span class=\"line\">\t\t\t\t\t\twait();</span><br><span class=\"line\">\t\t\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\telse</span><br><span class=\"line\">\t\t\t\t\t\treturn;  //不预约直接结束</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\ts-&gt;ticket.flight_num = flightnum;</span><br><span class=\"line\">\t\t\t\ts-&gt;ticket.start_place = start_place;</span><br><span class=\"line\">\t\t\t\ts-&gt;ticket.end_place = end_place;</span><br><span class=\"line\">\t\t\t\ts-&gt;ticket.time = q-&gt;time;</span><br><span class=\"line\">\t\t\t\ts-&gt;ticket.price = q-&gt;price;</span><br><span class=\"line\">\t\t\t\ts-&gt;ticket.date = q-&gt;date;</span><br><span class=\"line\">\t\t\t\tsrand((unsigned int)time(0));</span><br><span class=\"line\">\t\t\t\ts-&gt;ticket.order_num = q-&gt;flight_num + to_string(rand()) + to_string(rand());//订单编号</span><br><span class=\"line\">\t\t\t\tr-&gt;next = s;</span><br><span class=\"line\">\t\t\t\tr = s;</span><br><span class=\"line\">\t\t\t\tr-&gt;next = NULL;</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; &quot;购票成功！&quot; &lt;&lt; &quot;订单号为&quot; + s-&gt;ticket.order_num &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t\tq-&gt;left--;</span><br><span class=\"line\">\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t\tq = q-&gt;next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;航班号填入错误！&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\twait();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse &#123;</span><br><span class=\"line\">\t\treturn;//不进行购买直接结束</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Qbook(flightlist&amp; h, passengerlist&amp; c)//退票</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring name, ID_num;</span><br><span class=\"line\">\tbool mark = false;</span><br><span class=\"line\">\tflightlist f = h-&gt;next;</span><br><span class=\"line\">\tpassengerlist p = c-&gt;next, q = c, t = c-&gt;next;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入乘客的姓名：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; name;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入乘客的证件号：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; ID_num;</span><br><span class=\"line\">\twhile (p != NULL) &#123;</span><br><span class=\"line\">\t\tif (p-&gt;name == name &amp;&amp; p-&gt;ID_num == ID_num) &#123;</span><br><span class=\"line\">\t\t\tmark = true;   //找到乘客</span><br><span class=\"line\">\t\t\twhile (f != NULL) &#123;</span><br><span class=\"line\">\t\t\t\tif (p-&gt;ticket.flight_num == f-&gt;flight_num) &#123;</span><br><span class=\"line\">\t\t\t\t\tf-&gt;left++;  //票数更新</span><br><span class=\"line\">\t\t\t\t\twhile (t != NULL) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tif (t-&gt;ticket.flight_num == p-&gt;ticket.flight_num &amp;&amp; t-&gt;full == 1) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tt-&gt;ticket.start_place = p-&gt;ticket.start_place;</span><br><span class=\"line\">\t\t\t\t\t\t\tt-&gt;ticket.end_place = p-&gt;ticket.end_place;</span><br><span class=\"line\">\t\t\t\t\t\t\tt-&gt;ticket.time = p-&gt;ticket.time;</span><br><span class=\"line\">\t\t\t\t\t\t\tt-&gt;ticket.price = p-&gt;ticket.price;</span><br><span class=\"line\">\t\t\t\t\t\t\tt-&gt;ticket.date = p-&gt;ticket.date;</span><br><span class=\"line\">\t\t\t\t\t\t\tsrand((unsigned int)time(0));</span><br><span class=\"line\">\t\t\t\t\t\t\tt-&gt;ticket.order_num = p-&gt;ticket.flight_num.c_str() + to_string(rand()) + to_string(rand());</span><br><span class=\"line\">\t\t\t\t\t\t\tf-&gt;left--;</span><br><span class=\"line\">\t\t\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\tt = t-&gt;next;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tf = f-&gt;next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tq-&gt;next = p-&gt;next;</span><br><span class=\"line\">\t\t\tdelete p;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; &quot;退票成功！&quot;;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tq = q-&gt;next;</span><br><span class=\"line\">\t\tp = q-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif (!mark) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;未找到相关乘客的订单&quot;;</span><br><span class=\"line\">\t\twait();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Check_book(passengerlist&amp; c)//查询订票</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring name, ID_num;</span><br><span class=\"line\">\tpassengerlist p = c-&gt;next;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入乘客的姓名：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; name;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;请输入乘客的证件号：&quot;;</span><br><span class=\"line\">\tcin &gt;&gt; ID_num;</span><br><span class=\"line\">\tcout &lt;&lt; setw(8) &lt;&lt; &quot;姓名&quot; &lt;&lt; setw(15) &lt;&lt; &quot;航班号&quot; &lt;&lt; setw(17) &lt;&lt; &quot;起飞日期&quot; &lt;&lt; setw(15) &lt;&lt; &quot;起飞时间&quot; &lt;&lt; setw(15) &lt;&lt; &quot;出发地&quot; &lt;&lt; setw(15) &lt;&lt; &quot;目的地&quot; &lt;&lt; setw(15) &lt;&lt; &quot;价格&quot; &lt;&lt; setw(18) &lt;&lt; &quot;订单编号&quot; &lt;&lt; endl;</span><br><span class=\"line\">\twhile (p != NULL) &#123;</span><br><span class=\"line\">\t\tif (p-&gt;name == name &amp;&amp; p-&gt;ID_num == ID_num) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; setw(8) &lt;&lt; p-&gt;name &lt;&lt; setw(15) &lt;&lt; p-&gt;ticket.flight_num &lt;&lt; setw(15) &lt;&lt; p-&gt;ticket.date &lt;&lt; &quot;号&quot; &lt;&lt; setw(15) &lt;&lt; p-&gt;ticket.time &lt;&lt; setw(15) &lt;&lt; p-&gt;ticket.start_place &lt;&lt; setw(15) &lt;&lt; p-&gt;ticket.end_place &lt;&lt; setw(15) &lt;&lt; p-&gt;ticket.price &lt;&lt; setw(18) &lt;&lt; p-&gt;ticket.order_num &lt;&lt; endl;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; setw(32) &lt;&lt; &quot;未查到任何信息。&quot;;</span><br><span class=\"line\">\twait();</span><br><span class=\"line\">\treturn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Save_passenger(passengerlist&amp; c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpassengerlist p = c-&gt;next;</span><br><span class=\"line\">\tofstream ofs(&quot;PassengerList.txt&quot;);</span><br><span class=\"line\">\tif (!ofs) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;存储失败！&quot;;</span><br><span class=\"line\">\t\treturn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twhile (p != NULL) &#123;</span><br><span class=\"line\">\t\tofs &lt;&lt; p-&gt;name &lt;&lt; &quot; &quot; &lt;&lt; p-&gt;ID_num &lt;&lt; &quot; &quot; &lt;&lt; p-&gt;ticket.flight_num &lt;&lt; &quot; &quot; &lt;&lt; p-&gt;ticket.date &lt;&lt; &quot; &quot; &lt;&lt; p-&gt;ticket.time &lt;&lt; &quot; &quot; &lt;&lt; p-&gt;ticket.start_place &lt;&lt; &quot; &quot; &lt;&lt; p-&gt;ticket.end_place &lt;&lt; &quot; &quot; &lt;&lt; p-&gt;ticket.price &lt;&lt; &quot; &quot; &lt;&lt; p-&gt;ticket.order_num &lt;&lt; endl;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tofs.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void wait() &#123;</span><br><span class=\"line\">\tint a = getchar();</span><br><span class=\"line\">\ta = getchar();</span><br><span class=\"line\">\tsystem(&quot;cls&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tflightlist flight;</span><br><span class=\"line\">\tpassengerlist passenger;</span><br><span class=\"line\">\tInit_passenger(passenger); //初始用户信息</span><br><span class=\"line\">\tLoad_passenger(passenger); //载入用户信息</span><br><span class=\"line\">\tInit_flight(flight);       //初始化航班</span><br><span class=\"line\">\tLoad_flight(flight);       //载入航班</span><br><span class=\"line\">\tmanage(flight, passenger); //封装管理函数</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","tags":["C++"]},{"title":"输出斐波拉契数列前50项","url":"/2022/12/12/8/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DATAS SEGMENT</span><br><span class=\"line\">\tDW 200 DUP(0)</span><br><span class=\"line\">   </span><br><span class=\"line\">DATAS ENDS</span><br><span class=\"line\"></span><br><span class=\"line\">STACKS SEGMENT</span><br><span class=\"line\">    DW 30 DUP(0)</span><br><span class=\"line\">STACKS ENDS</span><br><span class=\"line\"></span><br><span class=\"line\">CODES SEGMENT</span><br><span class=\"line\">    ASSUME CS:CODES,DS:DATAS,SS:STACKS</span><br><span class=\"line\">START:</span><br><span class=\"line\">\t.386</span><br><span class=\"line\">\tMOV AX,DATAS</span><br><span class=\"line\">\tMOV DS,AX</span><br><span class=\"line\">\tMOV AX,STACKS</span><br><span class=\"line\">\tMOV SS,AX</span><br><span class=\"line\">\tMOV SI,0</span><br><span class=\"line\">\tMOV DI,0 </span><br><span class=\"line\">\tMOV EAX,1</span><br><span class=\"line\">\tMOV EDX,0</span><br><span class=\"line\">\tJMP PRINT11</span><br><span class=\"line\">A:</span><br><span class=\"line\">\tCALL FIBO</span><br><span class=\"line\"></span><br><span class=\"line\">FIBO:</span><br><span class=\"line\">\tCMP DI,392</span><br><span class=\"line\">\tJE BACK</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tCMP DI,0\t</span><br><span class=\"line\">\tJE SET1</span><br><span class=\"line\"></span><br><span class=\"line\">SET1BACK:</span><br><span class=\"line\">\tCMP DI,8</span><br><span class=\"line\">\tJE SET2</span><br><span class=\"line\"></span><br><span class=\"line\">SET2BACK:</span><br><span class=\"line\">\tADD DI,8</span><br><span class=\"line\">\tMOV EAX,DS:[DI-8]</span><br><span class=\"line\">\tMOV EDX,DS:[DI-4]</span><br><span class=\"line\">\tMOV ECX,DS:[DI-12]</span><br><span class=\"line\">\tMOV EBX,DS:[DI-16]</span><br><span class=\"line\">\tADD EAX,EBX</span><br><span class=\"line\">\tADC EDX,ECX</span><br><span class=\"line\">\tMOV DS:[DI],EAX</span><br><span class=\"line\">\tMOV DS:[DI+4],EDX</span><br><span class=\"line\">\tCALL PRINT</span><br><span class=\"line\"></span><br><span class=\"line\">PRINTBACK:\t</span><br><span class=\"line\">\tCALL FIBO</span><br><span class=\"line\">\t</span><br><span class=\"line\">;==================================================</span><br><span class=\"line\">SET1:</span><br><span class=\"line\">\tMOV DS:[0],EAX</span><br><span class=\"line\">\tMOV DS:[4],EDX</span><br><span class=\"line\">\tADD DI,8</span><br><span class=\"line\">\tJMP SET1BACK</span><br><span class=\"line\">;==================================================</span><br><span class=\"line\">SET2:</span><br><span class=\"line\">\tMOV DS:[8],EAX</span><br><span class=\"line\">\tMOV DS:[12],EDX</span><br><span class=\"line\">\tJMP SET2BACK</span><br><span class=\"line\">;==================================================\t</span><br><span class=\"line\"></span><br><span class=\"line\">;PRINT EDX EAX</span><br><span class=\"line\">PRINT:</span><br><span class=\"line\">\tPUSH EAX</span><br><span class=\"line\">\tPUSH EBX</span><br><span class=\"line\">\tPUSH ECX</span><br><span class=\"line\">\tPUSH EDX</span><br><span class=\"line\">\tCMP EDX,10B</span><br><span class=\"line\">\tJNB P1</span><br><span class=\"line\">\tCMP EDX,0</span><br><span class=\"line\">\tJA  P2</span><br><span class=\"line\">\tCMP EAX,1000000000</span><br><span class=\"line\">\tJNB P2</span><br><span class=\"line\">\tCMP EAX,100000000</span><br><span class=\"line\">\tJNB P3</span><br><span class=\"line\">\tCMP EAX,10000000</span><br><span class=\"line\">\tJNB P4</span><br><span class=\"line\">\tCMP EAX,1000000</span><br><span class=\"line\">\tJNB P5</span><br><span class=\"line\">\tCMP EAX,100000</span><br><span class=\"line\">\tJNB P6</span><br><span class=\"line\">\tCMP EAX,10000</span><br><span class=\"line\">\tJNB P7</span><br><span class=\"line\">\tCMP EAX,1000</span><br><span class=\"line\">\tJNB P8</span><br><span class=\"line\">\tCMP EAX,100</span><br><span class=\"line\">\tJNB P9</span><br><span class=\"line\">\tCMP EAX,10</span><br><span class=\"line\">\tJNB P10</span><br><span class=\"line\">\tCMP EAX,1</span><br><span class=\"line\">\tJNB P11</span><br><span class=\"line\"></span><br><span class=\"line\">P1:</span><br><span class=\"line\">\tMOV DL,1</span><br><span class=\"line\">\tADD DL,30H</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\tMOV EAX,10011010001001110101010101100001B</span><br><span class=\"line\">\tMOV EDX,0</span><br><span class=\"line\"></span><br><span class=\"line\">P2:</span><br><span class=\"line\">\tMOV EBX,1000000000</span><br><span class=\"line\">\tDIV EBX</span><br><span class=\"line\">\tPUSH EDX</span><br><span class=\"line\">\tMOV EDX,EAX</span><br><span class=\"line\">\tADD DL,30H</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\tPOP EAX</span><br><span class=\"line\">\tMOV EDX,0</span><br><span class=\"line\"></span><br><span class=\"line\">P3:</span><br><span class=\"line\">\tMOV EBX,100000000</span><br><span class=\"line\">\tDIV EBX</span><br><span class=\"line\">\tPUSH EDX</span><br><span class=\"line\">\tMOV EDX,EAX</span><br><span class=\"line\">\tADD DL,30H</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\tPOP EAX</span><br><span class=\"line\">\tMOV EDX,0</span><br><span class=\"line\"></span><br><span class=\"line\">P4:</span><br><span class=\"line\">\tMOV EBX,10000000</span><br><span class=\"line\">\tDIV EBX</span><br><span class=\"line\">\tPUSH EDX</span><br><span class=\"line\">\tMOV EDX,EAX</span><br><span class=\"line\">\tADD DL,30H</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\tPOP EAX</span><br><span class=\"line\">\tMOV EDX,0</span><br><span class=\"line\"></span><br><span class=\"line\">P5:</span><br><span class=\"line\">\tMOV EBX,1000000</span><br><span class=\"line\">\tDIV EBX</span><br><span class=\"line\">\tPUSH EDX</span><br><span class=\"line\">\tMOV EDX,EAX</span><br><span class=\"line\">\tADD DL,30H</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\tPOP EAX</span><br><span class=\"line\">\tMOV EDX,0</span><br><span class=\"line\"></span><br><span class=\"line\">P6:</span><br><span class=\"line\">\tMOV EBX,100000</span><br><span class=\"line\">\tDIV EBX</span><br><span class=\"line\">\tPUSH EDX</span><br><span class=\"line\">\tMOV EDX,EAX</span><br><span class=\"line\">\tADD DL,30H</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\tPOP EAX</span><br><span class=\"line\">\tMOV EDX,0</span><br><span class=\"line\"></span><br><span class=\"line\">P7:</span><br><span class=\"line\">\tMOV EBX,10000</span><br><span class=\"line\">\tDIV EBX</span><br><span class=\"line\">\tPUSH EDX</span><br><span class=\"line\">\tMOV EDX,EAX</span><br><span class=\"line\">\tADD DL,30H</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\tPOP EAX</span><br><span class=\"line\">\tMOV EDX,0</span><br><span class=\"line\"></span><br><span class=\"line\">P8:</span><br><span class=\"line\">\tMOV EBX,1000</span><br><span class=\"line\">\tDIV EBX</span><br><span class=\"line\">\tPUSH EDX</span><br><span class=\"line\">\tMOV EDX,EAX</span><br><span class=\"line\">\tADD DL,30H</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\tPOP EAX</span><br><span class=\"line\">\tMOV EDX,0</span><br><span class=\"line\"></span><br><span class=\"line\">P9:</span><br><span class=\"line\">\tMOV EBX,100</span><br><span class=\"line\">\tDIV EBX</span><br><span class=\"line\">\tPUSH EDX</span><br><span class=\"line\">\tMOV EDX,EAX</span><br><span class=\"line\">\tADD DL,30H</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\tPOP EAX</span><br><span class=\"line\">\tMOV EDX,0</span><br><span class=\"line\"></span><br><span class=\"line\">P10:</span><br><span class=\"line\">\tMOV EBX,10</span><br><span class=\"line\">\tDIV EBX</span><br><span class=\"line\">\tPUSH EDX</span><br><span class=\"line\">\tMOV EDX,EAX</span><br><span class=\"line\">\tADD DL,30H</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\tPOP EAX</span><br><span class=\"line\">\tMOV EDX,0\t</span><br><span class=\"line\"></span><br><span class=\"line\">P11:</span><br><span class=\"line\">\tMOV EBX,1</span><br><span class=\"line\">\tDIV EBX</span><br><span class=\"line\">\tPUSH EDX</span><br><span class=\"line\">\tMOV EDX,EAX</span><br><span class=\"line\">\tADD DL,30H</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\tPOP EAX</span><br><span class=\"line\">\tMOV EDX,0</span><br><span class=\"line\">\tMOV DL,32</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPOP EDX</span><br><span class=\"line\">\tPOP ECX</span><br><span class=\"line\">\tPOP EBX</span><br><span class=\"line\">\tPOP EAX</span><br><span class=\"line\">\tJMP PRINTBACK</span><br><span class=\"line\">;PRINT END</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;PRINT11</span><br><span class=\"line\">PRINT11:</span><br><span class=\"line\">\tPUSH EDX</span><br><span class=\"line\">\tPUSH EAX</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tMOV DL,1</span><br><span class=\"line\">\tADD DL,30H</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\tMOV DL,32</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tMOV DL,1</span><br><span class=\"line\">\tADD DL,30H</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\tMOV DL,32</span><br><span class=\"line\">\tMOV AH,2H</span><br><span class=\"line\">\tINT 21H</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPOP EAX</span><br><span class=\"line\">\tPOP EDX</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tJMP A</span><br><span class=\"line\"></span><br><span class=\"line\">BACK:</span><br><span class=\"line\">\tMOV AX,4C00H</span><br><span class=\"line\">   \tINT 21H</span><br><span class=\"line\">CODES ENDS</span><br><span class=\"line\">    END START</span><br></pre></td></tr></table></figure>\n\n","tags":["汇编"]},{"title":"输出斐波拉契数列前20项","url":"/2022/12/12/9/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DATAS SEGMENT</span><br><span class=\"line\"> VAL    DW 20 DUP(0)</span><br><span class=\"line\">DATAS ENDS</span><br><span class=\"line\">STACKS SEGMENT</span><br><span class=\"line\"> DW 30 DUP(0)</span><br><span class=\"line\">STACKS ENDS</span><br><span class=\"line\">CODES SEGMENT</span><br><span class=\"line\">    ASSUME CS:CODES,DS:DATAS,SS:DATAS</span><br><span class=\"line\">START:</span><br><span class=\"line\">    MOV AX,DATAS</span><br><span class=\"line\">    MOV DS,AX</span><br><span class=\"line\">    MOV AX,STACKS</span><br><span class=\"line\">    MOV SS,AX</span><br><span class=\"line\">    MOV DI,0</span><br><span class=\"line\">    MOV AX,1</span><br><span class=\"line\">    MOV DX,1</span><br><span class=\"line\">    JMP FIBO</span><br><span class=\"line\">    </span><br><span class=\"line\">FIBO:   MOV VAL[DI],AX</span><br><span class=\"line\">\t\tADD DI,2</span><br><span class=\"line\">\t\tMOV VAL[DI],DX</span><br><span class=\"line\">\t\tADD DI,2</span><br><span class=\"line\">\t\tADD AX,DX</span><br><span class=\"line\">\t\tADD DX,AX</span><br><span class=\"line\">\t\tCMP DI,40</span><br><span class=\"line\">\t\tJAE  BACK</span><br><span class=\"line\">\t\tCALL FIBO</span><br><span class=\"line\">\t\tRET</span><br><span class=\"line\">\t  </span><br><span class=\"line\">BACK:   </span><br><span class=\"line\">  MOV DI,0</span><br><span class=\"line\">   MOV CX,20</span><br><span class=\"line\">   MOV DX,0</span><br><span class=\"line\">   </span><br><span class=\"line\">L1:    </span><br><span class=\"line\">        MOV AX,VAL[DI]</span><br><span class=\"line\">  ADD DI,2</span><br><span class=\"line\">  CMP AX,1000</span><br><span class=\"line\">  JNB P1</span><br><span class=\"line\">  CMP AX,100</span><br><span class=\"line\">  JNB P2</span><br><span class=\"line\">  CMP AX,10</span><br><span class=\"line\">  JNB P3</span><br><span class=\"line\">  CMP AX,1</span><br><span class=\"line\">  JNB P4</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">P1:  MOV BX,1000</span><br><span class=\"line\">  DIV BX</span><br><span class=\"line\">  PUSH DX</span><br><span class=\"line\">  MOV DX,AX</span><br><span class=\"line\">  ADD DL,30H</span><br><span class=\"line\">  MOV AH,2H</span><br><span class=\"line\">  INT 21H</span><br><span class=\"line\">  POP AX</span><br><span class=\"line\">  MOV DX,0</span><br><span class=\"line\">  </span><br><span class=\"line\">P2:  MOV BX,100</span><br><span class=\"line\">  DIV BX</span><br><span class=\"line\">  PUSH DX</span><br><span class=\"line\">  MOV DX,AX</span><br><span class=\"line\">  ADD DL,30H</span><br><span class=\"line\">  MOV AH,2H</span><br><span class=\"line\">  INT 21H</span><br><span class=\"line\">  POP AX</span><br><span class=\"line\">  MOV DX,0</span><br><span class=\"line\">  </span><br><span class=\"line\">P3:     MOV BX,10</span><br><span class=\"line\">  DIV BX</span><br><span class=\"line\">  PUSH DX</span><br><span class=\"line\">  MOV DX,AX</span><br><span class=\"line\">  ADD DL,30H</span><br><span class=\"line\">  MOV AH,2H</span><br><span class=\"line\">  INT 21H</span><br><span class=\"line\">  POP AX</span><br><span class=\"line\">  MOV DX,0</span><br><span class=\"line\">  </span><br><span class=\"line\">P4:    </span><br><span class=\"line\">        MOV BX,1</span><br><span class=\"line\">  DIV BX</span><br><span class=\"line\">  PUSH DX</span><br><span class=\"line\">  MOV DX,AX</span><br><span class=\"line\">  ADD DL,30H</span><br><span class=\"line\">  MOV AH,2H</span><br><span class=\"line\">  INT 21H</span><br><span class=\"line\">  POP AX</span><br><span class=\"line\">  </span><br><span class=\"line\">  MOV DL,32</span><br><span class=\"line\">  MOV AH,2H</span><br><span class=\"line\">  INT 21H</span><br><span class=\"line\">  MOV DX,0</span><br><span class=\"line\">  LOOP L1</span><br><span class=\"line\">  </span><br><span class=\"line\">  MOV AX,4C00H</span><br><span class=\"line\">  INT 21H</span><br><span class=\"line\">CODES ENDS</span><br><span class=\"line\">    END START</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","tags":["汇编"]},{"title":"面向对象编程","url":"/2022/12/11/6/","content":"<h1 id=\"C-核心编程\"><a href=\"#C-核心编程\" class=\"headerlink\" title=\"C++核心编程\"></a>C++核心编程</h1><p>本阶段主要针对C++&#x3D;&#x3D;面向对象&#x3D;&#x3D;编程技术做详细讲解，探讨C++中的核心和精髓。</p>\n<h2 id=\"1-内存分区模型\"><a href=\"#1-内存分区模型\" class=\"headerlink\" title=\"1 内存分区模型\"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p>\n<ul>\n<li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li>\n<li>全局区：存放全局变量和静态变量以及常量</li>\n<li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li>\n<li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li>\n</ul>\n<p><strong>内存四区意义：</strong></p>\n<p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p>\n<h3 id=\"1-1-程序运行前\"><a href=\"#1-1-程序运行前\" class=\"headerlink\" title=\"1.1 程序运行前\"></a>1.1 程序运行前</h3><pre><code>在程序编译后，生成了exe可执行程序，**未执行该程序前**分为两个区域\n\n**代码区：**\n\n    存放 CPU 执行的机器指令\n\n    代码区是**共享**的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可\n\n    代码区是**只读**的，使其只读的原因是防止程序意外地修改了它的指令\n\n**全局区：**\n\n    全局变量和静态变量存放在此.\n\n    全局区还包含了常量区, 字符串常量和其他常量也存放在此.\n\n    ==该区域的数据在程序结束后由操作系统释放==.\n</code></pre>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局变量</span></span><br><span class=\"line\"><span class=\"type\">int</span> g_a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> g_b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局常量</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> c_g_a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> c_g_b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//局部变量</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//打印地址</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;局部变量a地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;局部变量b地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;全局变量g_a地址为： &quot;</span> &lt;&lt;  (<span class=\"type\">int</span>)&amp;g_a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;全局变量g_b地址为： &quot;</span> &lt;&lt;  (<span class=\"type\">int</span>)&amp;g_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态变量</span></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> s_a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> s_b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;静态变量s_a地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;s_a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;静态变量s_b地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;s_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;<span class=\"string\">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;<span class=\"string\">&quot;hello world1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;全局常量c_g_a地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;c_g_a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;全局常量c_g_b地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;c_g_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> c_l_a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> c_l_b = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;局部常量c_l_a地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;c_l_a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;局部常量c_l_b地址为： &quot;</span> &lt;&lt; (<span class=\"type\">int</span>)&amp;c_l_b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"/assets/1545017602518.png\" alt=\"1545017602518\"></p>\n<p>总结：</p>\n<ul>\n<li>C++中在程序运行前分为全局区和代码区</li>\n<li>代码区特点是共享和只读</li>\n<li>全局区中存放全局变量、静态变量、常量</li>\n<li>常量区中存放 const修饰的全局常量  和 字符串常量</li>\n</ul>\n<h3 id=\"1-2-程序运行后\"><a href=\"#1-2-程序运行后\" class=\"headerlink\" title=\"1.2 程序运行后\"></a>1.2 程序运行后</h3><pre><code>**栈区：**\n\n    由编译器自动分配释放, 存放函数的参数值,局部变量等\n\n    注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放\n</code></pre>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> * <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> *p = <span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<pre><code>**堆区：**\n\n    由程序员分配释放,若程序员不释放,程序结束时由操作系统回收\n\n    在C++中主要利用new在堆区开辟内存\n</code></pre>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>* <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* a = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> *p = <span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>总结：</strong></p>\n<p>堆区数据由程序员管理开辟和释放</p>\n<p>堆区数据利用new关键字进行开辟内存</p>\n<h3 id=\"1-3-new操作符\"><a href=\"#1-3-new操作符\" class=\"headerlink\" title=\"1.3 new操作符\"></a>1.3 new操作符</h3><pre><code>C++中利用==new==操作符在堆区开辟数据\n\n堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==\n\n语法：` new 数据类型`\n\n利用new创建的数据，会返回该数据对应的类型的指针\n</code></pre>\n<p><strong>示例1： 基本语法</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>* <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* a = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> *p = <span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//利用delete释放堆区数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>示例2：开辟数组</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//堆区开辟数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span>* arr = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tarr[i] = i + <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//释放数组 delete 后加 []</span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] arr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"2-引用\"><a href=\"#2-引用\" class=\"headerlink\" title=\"2 引用\"></a>2 引用</h2><h3 id=\"2-1-引用的基本使用\"><a href=\"#2-1-引用的基本使用\" class=\"headerlink\" title=\"2.1 引用的基本使用\"></a>2.1 引用的基本使用</h3><p>**作用： **给变量起别名</p>\n<p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> &amp;b = a;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tb = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"2-2-引用注意事项\"><a href=\"#2-2-引用注意事项\" class=\"headerlink\" title=\"2.2 引用注意事项\"></a>2.2 引用注意事项</h3><ul>\n<li>引用必须初始化</li>\n<li>引用在初始化后，不可以改变</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//int &amp;c; //错误，引用必须初始化</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> &amp;c = a; <span class=\"comment\">//一旦初始化后，就不可以更改</span></span><br><span class=\"line\">\tc = b; <span class=\"comment\">//这是赋值操作，不是更改引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"2-3-引用做函数参数\"><a href=\"#2-3-引用做函数参数\" class=\"headerlink\" title=\"2.3 引用做函数参数\"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p>\n<p><strong>优点：</strong>可以简化指针修改实参</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 值传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mySwap01</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 地址传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mySwap02</span><span class=\"params\">(<span class=\"type\">int</span>* a, <span class=\"type\">int</span>* b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = *a;</span><br><span class=\"line\">\t*a = *b;</span><br><span class=\"line\">\t*b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. 引用传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mySwap03</span><span class=\"params\">(<span class=\"type\">int</span>&amp; a, <span class=\"type\">int</span>&amp; b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">mySwap01</span>(a, b);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">mySwap02</span>(&amp;a, &amp;b);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">mySwap03</span>(a, b);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>\n</blockquote>\n<h3 id=\"2-4-引用做函数返回值\"><a href=\"#2-4-引用做函数返回值\" class=\"headerlink\" title=\"2.4 引用做函数返回值\"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p>\n<p>注意：<strong>不要返回局部变量引用</strong></p>\n<p>用法：函数调用作为左值</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回局部变量引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>&amp; <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>; <span class=\"comment\">//局部变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回静态变量引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>&amp; <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//不能返回局部变量的引用</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>&amp; ref = <span class=\"built_in\">test01</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//如果函数做左值，那么必须返回引用</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>&amp; ref2 = <span class=\"built_in\">test02</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test02</span>() = <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>​\t</p>\n<h3 id=\"2-5-引用的本质\"><a href=\"#2-5-引用的本质\" class=\"headerlink\" title=\"2.5 引用的本质\"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p>\n<p>讲解示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发现是引用，转换为 int* const ref = &amp;a;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span>&amp; ref)</span></span>&#123;</span><br><span class=\"line\">\tref = <span class=\"number\">100</span>; <span class=\"comment\">// ref是引用，转换为*ref = 100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>&amp; ref = a; </span><br><span class=\"line\">\tref = <span class=\"number\">20</span>; <span class=\"comment\">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref:&quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">func</span>(a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>\n<h3 id=\"2-6-常量引用\"><a href=\"#2-6-常量引用\" class=\"headerlink\" title=\"2.6 常量引用\"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p>\n<p>在函数形参列表中，可以加&#x3D;&#x3D;const修饰形参&#x3D;&#x3D;，防止形参改变实参</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引用使用的场景，通常用来修饰形参</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showValue</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span>&amp; v)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//v += 10;</span></span><br><span class=\"line\">\tcout &lt;&lt; v &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span></span><br><span class=\"line\">\t<span class=\"comment\">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span>&amp; ref = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//ref = 100;  //加入const后不可以修改变量</span></span><br><span class=\"line\">\tcout &lt;&lt; ref &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//函数中利用常量引用防止误操作修改实参</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">showValue</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h2 id=\"3-函数提高\"><a href=\"#3-函数提高\" class=\"headerlink\" title=\"3 函数提高\"></a>3 函数提高</h2><h3 id=\"3-1-函数默认参数\"><a href=\"#3-1-函数默认参数\" class=\"headerlink\" title=\"3.1 函数默认参数\"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p>\n<p>语法：<code> 返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b = <span class=\"number\">10</span>, <span class=\"type\">int</span> c = <span class=\"number\">10</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span></span><br><span class=\"line\"><span class=\"comment\">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">10</span>, <span class=\"type\">int</span> b = <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ret = &quot;</span> &lt;&lt; <span class=\"built_in\">func</span>(<span class=\"number\">20</span>, <span class=\"number\">20</span>) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ret = &quot;</span> &lt;&lt; <span class=\"built_in\">func</span>(<span class=\"number\">100</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"3-2-函数占位参数\"><a href=\"#3-2-函数占位参数\" class=\"headerlink\" title=\"3.2 函数占位参数\"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>\n<p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p>\n<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数占位参数 ，占位参数也可以有默认参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span>)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;this is func&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">func</span>(<span class=\"number\">10</span>,<span class=\"number\">10</span>); <span class=\"comment\">//占位参数必须填补</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"3-3-函数重载\"><a href=\"#3-3-函数重载\" class=\"headerlink\" title=\"3.3 函数重载\"></a>3.3 函数重载</h3><h4 id=\"3-3-1-函数重载概述\"><a href=\"#3-3-1-函数重载概述\" class=\"headerlink\" title=\"3.3.1 函数重载概述\"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p>\n<p><strong>函数重载满足条件：</strong></p>\n<ul>\n<li>同一个作用域下</li>\n<li>函数名称相同</li>\n<li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li>\n</ul>\n<p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数重载需要函数都在同一个作用域下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;func 的调用！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;func (int a) 的调用！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">double</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;func (double a)的调用！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a ,<span class=\"type\">double</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;func (int a ,double b) 的调用！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">double</span> a ,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;func (double a ,int b)的调用！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数返回值不可以作为函数重载条件</span></span><br><span class=\"line\"><span class=\"comment\">//int func(double a, int b)</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tcout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">func</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">func</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">func</span>(<span class=\"number\">3.14</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">func</span>(<span class=\"number\">10</span>,<span class=\"number\">3.14</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">func</span>(<span class=\"number\">3.14</span> , <span class=\"number\">10</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"3-3-2-函数重载注意事项\"><a href=\"#3-3-2-函数重载注意事项\" class=\"headerlink\" title=\"3.3.2 函数重载注意事项\"></a>3.3.2 函数重载注意事项</h4><ul>\n<li>引用作为重载条件</li>\n<li>函数重载碰到函数默认参数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数重载注意事项</span></span><br><span class=\"line\"><span class=\"comment\">//1、引用作为重载条件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;func (int &amp;a) 调用 &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;func (const int &amp;a) 调用 &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、函数重载碰到函数默认参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b = <span class=\"number\">10</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;func2(int a, int b = 10) 调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;func2(int a) 调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">func</span>(a); <span class=\"comment\">//调用无const</span></span><br><span class=\"line\">\t<span class=\"built_in\">func</span>(<span class=\"number\">10</span>);<span class=\"comment\">//调用有const</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//func2(10); //碰到默认参数产生歧义，需要避免</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"4-类和对象\"><a href=\"#4-类和对象\" class=\"headerlink\" title=\"4 类和对象\"></a><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：&#x3D;&#x3D;封装、继承、多态&#x3D;&#x3D;</p>\n<p>C++认为&#x3D;&#x3D;万事万物都皆为对象&#x3D;&#x3D;，对象上有其属性和行为</p>\n<p><strong>例如：</strong></p>\n<pre><code>人可以作为对象，属性有姓名、年龄、身高、体重...，行为有走、跑、跳、吃饭、唱歌...\n\n车也可以作为对象，属性有轮胎、方向盘、车灯...,行为有载人、放音乐、放空调...\n\n具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类\n</code></pre>\n<h3 id=\"4-1-封装\"><a href=\"#4-1-封装\" class=\"headerlink\" title=\"4.1 封装\"></a>4.1 封装</h3><h4 id=\"4-1-1-封装的意义\"><a href=\"#4-1-1-封装的意义\" class=\"headerlink\" title=\"4.1.1  封装的意义\"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p>\n<p>封装的意义：</p>\n<ul>\n<li>将属性和行为作为一个整体，表现生活中的事物</li>\n<li>将属性和行为加以权限控制</li>\n</ul>\n<p><strong>封装意义一：</strong></p>\n<pre><code>在设计类的时候，属性和行为写在一起，表现事物\n</code></pre>\n<p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p>\n<p><strong>示例1：</strong>设计一个圆类，求圆的周长</p>\n<p><strong>示例代码：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//圆周率</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> PI = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1、封装的意义</span></span><br><span class=\"line\"><span class=\"comment\">//将属性和行为作为一个整体，用来表现生活中的事物</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//封装一个圆类，求圆的周长</span></span><br><span class=\"line\"><span class=\"comment\">//class代表设计一个类，后面跟着的是类名</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:  <span class=\"comment\">//访问权限  公共的权限</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//属性</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> m_r;<span class=\"comment\">//半径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//行为</span></span><br><span class=\"line\">\t<span class=\"comment\">//获取到圆的周长</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">calculateZC</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//2 * pi  * r</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//获取圆的周长</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>  <span class=\"number\">2</span> * PI * m_r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//通过圆类，创建圆的对象</span></span><br><span class=\"line\">\t<span class=\"comment\">// c1就是一个具体的圆</span></span><br><span class=\"line\">\tCircle c1;</span><br><span class=\"line\">\tc1.m_r = <span class=\"number\">10</span>; <span class=\"comment\">//给圆对象的半径 进行赋值操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2 * pi * 10 = = 62.8</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;圆的周长为： &quot;</span> &lt;&lt; c1.<span class=\"built_in\">calculateZC</span>() &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p>\n<p><strong>示例2代码：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setName</span><span class=\"params\">(string name)</span> </span>&#123;</span><br><span class=\"line\">\t\tm_name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setID</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\tm_id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showStudent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;name:&quot;</span> &lt;&lt; m_name &lt;&lt; <span class=\"string\">&quot; ID:&quot;</span> &lt;&lt; m_id &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring m_name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_id;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tStudent stu;</span><br><span class=\"line\">\tstu.<span class=\"built_in\">setName</span>(<span class=\"string\">&quot;德玛西亚&quot;</span>);</span><br><span class=\"line\">\tstu.<span class=\"built_in\">setID</span>(<span class=\"number\">250</span>);</span><br><span class=\"line\">\tstu.<span class=\"built_in\">showStudent</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>封装意义二：</strong></p>\n<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>\n<p>访问权限有三种：</p>\n<ol>\n<li>public        公共权限  </li>\n<li>protected 保护权限</li>\n<li>private      私有权限</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//三种权限</span></span><br><span class=\"line\"><span class=\"comment\">//公共权限  public     类内可以访问  类外可以访问</span></span><br><span class=\"line\"><span class=\"comment\">//保护权限  protected  类内可以访问  类外不可以访问</span></span><br><span class=\"line\"><span class=\"comment\">//私有权限  private    类内可以访问  类外不可以访问</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//姓名  公共权限</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring m_Name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//汽车  保护权限</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\tstring m_Car;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//银行卡密码  私有权限</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Password;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_Name = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">\t\tm_Car = <span class=\"string\">&quot;拖拉机&quot;</span>;</span><br><span class=\"line\">\t\tm_Password = <span class=\"number\">123456</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p;</span><br><span class=\"line\">\tp.m_Name = <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span></span><br><span class=\"line\">\t<span class=\"comment\">//p.m_Password = 123; //私有权限类外访问不到</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h4 id=\"4-1-2-struct和class区别\"><a href=\"#4-1-2-struct和class区别\" class=\"headerlink\" title=\"4.1.2 struct和class区别\"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>\n<p>区别：</p>\n<ul>\n<li>struct 默认权限为公共</li>\n<li>class   默认权限为私有</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span>  m_A; <span class=\"comment\">//默认是私有权限</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">C2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;  <span class=\"comment\">//默认是公共权限</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tC1 c1;</span><br><span class=\"line\">\tc1.m_A = <span class=\"number\">10</span>; <span class=\"comment\">//错误，访问权限是私有</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tC2 c2;</span><br><span class=\"line\">\tc2.m_A = <span class=\"number\">10</span>; <span class=\"comment\">//正确，访问权限是公共</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-1-3-成员属性设置为私有\"><a href=\"#4-1-3-成员属性设置为私有\" class=\"headerlink\" title=\"4.1.3 成员属性设置为私有\"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p>\n<p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//姓名设置可读可写</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setName</span><span class=\"params\">(string name)</span> </span>&#123;</span><br><span class=\"line\">\t\tm_Name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\">string <span class=\"title\">getName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_Name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取年龄 </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_Age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//设置年龄</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (age &lt; <span class=\"number\">0</span> || age &gt; <span class=\"number\">150</span>) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;你个老妖精!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tm_Age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//情人设置为只写</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setLover</span><span class=\"params\">(string lover)</span> </span>&#123;</span><br><span class=\"line\">\t\tm_Lover = lover;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstring m_Name; <span class=\"comment\">//可读可写  姓名</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Age; <span class=\"comment\">//只读  年龄</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstring m_Lover; <span class=\"comment\">//只写  情人</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p;</span><br><span class=\"line\">\t<span class=\"comment\">//姓名设置</span></span><br><span class=\"line\">\tp.<span class=\"built_in\">setName</span>(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名： &quot;</span> &lt;&lt; p.<span class=\"built_in\">getName</span>() &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//年龄设置</span></span><br><span class=\"line\">\tp.<span class=\"built_in\">setAge</span>(<span class=\"number\">50</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;年龄： &quot;</span> &lt;&lt; p.<span class=\"built_in\">getAge</span>() &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//情人设置</span></span><br><span class=\"line\">\tp.<span class=\"built_in\">setLover</span>(<span class=\"string\">&quot;苍井&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>练习案例1：设计立方体类</strong></p>\n<p>设计立方体类(Cube)</p>\n<p>求出立方体的面积和体积</p>\n<p>分别用全局函数和成员函数判断两个立方体是否相等。</p>\n<p><img src=\"/assets/1545533548532.png\" alt=\"1545533548532\"></p>\n<p><strong>练习案例2：点和圆的关系</strong></p>\n<p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p>\n<p><img src=\"/assets/1545533829184.png\" alt=\"1545533829184\"></p>\n<h3 id=\"4-2-对象的初始化和清理\"><a href=\"#4-2-对象的初始化和清理\" class=\"headerlink\" title=\"4.2 对象的初始化和清理\"></a>4.2 对象的初始化和清理</h3><ul>\n<li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li>\n<li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li>\n</ul>\n<h4 id=\"4-2-1-构造函数和析构函数\"><a href=\"#4-2-1-构造函数和析构函数\" class=\"headerlink\" title=\"4.2.1 构造函数和析构函数\"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p>\n<pre><code>一个对象或者变量没有初始状态，对其使用后果是未知\n\n同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题\n</code></pre>\n<p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>\n<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p>\n<p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p>\n<ul>\n<li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li>\n<li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li>\n</ul>\n<p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p>\n<ol>\n<li>构造函数，没有返回值也不写void</li>\n<li>函数名称与类名相同</li>\n<li>构造函数可以有参数，因此可以发生重载</li>\n<li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li>\n</ol>\n<p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p>\n<ol>\n<li>析构函数，没有返回值也不写void</li>\n<li>函数名称与类名相同,在名称前加上符号  ~</li>\n<li>析构函数不可以有参数，因此不可以发生重载</li>\n<li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Person的构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Person的析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-2-2-构造函数的分类及调用\"><a href=\"#4-2-2-构造函数的分类及调用\" class=\"headerlink\" title=\"4.2.2 构造函数的分类及调用\"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p>\n<pre><code>按参数分为： 有参构造和无参构造\n\n按类型分为： 普通构造和拷贝构造\n</code></pre>\n<p>三种调用方式：</p>\n<pre><code>括号法\n\n显示法\n\n隐式转换法\n</code></pre>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、构造函数分类</span></span><br><span class=\"line\"><span class=\"comment\">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// 按照类型分类分为 普通构造和拷贝构造</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//无参（默认）构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a) &#123;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\tage = p.age;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、构造函数的调用</span></span><br><span class=\"line\"><span class=\"comment\">//调用无参构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tPerson p; <span class=\"comment\">//调用无参构造函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用有参的构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.1  括号法，常用</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span></span><br><span class=\"line\">\t<span class=\"comment\">//Person p2();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.2 显式法</span></span><br><span class=\"line\">\tPerson p2 = <span class=\"built_in\">Person</span>(<span class=\"number\">10</span>); </span><br><span class=\"line\">\tPerson p3 = <span class=\"built_in\">Person</span>(p2);</span><br><span class=\"line\">\t<span class=\"comment\">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.3 隐式转换法</span></span><br><span class=\"line\">\tPerson p4 = <span class=\"number\">10</span>; <span class=\"comment\">// Person p4 = Person(10); </span></span><br><span class=\"line\">\tPerson p5 = p4; <span class=\"comment\">// Person p5 = Person(p4); </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span></span><br><span class=\"line\">\t<span class=\"comment\">//Person p5(p4);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//test02();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-2-3-拷贝构造函数调用时机\"><a href=\"#4-2-3-拷贝构造函数调用时机\" class=\"headerlink\" title=\"4.2.3 拷贝构造函数调用时机\"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p>\n<ul>\n<li>使用一个已经创建完毕的对象来初始化一个新对象</li>\n<li>值传递的方式给函数参数传值</li>\n<li>以值方式返回局部对象</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\tmAge = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\tmAge = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\tmAge = p.mAge;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//析构函数在释放内存之前调用</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> mAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">man</span><span class=\"params\">(<span class=\"number\">100</span>)</span></span>; <span class=\"comment\">//p对象已经创建完毕</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">newman</span><span class=\"params\">(man)</span></span>; <span class=\"comment\">//调用拷贝构造函数</span></span><br><span class=\"line\">\tPerson newman2 = man; <span class=\"comment\">//拷贝构造</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Person newman3;</span></span><br><span class=\"line\">\t<span class=\"comment\">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 值传递的方式给函数参数传值</span></span><br><span class=\"line\"><span class=\"comment\">//相当于Person p1 = p;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">doWork</span><span class=\"params\">(Person p1)</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tPerson p; <span class=\"comment\">//无参构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">doWork</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. 以值方式返回局部对象</span></span><br><span class=\"line\"><span class=\"function\">Person <span class=\"title\">doWork2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson p1;</span><br><span class=\"line\">\tcout &lt;&lt; (<span class=\"type\">int</span> *)&amp;p1 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test03</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson p = <span class=\"built_in\">doWork2</span>();</span><br><span class=\"line\">\tcout &lt;&lt; (<span class=\"type\">int</span> *)&amp;p &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\">\t<span class=\"comment\">//test02();</span></span><br><span class=\"line\">\t<span class=\"built_in\">test03</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-2-4-构造函数调用规则\"><a href=\"#4-2-4-构造函数调用规则\" class=\"headerlink\" title=\"4.2.4 构造函数调用规则\"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p>\n<p>1．默认构造函数(无参，函数体为空)</p>\n<p>2．默认析构函数(无参，函数体为空)</p>\n<p>3．默认拷贝构造函数，对属性进行值拷贝</p>\n<p>构造函数调用规则如下：</p>\n<ul>\n<li><p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p>\n</li>\n<li><p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p>\n</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//无参（默认）构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a) &#123;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\tage = p.age;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(p1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2的年龄为： &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span></span><br><span class=\"line\">\tPerson p1; <span class=\"comment\">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>; <span class=\"comment\">//用户提供的有参</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(p2)</span></span>; <span class=\"comment\">//此时如果用户没有提供拷贝构造，编译器会提供</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span></span><br><span class=\"line\">\tPerson p4; <span class=\"comment\">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p5</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>; <span class=\"comment\">//此时如果用户自己没有提供有参，会出错</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p6</span><span class=\"params\">(p5)</span></span>; <span class=\"comment\">//用户自己提供拷贝构造</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-2-5-深拷贝与浅拷贝\"><a href=\"#4-2-5-深拷贝与浅拷贝\" class=\"headerlink\" title=\"4.2.5 深拷贝与浅拷贝\"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p>\n<p>浅拷贝：简单的赋值拷贝操作</p>\n<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//无参（默认）构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age ,<span class=\"type\">int</span> height) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tm_age = age;</span><br><span class=\"line\">\t\tm_height = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(height);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//拷贝构造函数  </span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span></span><br><span class=\"line\">\t\tm_age = p.m_age;</span><br><span class=\"line\">\t\tm_height = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(*p.m_height);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_height != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_height;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_age;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* m_height;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">18</span>, <span class=\"number\">180</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(p1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1的年龄： &quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class=\"string\">&quot; 身高： &quot;</span> &lt;&lt; *p1.m_height &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2的年龄： &quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class=\"string\">&quot; 身高： &quot;</span> &lt;&lt; *p2.m_height &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>\n</blockquote>\n<h4 id=\"4-2-6-初始化列表\"><a href=\"#4-2-6-初始化列表\" class=\"headerlink\" title=\"4.2.6 初始化列表\"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p>\n<p>C++提供了初始化列表语法，用来初始化属性</p>\n<p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">////传统方式初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">//Person(int a, int b, int c) &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tm_A = a;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tm_B = b;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tm_C = c;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//初始化列表方式初始化</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c) :<span class=\"built_in\">m_A</span>(a), <span class=\"built_in\">m_B</span>(b), <span class=\"built_in\">m_C</span>(c) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintPerson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;mA:&quot;</span> &lt;&lt; m_A &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;mB:&quot;</span> &lt;&lt; m_B &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;mC:&quot;</span> &lt;&lt; m_C &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">\tp.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-2-7-类对象作为类成员\"><a href=\"#4-2-7-类对象作为类成员\" class=\"headerlink\" title=\"4.2.7 类对象作为类成员\"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>\n<p>例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    A a；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>B类中有对象A作为成员，A为对象成员</p>\n<p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Phone</span>(string name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_PhoneName = name;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Phone构造&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">Phone</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Phone析构&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstring m_PhoneName;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//初始化列表可以告诉编译器调用哪一个构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(string name, string pName) :<span class=\"built_in\">m_Name</span>(name), <span class=\"built_in\">m_Phone</span>(pName)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Person构造&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Person析构&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">playGame</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; m_Name &lt;&lt; <span class=\"string\">&quot; 使用&quot;</span> &lt;&lt; m_Phone.m_PhoneName &lt;&lt; <span class=\"string\">&quot; 牌手机! &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstring m_Name;</span><br><span class=\"line\">\tPhone m_Phone;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//当类中成员是其他类对象时，我们称该成员为 对象成员</span></span><br><span class=\"line\">\t<span class=\"comment\">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span></span><br><span class=\"line\">\t<span class=\"comment\">//析构顺序与构造相反</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p</span><span class=\"params\">(<span class=\"string\">&quot;张三&quot;</span> , <span class=\"string\">&quot;苹果X&quot;</span>)</span></span>;</span><br><span class=\"line\">\tp.<span class=\"built_in\">playGame</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-2-8-静态成员\"><a href=\"#4-2-8-静态成员\" class=\"headerlink\" title=\"4.2.8 静态成员\"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>\n<p>静态成员分为：</p>\n<ul>\n<li>静态成员变量<ul>\n<li>所有对象共享同一份数据</li>\n<li>在编译阶段分配内存</li>\n<li>类内声明，类外初始化</li>\n</ul>\n</li>\n<li>静态成员函数<ul>\n<li>所有对象共享同一个函数</li>\n<li>静态成员函数只能访问静态成员变量</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例1 ：</strong>静态成员变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_A; <span class=\"comment\">//静态成员变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量特点：</span></span><br><span class=\"line\">\t<span class=\"comment\">//1 在编译阶段分配内存</span></span><br><span class=\"line\">\t<span class=\"comment\">//2 类内声明，类外初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">//3 所有对象共享同一份数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_B; <span class=\"comment\">//静态成员变量也是有访问权限的</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> Person::m_A = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> Person::m_B = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量两种访问方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、通过对象</span></span><br><span class=\"line\">\tPerson p1;</span><br><span class=\"line\">\tp1.m_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p2;</span><br><span class=\"line\">\tp2.m_A = <span class=\"number\">200</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl; <span class=\"comment\">//共享同一份数据</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2.m_A = &quot;</span> &lt;&lt; p2.m_A &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、通过类名</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>示例2：</strong>静态成员函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态成员函数特点：</span></span><br><span class=\"line\">\t<span class=\"comment\">//1 程序共享一个函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//2 静态成员函数只能访问静态成员变量</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//m_B = 100; //错误，不可以访问非静态成员变量</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_A; <span class=\"comment\">//静态成员变量</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B; <span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态成员函数也是有访问权限的</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;func2调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> Person::m_A = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量两种访问方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、通过对象</span></span><br><span class=\"line\">\tPerson p1;</span><br><span class=\"line\">\tp1.<span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、通过类名</span></span><br><span class=\"line\">\tPerson::<span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Person::func2(); //私有权限访问不到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"4-3-C-对象模型和this指针\"><a href=\"#4-3-C-对象模型和this指针\" class=\"headerlink\" title=\"4.3 C++对象模型和this指针\"></a>4.3 C++对象模型和this指针</h3><h4 id=\"4-3-1-成员变量和成员函数分开存储\"><a href=\"#4-3-1-成员变量和成员函数分开存储\" class=\"headerlink\" title=\"4.3.1 成员变量和成员函数分开存储\"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p>\n<p>只有非静态成员变量才属于类的对象上</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tmA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//非静态成员变量占对象空间</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> mA;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量不占对象空间</span></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> mB; </span><br><span class=\"line\">\t<span class=\"comment\">//函数也不占对象空间，所有函数共享一个函数实例</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;mA:&quot;</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;mA &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员函数也不占对象空间</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">sfunc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(Person) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h4 id=\"4-3-2-this指针概念\"><a href=\"#4-3-2-this指针概念\" class=\"headerlink\" title=\"4.3.2 this指针概念\"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p>\n<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>\n<p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p>\n<p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p>\n<p>this指针是隐含每一个非静态成员函数内的一种指针</p>\n<p>this指针不需要定义，直接使用即可</p>\n<p>this指针的用途：</p>\n<ul>\n<li>当形参和成员变量同名时，可用this指针来区分</li>\n<li>在类的非静态成员函数中返回对象本身，可使用return *this</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1、当形参和成员变量同名时，可用this指针来区分</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person&amp; <span class=\"title\">PersonAddPerson</span><span class=\"params\">(Person p)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age += p.age;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回对象本身</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\tp2.<span class=\"built_in\">PersonAddPerson</span>(p1).<span class=\"built_in\">PersonAddPerson</span>(p1).<span class=\"built_in\">PersonAddPerson</span>(p1);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-3-3-空指针访问成员函数\"><a href=\"#4-3-3-空指针访问成员函数\" class=\"headerlink\" title=\"4.3.3 空指针访问成员函数\"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p>\n<p>如果用到this指针，需要加以判断保证代码的健壮性</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//空指针访问成员函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowClassName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我是Person类!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowPerson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; mAge &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> mAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson * p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tp-&gt;<span class=\"built_in\">ShowClassName</span>(); <span class=\"comment\">//空指针，可以调用成员函数</span></span><br><span class=\"line\">\tp-&gt;<span class=\"built_in\">ShowPerson</span>();  <span class=\"comment\">//但是如果成员函数中用到了this指针，就不可以了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-3-4-const修饰成员函数\"><a href=\"#4-3-4-const修饰成员函数\" class=\"headerlink\" title=\"4.3.4 const修饰成员函数\"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p>\n<ul>\n<li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li>\n<li>常函数内不可以修改成员属性</li>\n<li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li>\n</ul>\n<p><strong>常对象：</strong></p>\n<ul>\n<li>声明对象前加const称该对象为常对象</li>\n<li>常对象只能调用常函数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tm_B = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//this指针的本质是一个指针常量，指针的指向不可修改</span></span><br><span class=\"line\">\t<span class=\"comment\">//如果想让指针指向的值也不可以修改，需要声明常函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowPerson</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//const Type* const pointer;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//this = NULL; //不能修改指针的指向 Person* const this;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_B = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyFunc</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//mA = 10000;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\">\t<span class=\"keyword\">mutable</span> <span class=\"type\">int</span> m_B; <span class=\"comment\">//可修改 可变的</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//const修饰对象  常对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">const</span> Person person; <span class=\"comment\">//常量对象  </span></span><br><span class=\"line\">\tcout &lt;&lt; person.m_A &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span></span><br><span class=\"line\">\tperson.m_B = <span class=\"number\">100</span>; <span class=\"comment\">//但是常对象可以修改mutable修饰成员变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//常对象访问成员函数</span></span><br><span class=\"line\">\tperson.<span class=\"built_in\">MyFunc</span>(); <span class=\"comment\">//常对象不能调用const的函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n<h3 id=\"4-4-友元\"><a href=\"#4-4-友元\" class=\"headerlink\" title=\"4.4 友元\"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p>\n<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>\n<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>\n<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>\n<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>\n<p>友元的关键字为  &#x3D;&#x3D;friend&#x3D;&#x3D;</p>\n<p>友元的三种实现</p>\n<ul>\n<li>全局函数做友元</li>\n<li>类做友元</li>\n<li>成员函数做友元</li>\n</ul>\n<h4 id=\"4-4-1-全局函数做友元\"><a href=\"#4-4-1-全局函数做友元\" class=\"headerlink\" title=\"4.4.1 全局函数做友元\"></a>4.4.1 全局函数做友元</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Building</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">goodGay</span><span class=\"params\">(Building * building)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Building</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_SittingRoom = <span class=\"string\">&quot;客厅&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_BedRoom = <span class=\"string\">&quot;卧室&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring m_SittingRoom; <span class=\"comment\">//客厅</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstring m_BedRoom; <span class=\"comment\">//卧室</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">goodGay</span><span class=\"params\">(Building * building)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tBuilding b;</span><br><span class=\"line\">\t<span class=\"built_in\">goodGay</span>(&amp;b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-4-2-类做友元\"><a href=\"#4-4-2-类做友元\" class=\"headerlink\" title=\"4.4.2 类做友元\"></a>4.4.2 类做友元</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Building</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">goodGay</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">goodGay</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tBuilding *building;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Building</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"keyword\">class</span> <span class=\"title class_\">goodGay</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Building</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring m_SittingRoom; <span class=\"comment\">//客厅</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstring m_BedRoom;<span class=\"comment\">//卧室</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Building::<span class=\"built_in\">Building</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_SittingRoom = <span class=\"string\">&quot;客厅&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_BedRoom = <span class=\"string\">&quot;卧室&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">goodGay::<span class=\"built_in\">goodGay</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tbuilding = <span class=\"keyword\">new</span> Building;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">goodGay::visit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tgoodGay gg;</span><br><span class=\"line\">\tgg.<span class=\"built_in\">visit</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-4-3-成员函数做友元\"><a href=\"#4-4-3-成员函数做友元\" class=\"headerlink\" title=\"4.4.3 成员函数做友元\"></a>4.4.3 成员函数做友元</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Building</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">goodGay</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">goodGay</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span>; <span class=\"comment\">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit2</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tBuilding *building;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Building</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">goodGay::visit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Building</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring m_SittingRoom; <span class=\"comment\">//客厅</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstring m_BedRoom;<span class=\"comment\">//卧室</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Building::<span class=\"built_in\">Building</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_SittingRoom = <span class=\"string\">&quot;客厅&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_BedRoom = <span class=\"string\">&quot;卧室&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">goodGay::<span class=\"built_in\">goodGay</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tbuilding = <span class=\"keyword\">new</span> Building;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">goodGay::visit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">goodGay::visit2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tgoodGay  gg;</span><br><span class=\"line\">\tgg.<span class=\"built_in\">visit</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"4-5-运算符重载\"><a href=\"#4-5-运算符重载\" class=\"headerlink\" title=\"4.5 运算符重载\"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p>\n<h4 id=\"4-5-1-加号运算符重载\"><a href=\"#4-5-1-加号运算符重载\" class=\"headerlink\" title=\"4.5.1 加号运算符重载\"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>() &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_A = a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_B = b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//成员函数实现 + 号运算符重载</span></span><br><span class=\"line\">\tPerson <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\tPerson temp;</span><br><span class=\"line\">\t\ttemp.m_A = <span class=\"keyword\">this</span>-&gt;m_A + p.m_A;</span><br><span class=\"line\">\t\ttemp.m_B = <span class=\"keyword\">this</span>-&gt;m_B + p.m_B;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局函数实现 + 号运算符重载</span></span><br><span class=\"line\"><span class=\"comment\">//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tPerson temp(0, 0);</span></span><br><span class=\"line\"><span class=\"comment\">//\ttemp.m_A = p1.m_A + p2.m_A;</span></span><br><span class=\"line\"><span class=\"comment\">//\ttemp.m_B = p1.m_B + p2.m_B;</span></span><br><span class=\"line\"><span class=\"comment\">//\treturn temp;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运算符重载 可以发生函数重载 </span></span><br><span class=\"line\">Person <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Person&amp; p2, <span class=\"type\">int</span> val)  </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tPerson temp;</span><br><span class=\"line\">\ttemp.m_A = p2.m_A + val;</span><br><span class=\"line\">\ttemp.m_B = p2.m_B + val;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">20</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//成员函数方式</span></span><br><span class=\"line\">\tPerson p3 = p2 + p1;  <span class=\"comment\">//相当于 p2.operaor+(p1)</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;mA:&quot;</span> &lt;&lt; p3.m_A &lt;&lt; <span class=\"string\">&quot; mB:&quot;</span> &lt;&lt; p3.m_B &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p4 = p3 + <span class=\"number\">10</span>; <span class=\"comment\">//相当于 operator+(p3,10)</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;mA:&quot;</span> &lt;&lt; p4.m_A &lt;&lt; <span class=\"string\">&quot; mB:&quot;</span> &lt;&lt; p4.m_B &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p>\n</blockquote>\n<blockquote>\n<p>总结2：不要滥用运算符重载</p>\n</blockquote>\n<h4 id=\"4-5-2-左移运算符重载\"><a href=\"#4-5-2-左移运算符重载\" class=\"headerlink\" title=\"4.5.2 左移运算符重载\"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_A = a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_B = b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span></span><br><span class=\"line\">\t<span class=\"comment\">//void operator&lt;&lt;(Person&amp; p)&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局函数实现左移重载</span></span><br><span class=\"line\"><span class=\"comment\">//ostream对象只能有一个</span></span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;</span><br><span class=\"line\">\tout &lt;&lt; <span class=\"string\">&quot;a:&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class=\"string\">&quot; b:&quot;</span> &lt;&lt; p.m_B;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; p1 &lt;&lt; <span class=\"string\">&quot;hello world&quot;</span> &lt;&lt; endl; <span class=\"comment\">//链式编程</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p>\n</blockquote>\n<h4 id=\"4-5-3-递增运算符重载\"><a href=\"#4-5-3-递增运算符重载\" class=\"headerlink\" title=\"4.5.3 递增运算符重载\"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyInteger</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">MyInteger</span>() &#123;</span><br><span class=\"line\">\t\tm_Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//前置++</span></span><br><span class=\"line\">\tMyInteger&amp; <span class=\"keyword\">operator</span>++() &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先++</span></span><br><span class=\"line\">\t\tm_Num++;</span><br><span class=\"line\">\t\t<span class=\"comment\">//再返回</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//后置++</span></span><br><span class=\"line\">\tMyInteger <span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先返回</span></span><br><span class=\"line\">\t\tMyInteger temp = *<span class=\"keyword\">this</span>; <span class=\"comment\">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span></span><br><span class=\"line\">\t\tm_Num++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Num;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;</span><br><span class=\"line\">\tout &lt;&lt; myint.m_Num;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//前置++ 先++ 再返回</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tMyInteger myInt;</span><br><span class=\"line\">\tcout &lt;&lt; ++myInt &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//后置++ 先返回 再++</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMyInteger myInt;</span><br><span class=\"line\">\tcout &lt;&lt; myInt++ &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//test02();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结： 前置递增返回引用，后置递增返回值</p>\n</blockquote>\n<h4 id=\"4-5-4-赋值运算符重载\"><a href=\"#4-5-4-赋值运算符重载\" class=\"headerlink\" title=\"4.5.4 赋值运算符重载\"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p>\n<ol>\n<li>默认构造函数(无参，函数体为空)</li>\n<li>默认析构函数(无参，函数体为空)</li>\n<li>默认拷贝构造函数，对属性进行值拷贝</li>\n<li>赋值运算符 operator&#x3D;, 对属性进行值拷贝</li>\n</ol>\n<p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将年龄数据开辟到堆区</span></span><br><span class=\"line\">\t\tm_Age = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//重载赋值运算符 </span></span><br><span class=\"line\">\tPerson&amp; <span class=\"keyword\">operator</span>=(Person &amp;p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_Age != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_Age;</span><br><span class=\"line\">\t\t\tm_Age = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//编译器提供的代码是浅拷贝</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_Age = p.m_Age;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//提供深拷贝 解决浅拷贝的问题</span></span><br><span class=\"line\">\t\tm_Age = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(*p.m_Age);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//返回自身</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_Age != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_Age;</span><br><span class=\"line\">\t\t\tm_Age = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//年龄的指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> *m_Age;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tp3 = p2 = p1; <span class=\"comment\">//赋值操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1的年龄为：&quot;</span> &lt;&lt; *p1.m_Age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2的年龄为：&quot;</span> &lt;&lt; *p2.m_Age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p3的年龄为：&quot;</span> &lt;&lt; *p3.m_Age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//int a = 10;</span></span><br><span class=\"line\">\t<span class=\"comment\">//int b = 20;</span></span><br><span class=\"line\">\t<span class=\"comment\">//int c = 30;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//c = b = a;</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-5-5-关系运算符重载\"><a href=\"#4-5-5-关系运算符重载\" class=\"headerlink\" title=\"4.5.5 关系运算符重载\"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(string name, <span class=\"type\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Age = age;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(Person &amp; p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class=\"keyword\">this</span>-&gt;m_Age == p.m_Age)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(Person &amp; p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class=\"keyword\">this</span>-&gt;m_Age == p.m_Age)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstring m_Name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//int a = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//int b = 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">a</span><span class=\"params\">(<span class=\"string\">&quot;孙悟空&quot;</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">b</span><span class=\"params\">(<span class=\"string\">&quot;孙悟空&quot;</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a == b)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;a和b相等&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;a和b不相等&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a != b)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;a和b不相等&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;a和b相等&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-5-6-函数调用运算符重载\"><a href=\"#4-5-6-函数调用运算符重载\" class=\"headerlink\" title=\"4.5.6 函数调用运算符重载\"></a>4.5.6 函数调用运算符重载</h4><ul>\n<li>函数调用运算符 ()  也可以重载</li>\n<li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li>\n<li>仿函数没有固定写法，非常灵活</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPrint</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(string text)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; text &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//重载的（）操作符 也称为仿函数</span></span><br><span class=\"line\">\tMyPrint myFunc;</span><br><span class=\"line\">\t<span class=\"built_in\">myFunc</span>(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyAdd</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> v1, <span class=\"type\">int</span> v2)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v1 + v2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tMyAdd add;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret = <span class=\"built_in\">add</span>(<span class=\"number\">10</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ret = &quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//匿名对象调用  </span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;MyAdd()(100,100) = &quot;</span> &lt;&lt; <span class=\"built_in\">MyAdd</span>()(<span class=\"number\">100</span>, <span class=\"number\">100</span>) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">test02</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"4-6-继承\"><a href=\"#4-6-继承\" class=\"headerlink\" title=\"4.6  继承\"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p>\n<p>有些类与类之间存在特殊的关系，例如下图中：</p>\n<p><img src=\"/assets/1544861202252.png\" alt=\"1544861202252\"></p>\n<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>\n<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>\n<h4 id=\"4-6-1-继承的基本语法\"><a href=\"#4-6-1-继承的基本语法\" class=\"headerlink\" title=\"4.6.1 继承的基本语法\"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p>\n<p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p>\n<p><strong>普通实现：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java页面</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Java</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">header</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">footer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">left</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">content</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;JAVA学科视频&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//Python页面</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Python</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">header</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">footer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">left</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">content</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Python学科视频&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//C++页面</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CPP</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">header</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">footer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">left</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">content</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;C++学科视频&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Java页面</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tJava ja;</span><br><span class=\"line\">\tja.<span class=\"built_in\">header</span>();</span><br><span class=\"line\">\tja.<span class=\"built_in\">footer</span>();</span><br><span class=\"line\">\tja.<span class=\"built_in\">left</span>();</span><br><span class=\"line\">\tja.<span class=\"built_in\">content</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Python页面</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tPython py;</span><br><span class=\"line\">\tpy.<span class=\"built_in\">header</span>();</span><br><span class=\"line\">\tpy.<span class=\"built_in\">footer</span>();</span><br><span class=\"line\">\tpy.<span class=\"built_in\">left</span>();</span><br><span class=\"line\">\tpy.<span class=\"built_in\">content</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//C++页面</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tCPP cp;</span><br><span class=\"line\">\tcp.<span class=\"built_in\">header</span>();</span><br><span class=\"line\">\tcp.<span class=\"built_in\">footer</span>();</span><br><span class=\"line\">\tcp.<span class=\"built_in\">left</span>();</span><br><span class=\"line\">\tcp.<span class=\"built_in\">content</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>继承实现：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//公共页面</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BasePage</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">header</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">footer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">left</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Java页面</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Java</span> : <span class=\"keyword\">public</span> BasePage</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">content</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;JAVA学科视频&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//Python页面</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Python</span> : <span class=\"keyword\">public</span> BasePage</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">content</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Python学科视频&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//C++页面</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CPP</span> : <span class=\"keyword\">public</span> BasePage</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">content</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;C++学科视频&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Java页面</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tJava ja;</span><br><span class=\"line\">\tja.<span class=\"built_in\">header</span>();</span><br><span class=\"line\">\tja.<span class=\"built_in\">footer</span>();</span><br><span class=\"line\">\tja.<span class=\"built_in\">left</span>();</span><br><span class=\"line\">\tja.<span class=\"built_in\">content</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Python页面</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tPython py;</span><br><span class=\"line\">\tpy.<span class=\"built_in\">header</span>();</span><br><span class=\"line\">\tpy.<span class=\"built_in\">footer</span>();</span><br><span class=\"line\">\tpy.<span class=\"built_in\">left</span>();</span><br><span class=\"line\">\tpy.<span class=\"built_in\">content</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//C++页面</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tCPP cp;</span><br><span class=\"line\">\tcp.<span class=\"built_in\">header</span>();</span><br><span class=\"line\">\tcp.<span class=\"built_in\">footer</span>();</span><br><span class=\"line\">\tcp.<span class=\"built_in\">left</span>();</span><br><span class=\"line\">\tcp.<span class=\"built_in\">content</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>总结：</strong></p>\n<p>继承的好处：&#x3D;&#x3D;可以减少重复的代码&#x3D;&#x3D;</p>\n<p>class A : public B; </p>\n<p>A 类称为子类 或 派生类</p>\n<p>B 类称为父类 或 基类</p>\n<p><strong>派生类中的成员，包含两大部分</strong>：</p>\n<p>一类是从基类继承过来的，一类是自己增加的成员。</p>\n<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>\n<h4 id=\"4-6-2-继承方式\"><a href=\"#4-6-2-继承方式\" class=\"headerlink\" title=\"4.6.2 继承方式\"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p>\n<p><strong>继承方式一共有三种：</strong></p>\n<ul>\n<li>公共继承</li>\n<li>保护继承</li>\n<li>私有继承</li>\n</ul>\n<p><img src=\"/assets/clip_image002.png\" alt=\"img\"></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>: </span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//公共继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son1</span> :<span class=\"keyword\">public</span> Base1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_A; <span class=\"comment\">//可访问 public权限</span></span><br><span class=\"line\">\t\tm_B; <span class=\"comment\">//可访问 protected权限</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_C; //不可访问</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">myClass</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSon1 s1;</span><br><span class=\"line\">\ts1.m_A; <span class=\"comment\">//其他类只能访问到公共权限</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//保护继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son2</span>:<span class=\"keyword\">protected</span> Base2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_A; <span class=\"comment\">//可访问 protected权限</span></span><br><span class=\"line\">\t\tm_B; <span class=\"comment\">//可访问 protected权限</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_C; //不可访问</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">myClass2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSon2 s;</span><br><span class=\"line\">\t<span class=\"comment\">//s.m_A; //不可访问</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//私有继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base3</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son3</span>:<span class=\"keyword\">private</span> Base3</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_A; <span class=\"comment\">//可访问 private权限</span></span><br><span class=\"line\">\t\tm_B; <span class=\"comment\">//可访问 private权限</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_C; //不可访问</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GrandSon3</span> :<span class=\"keyword\">public</span> Son3</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_A;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_B;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_C;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-6-3-继承中的对象模型\"><a href=\"#4-6-3-继承中的对象模型\" class=\"headerlink\" title=\"4.6.3 继承中的对象模型\"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_C; <span class=\"comment\">//私有成员只是被隐藏了，但是还是会继承下去</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//公共继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> :<span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_D;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(Son) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>利用工具查看：</p>\n<p><img src=\"/assets/1545881904150.png\" alt=\"1545881904150\"></p>\n<p>打开工具窗口后，定位到当前CPP文件的盘符</p>\n<p>然后输入： cl &#x2F;d1 reportSingleClassLayout查看的类名   所属文件名</p>\n<p>效果如下图：</p>\n<p><img src=\"/assets/1545882158050.png\" alt=\"1545882158050\"></p>\n<blockquote>\n<p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p>\n</blockquote>\n<h4 id=\"4-6-4-继承中构造和析构顺序\"><a href=\"#4-6-4-继承中构造和析构顺序\" class=\"headerlink\" title=\"4.6.4 继承中构造和析构顺序\"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>\n<p>问题：父类和子类的构造和析构顺序是谁先谁后？</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Base</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Base构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">Base</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Base析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : <span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Son</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Son构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">Son</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Son析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span></span><br><span class=\"line\">\tSon s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p>\n</blockquote>\n<h4 id=\"4-6-5-继承同名成员处理方式\"><a href=\"#4-6-5-继承同名成员处理方式\" class=\"headerlink\" title=\"4.6.5 继承同名成员处理方式\"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p>\n<ul>\n<li>访问子类同名成员   直接访问即可</li>\n<li>访问父类同名成员   需要加作用域</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Base</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Base - func()调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Base - func(int a)调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Son</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">200</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Son - func()调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSon s;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Son下的m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Base下的m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\ts.<span class=\"built_in\">func</span>();</span><br><span class=\"line\">\ts.Base::<span class=\"built_in\">func</span>();</span><br><span class=\"line\">\ts.Base::<span class=\"built_in\">func</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>子类对象可以直接访问到子类中同名成员</li>\n<li>子类对象加作用域可以访问到父类同名成员</li>\n<li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li>\n</ol>\n<h4 id=\"4-6-6-继承同名静态成员处理方式\"><a href=\"#4-6-6-继承同名静态成员处理方式\" class=\"headerlink\" title=\"4.6.6 继承同名静态成员处理方式\"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>\n<p>静态成员和非静态成员出现同名，处理方式一致</p>\n<ul>\n<li>访问子类同名成员   直接访问即可</li>\n<li>访问父类同名成员   需要加作用域</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Base - static void func()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Base - static void func(int a)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> Base::m_A = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Son - static void func()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> Son::m_A = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//同名成员属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//通过对象访问</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tSon s;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//通过类名访问</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//同名成员函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//通过对象访问</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tSon s;</span><br><span class=\"line\">\ts.<span class=\"built_in\">func</span>();</span><br><span class=\"line\">\ts.Base::<span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tSon::<span class=\"built_in\">func</span>();</span><br><span class=\"line\">\tSon::Base::<span class=\"built_in\">func</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class=\"line\">\tSon::Base::<span class=\"built_in\">func</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\">\t<span class=\"built_in\">test02</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p>\n</blockquote>\n<h4 id=\"4-6-7-多继承语法\"><a href=\"#4-6-7-多继承语法\" class=\"headerlink\" title=\"4.6.7 多继承语法\"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p>\n<p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p>\n<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>\n<p><strong>C++实际开发中不建议用多继承</strong></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base1</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Base1</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base2</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Base2</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">200</span>;  <span class=\"comment\">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//语法：class 子类：继承方式 父类1 ，继承方式 父类2 </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : <span class=\"keyword\">public</span> Base2, <span class=\"keyword\">public</span> Base1 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Son</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_C = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t\tm_D = <span class=\"number\">400</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_C;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_D;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多继承容易产生成员同名的情况</span></span><br><span class=\"line\"><span class=\"comment\">//通过使用类名作用域可以区分调用哪一个基类的成员</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSon s;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(s) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; s.Base1::m_A &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; s.Base2::m_A &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p>\n</blockquote>\n<h4 id=\"4-6-8-菱形继承\"><a href=\"#4-6-8-菱形继承\" class=\"headerlink\" title=\"4.6.8 菱形继承\"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p>\n<pre><code>两个派生类继承同一个基类\n\n又有某个类同时继承者两个派生类\n\n这种继承被称为菱形继承，或者钻石继承\n</code></pre>\n<p><strong>典型的菱形继承案例：</strong></p>\n<p><img src=\"/assets/clip_image002.jpg\" alt=\"IMG_256\"></p>\n<p><strong>菱形继承问题：</strong></p>\n<ol>\n<li><pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。\n</code></pre>\n</li>\n<li><pre><code>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。\n</code></pre>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//继承前加virtual关键字后，变为虚继承</span></span><br><span class=\"line\"><span class=\"comment\">//此时公共的父类Animal称为虚基类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sheep</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> Animal &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tuo</span>   : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> Animal &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SheepTuo</span> : <span class=\"keyword\">public</span> Sheep, <span class=\"keyword\">public</span> Tuo &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSheepTuo st;</span><br><span class=\"line\">\tst.Sheep::m_Age = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tst.Tuo::m_Age = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;st.Sheep::m_Age = &quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;st.Tuo::m_Age = &quot;</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;st.m_Age = &quot;</span> &lt;&lt; st.m_Age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>总结：</p>\n<ul>\n<li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li>\n<li>利用虚继承可以解决菱形继承问题</li>\n</ul>\n<h3 id=\"4-7-多态\"><a href=\"#4-7-多态\" class=\"headerlink\" title=\"4.7  多态\"></a>4.7  多态</h3><h4 id=\"4-7-1-多态的基本概念\"><a href=\"#4-7-1-多态的基本概念\" class=\"headerlink\" title=\"4.7.1 多态的基本概念\"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p>\n<p>多态分为两类</p>\n<ul>\n<li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li>\n<li>动态多态: 派生类和虚函数实现运行时多态</li>\n</ul>\n<p>静态多态和动态多态区别：</p>\n<ul>\n<li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li>\n<li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li>\n</ul>\n<p>下面通过案例进行讲解多态</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//Speak函数就是虚函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;动物在说话&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> :<span class=\"keyword\">public</span> Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;小猫在说话&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> :<span class=\"keyword\">public</span> Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;小狗在说话&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//我们希望传入什么对象，那么就调用什么对象的函数</span></span><br><span class=\"line\"><span class=\"comment\">//如果函数地址在编译阶段就能确定，那么静态联编</span></span><br><span class=\"line\"><span class=\"comment\">//如果函数地址在运行阶段才能确定，就是动态联编</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DoSpeak</span><span class=\"params\">(Animal &amp; animal)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tanimal.<span class=\"built_in\">speak</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//多态满足条件： </span></span><br><span class=\"line\"><span class=\"comment\">//1、有继承关系</span></span><br><span class=\"line\"><span class=\"comment\">//2、子类重写父类中的虚函数</span></span><br><span class=\"line\"><span class=\"comment\">//多态使用：</span></span><br><span class=\"line\"><span class=\"comment\">//父类指针或引用指向子类对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tCat cat;</span><br><span class=\"line\">\t<span class=\"built_in\">DoSpeak</span>(cat);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tDog dog;</span><br><span class=\"line\">\t<span class=\"built_in\">DoSpeak</span>(dog);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p>多态满足条件</p>\n<ul>\n<li>有继承关系</li>\n<li>子类重写父类中的虚函数</li>\n</ul>\n<p>多态使用条件</p>\n<ul>\n<li>父类指针或引用指向子类对象</li>\n</ul>\n<p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p>\n<h4 id=\"4-7-2-多态案例一-计算器类\"><a href=\"#4-7-2-多态案例一-计算器类\" class=\"headerlink\" title=\"4.7.2 多态案例一-计算器类\"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p>\n<p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p>\n<p>多态的优点：</p>\n<ul>\n<li>代码组织结构清晰</li>\n<li>可读性强</li>\n<li>利于前期和后期的扩展以及维护</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通实现</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Calculator</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getResult</span><span class=\"params\">(string oper)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (oper == <span class=\"string\">&quot;+&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> m_Num1 + m_Num2;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oper == <span class=\"string\">&quot;-&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> m_Num1 - m_Num2;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oper == <span class=\"string\">&quot;*&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> m_Num1 * m_Num2;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果要提供新的运算，需要修改源码</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Num1;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Num2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//普通实现测试</span></span><br><span class=\"line\">\tCalculator c;</span><br><span class=\"line\">\tc.m_Num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tc.m_Num2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tcout &lt;&lt; c.m_Num1 &lt;&lt; <span class=\"string\">&quot; + &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; c.<span class=\"built_in\">getResult</span>(<span class=\"string\">&quot;+&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; c.m_Num1 &lt;&lt; <span class=\"string\">&quot; - &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; c.<span class=\"built_in\">getResult</span>(<span class=\"string\">&quot;-&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; c.m_Num1 &lt;&lt; <span class=\"string\">&quot; * &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; c.<span class=\"built_in\">getResult</span>(<span class=\"string\">&quot;*&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多态实现</span></span><br><span class=\"line\"><span class=\"comment\">//抽象计算器类</span></span><br><span class=\"line\"><span class=\"comment\">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AbstractCalculator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> :</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Num1;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Num2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加法计算器</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AddCalculator</span> :<span class=\"keyword\">public</span> AbstractCalculator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_Num1 + m_Num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//减法计算器</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubCalculator</span> :<span class=\"keyword\">public</span> AbstractCalculator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_Num1 - m_Num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//乘法计算器</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MulCalculator</span> :<span class=\"keyword\">public</span> AbstractCalculator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_Num1 * m_Num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建加法计算器</span></span><br><span class=\"line\">\tAbstractCalculator *abc = <span class=\"keyword\">new</span> AddCalculator;</span><br><span class=\"line\">\tabc-&gt;m_Num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tabc-&gt;m_Num2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tcout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class=\"string\">&quot; + &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class=\"built_in\">getResult</span>() &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> abc;  <span class=\"comment\">//用完了记得销毁</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建减法计算器</span></span><br><span class=\"line\">\tabc = <span class=\"keyword\">new</span> SubCalculator;</span><br><span class=\"line\">\tabc-&gt;m_Num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tabc-&gt;m_Num2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tcout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class=\"string\">&quot; - &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class=\"built_in\">getResult</span>() &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> abc;  </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建乘法计算器</span></span><br><span class=\"line\">\tabc = <span class=\"keyword\">new</span> MulCalculator;</span><br><span class=\"line\">\tabc-&gt;m_Num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tabc-&gt;m_Num2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tcout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class=\"string\">&quot; * &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class=\"built_in\">getResult</span>() &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> abc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test02</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p>\n</blockquote>\n<h4 id=\"4-7-3-纯虚函数和抽象类\"><a href=\"#4-7-3-纯虚函数和抽象类\" class=\"headerlink\" title=\"4.7.3 纯虚函数和抽象类\"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>\n<p>因此可以将虚函数改为<strong>纯虚函数</strong></p>\n<p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p>\n<p>当类中有了纯虚函数，这个类也称为&#x3D;&#x3D;抽象类&#x3D;&#x3D;</p>\n<p><strong>抽象类特点</strong>：</p>\n<ul>\n<li>无法实例化对象</li>\n<li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//纯虚函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//类中只要有一个纯虚函数就称为抽象类</span></span><br><span class=\"line\">\t<span class=\"comment\">//抽象类无法实例化对象</span></span><br><span class=\"line\">\t<span class=\"comment\">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> :<span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tBase * base = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//base = new Base; // 错误，抽象类无法实例化对象</span></span><br><span class=\"line\">\tbase = <span class=\"keyword\">new</span> Son;</span><br><span class=\"line\">\tbase-&gt;<span class=\"built_in\">func</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> base;<span class=\"comment\">//记得销毁</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-7-4-多态案例二-制作饮品\"><a href=\"#4-7-4-多态案例二-制作饮品\" class=\"headerlink\" title=\"4.7.4 多态案例二-制作饮品\"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p>\n<p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p>\n<p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p>\n<p><img src=\"/assets/1545985945198.png\" alt=\"1545985945198\"></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//抽象制作饮品</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AbstractDrinking</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//烧水</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Boil</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//冲泡</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Brew</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//倒入杯中</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">PourInCup</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//加入辅料</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">PutSomething</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//规定流程</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MakeDrink</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">Boil</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">Brew</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">PourInCup</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">PutSomething</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//制作咖啡</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Coffee</span> : <span class=\"keyword\">public</span> AbstractDrinking &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//烧水</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Boil</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;煮农夫山泉!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//冲泡</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Brew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;冲泡咖啡!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//倒入杯中</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">PourInCup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;将咖啡倒入杯中!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//加入辅料</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">PutSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;加入牛奶!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//制作茶水</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tea</span> : <span class=\"keyword\">public</span> AbstractDrinking &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//烧水</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Boil</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;煮自来水!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//冲泡</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Brew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;冲泡茶叶!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//倒入杯中</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">PourInCup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;将茶水倒入杯中!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//加入辅料</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">PutSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;加入枸杞!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//业务函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DoWork</span><span class=\"params\">(AbstractDrinking* drink)</span> </span>&#123;</span><br><span class=\"line\">\tdrink-&gt;<span class=\"built_in\">MakeDrink</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> drink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">DoWork</span>(<span class=\"keyword\">new</span> Coffee);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;--------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">DoWork</span>(<span class=\"keyword\">new</span> Tea);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-7-5-虚析构和纯虚析构\"><a href=\"#4-7-5-虚析构和纯虚析构\" class=\"headerlink\" title=\"4.7.5 虚析构和纯虚析构\"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>\n<p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>\n<p>虚析构和纯虚析构共性：</p>\n<ul>\n<li>可以解决父类指针释放子类对象</li>\n<li>都需要有具体的函数实现</li>\n</ul>\n<p>虚析构和纯虚析构区别：</p>\n<ul>\n<li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li>\n</ul>\n<p>虚析构语法：</p>\n<p><code>virtual ~类名()&#123;&#125;</code></p>\n<p>纯虚析构语法：</p>\n<p><code> virtual ~类名() = 0;</code></p>\n<p><code>类名::~类名()&#123;&#125;</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Animal</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Animal 构造函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Speak</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//析构函数加上virtual关键字，变成虚析构函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//virtual ~Animal()</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tcout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Animal</span>() = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal::~<span class=\"built_in\">Animal</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Animal 纯虚析构函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> : <span class=\"keyword\">public</span> Animal &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Cat</span>(string name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Cat构造函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\tm_Name = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; *m_Name &lt;&lt;  <span class=\"string\">&quot;小猫在说话!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">Cat</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Cat析构函数调用!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;m_Name != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_Name;</span><br><span class=\"line\">\t\t\tm_Name = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring *m_Name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tAnimal *animal = <span class=\"keyword\">new</span> <span class=\"built_in\">Cat</span>(<span class=\"string\">&quot;Tom&quot;</span>);</span><br><span class=\"line\">\tanimal-&gt;<span class=\"built_in\">Speak</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span></span><br><span class=\"line\">\t<span class=\"comment\">//怎么解决？给基类增加一个虚析构函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//虚析构函数就是用来解决通过父类指针释放子类对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> animal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>总结：</p>\n<pre><code>1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象\n\n2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构\n\n3. 拥有纯虚析构函数的类也属于抽象类\n</code></pre>\n<h4 id=\"4-7-6-多态案例三-电脑组装\"><a href=\"#4-7-6-多态案例三-电脑组装\" class=\"headerlink\" title=\"4.7.6 多态案例三-电脑组装\"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p>\n<p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p>\n<p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p>\n<p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p>\n<p>测试时组装三台不同的电脑进行工作</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象CPU类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CPU</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//抽象的计算函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">calculate</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象显卡类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VideoCard</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//抽象的显示函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象内存条类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Memory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//抽象的存储函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">storage</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//电脑类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Computer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Computer</span>(CPU * cpu, VideoCard * vc, Memory * mem)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_cpu = cpu;</span><br><span class=\"line\">\t\tm_vc = vc;</span><br><span class=\"line\">\t\tm_mem = mem;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//提供工作的函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//让零件工作起来，调用接口</span></span><br><span class=\"line\">\t\tm_cpu-&gt;<span class=\"built_in\">calculate</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tm_vc-&gt;<span class=\"built_in\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tm_mem-&gt;<span class=\"built_in\">storage</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//提供析构函数 释放3个电脑零件</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Computer</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//释放CPU零件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_cpu != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_cpu;</span><br><span class=\"line\">\t\t\tm_cpu = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//释放显卡零件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_vc != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_vc;</span><br><span class=\"line\">\t\t\tm_vc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//释放内存条零件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_mem != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_mem;</span><br><span class=\"line\">\t\t\tm_mem = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\tCPU * m_cpu; <span class=\"comment\">//CPU的零件指针</span></span><br><span class=\"line\">\tVideoCard * m_vc; <span class=\"comment\">//显卡零件指针</span></span><br><span class=\"line\">\tMemory * m_mem; <span class=\"comment\">//内存条零件指针</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体厂商</span></span><br><span class=\"line\"><span class=\"comment\">//Intel厂商</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IntelCPU</span> :<span class=\"keyword\">public</span> CPU</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">calculate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Intel的CPU开始计算了！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IntelVideoCard</span> :<span class=\"keyword\">public</span> VideoCard</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Intel的显卡开始显示了！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IntelMemory</span> :<span class=\"keyword\">public</span> Memory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">storage</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Intel的内存条开始存储了！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Lenovo厂商</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LenovoCPU</span> :<span class=\"keyword\">public</span> CPU</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">calculate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Lenovo的CPU开始计算了！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LenovoVideoCard</span> :<span class=\"keyword\">public</span> VideoCard</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Lenovo的显卡开始显示了！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LenovoMemory</span> :<span class=\"keyword\">public</span> Memory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">storage</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Lenovo的内存条开始存储了！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//第一台电脑零件</span></span><br><span class=\"line\">\tCPU * intelCpu = <span class=\"keyword\">new</span> IntelCPU;</span><br><span class=\"line\">\tVideoCard * intelCard = <span class=\"keyword\">new</span> IntelVideoCard;</span><br><span class=\"line\">\tMemory * intelMem = <span class=\"keyword\">new</span> IntelMemory;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;第一台电脑开始工作：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//创建第一台电脑</span></span><br><span class=\"line\">\tComputer * computer1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Computer</span>(intelCpu, intelCard, intelMem);</span><br><span class=\"line\">\tcomputer1-&gt;<span class=\"built_in\">work</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> computer1;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;-----------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;第二台电脑开始工作：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//第二台电脑组装</span></span><br><span class=\"line\">\tComputer * computer2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Computer</span>(<span class=\"keyword\">new</span> LenovoCPU, <span class=\"keyword\">new</span> LenovoVideoCard, <span class=\"keyword\">new</span> LenovoMemory);;</span><br><span class=\"line\">\tcomputer2-&gt;<span class=\"built_in\">work</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> computer2;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;-----------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;第三台电脑开始工作：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//第三台电脑组装</span></span><br><span class=\"line\">\tComputer * computer3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Computer</span>(<span class=\"keyword\">new</span> LenovoCPU, <span class=\"keyword\">new</span> IntelVideoCard, <span class=\"keyword\">new</span> LenovoMemory);;</span><br><span class=\"line\">\tcomputer3-&gt;<span class=\"built_in\">work</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> computer3;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"5-文件操作\"><a href=\"#5-文件操作\" class=\"headerlink\" title=\"5 文件操作\"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>\n<p>通过<strong>文件可以将数据持久化</strong></p>\n<p>C++中对文件操作需要包含头文件 &#x3D;&#x3D;&lt; fstream &gt;&#x3D;&#x3D;</p>\n<p>文件类型分为两种：</p>\n<ol>\n<li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li>\n<li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li>\n</ol>\n<p>操作文件的三大类:</p>\n<ol>\n<li>ofstream：写操作</li>\n<li>ifstream： 读操作</li>\n<li>fstream ： 读写操作</li>\n</ol>\n<h3 id=\"5-1文本文件\"><a href=\"#5-1文本文件\" class=\"headerlink\" title=\"5.1文本文件\"></a>5.1文本文件</h3><h4 id=\"5-1-1写文件\"><a href=\"#5-1-1写文件\" class=\"headerlink\" title=\"5.1.1写文件\"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p>\n<ol>\n<li><p>包含头文件   </p>\n<p>#include &lt;fstream&gt;</p>\n</li>\n<li><p>创建流对象  </p>\n<p>ofstream ofs;</p>\n</li>\n<li><p>打开文件</p>\n<p>ofs.open(“文件路径”,打开方式);</p>\n</li>\n<li><p>写数据</p>\n<p>ofs &lt;&lt; “写入的数据”;</p>\n</li>\n<li><p>关闭文件</p>\n<p>ofs.close();</p>\n</li>\n</ol>\n<p>文件打开方式：</p>\n<table>\n<thead>\n<tr>\n<th>打开方式</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ios::in</td>\n<td>为读文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::out</td>\n<td>为写文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::ate</td>\n<td>初始位置：文件尾</td>\n</tr>\n<tr>\n<td>ios::app</td>\n<td>追加方式写文件</td>\n</tr>\n<tr>\n<td>ios::trunc</td>\n<td>如果文件存在先删除，再创建</td>\n</tr>\n<tr>\n<td>ios::binary</td>\n<td>二进制方式</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p>\n<p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tofstream ofs;</span><br><span class=\"line\">\tofs.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;test.txt&quot;</span>, ios::out);</span><br><span class=\"line\"></span><br><span class=\"line\">\tofs &lt;&lt; <span class=\"string\">&quot;姓名：张三&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tofs &lt;&lt; <span class=\"string\">&quot;性别：男&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tofs &lt;&lt; <span class=\"string\">&quot;年龄：18&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tofs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>文件操作必须包含头文件 fstream</li>\n<li>读文件可以利用 ofstream  ，或者fstream类</li>\n<li>打开文件时候需要指定操作文件的路径，以及打开方式</li>\n<li>利用&lt;&lt;可以向文件中写数据</li>\n<li>操作完毕，要关闭文件</li>\n</ul>\n<h4 id=\"5-1-2读文件\"><a href=\"#5-1-2读文件\" class=\"headerlink\" title=\"5.1.2读文件\"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p>\n<p>读文件步骤如下：</p>\n<ol>\n<li><p>包含头文件   </p>\n<p>#include &lt;fstream&gt;</p>\n</li>\n<li><p>创建流对象  </p>\n<p>ifstream ifs;</p>\n</li>\n<li><p>打开文件并判断文件是否打开成功</p>\n<p>ifs.open(“文件路径”,打开方式);</p>\n</li>\n<li><p>读数据</p>\n<p>四种方式读取</p>\n</li>\n<li><p>关闭文件</p>\n<p>ifs.close();</p>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tifstream ifs;</span><br><span class=\"line\">\tifs.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;test.txt&quot;</span>, ios::in);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ifs.<span class=\"built_in\">is_open</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;文件打开失败&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第一种方式</span></span><br><span class=\"line\">\t<span class=\"comment\">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class=\"line\">\t<span class=\"comment\">//while (ifs &gt;&gt; buf)</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tcout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第二种</span></span><br><span class=\"line\">\t<span class=\"comment\">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class=\"line\">\t<span class=\"comment\">//while (ifs.getline(buf,sizeof(buf)))</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tcout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第三种</span></span><br><span class=\"line\">\t<span class=\"comment\">//string buf;</span></span><br><span class=\"line\">\t<span class=\"comment\">//while (getline(ifs, buf))</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tcout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> c;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((c = ifs.<span class=\"built_in\">get</span>()) != EOF)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tifs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>读文件可以利用 ifstream  ，或者fstream类</li>\n<li>利用is_open函数可以判断文件是否打开成功</li>\n<li>close 关闭文件</li>\n</ul>\n<h3 id=\"5-2-二进制文件\"><a href=\"#5-2-二进制文件\" class=\"headerlink\" title=\"5.2 二进制文件\"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p>\n<p>打开方式要指定为 &#x3D;&#x3D;ios::binary&#x3D;&#x3D;</p>\n<h4 id=\"5-2-1-写文件\"><a href=\"#5-2-1-写文件\" class=\"headerlink\" title=\"5.2.1 写文件\"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p>\n<p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p>\n<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">char</span> m_Name[<span class=\"number\">64</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二进制文件  写文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1、包含头文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、创建输出流对象</span></span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">ofs</span><span class=\"params\">(<span class=\"string\">&quot;person.txt&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//3、打开文件</span></span><br><span class=\"line\">\t<span class=\"comment\">//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p = &#123;<span class=\"string\">&quot;张三&quot;</span>  , <span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//4、写文件</span></span><br><span class=\"line\">\tofs.<span class=\"built_in\">write</span>((<span class=\"type\">const</span> <span class=\"type\">char</span> *)&amp;p, <span class=\"built_in\">sizeof</span>(p));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//5、关闭文件</span></span><br><span class=\"line\">\tofs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>文件输出流对象 可以通过write函数，以二进制方式写数据</li>\n</ul>\n<h4 id=\"5-2-2-读文件\"><a href=\"#5-2-2-读文件\" class=\"headerlink\" title=\"5.2.2 读文件\"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p>\n<p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p>\n<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">char</span> m_Name[<span class=\"number\">64</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">ifs</span><span class=\"params\">(<span class=\"string\">&quot;person.txt&quot;</span>, ios::in | ios::binary)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ifs.<span class=\"built_in\">is_open</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;文件打开失败&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p;</span><br><span class=\"line\">\tifs.<span class=\"built_in\">read</span>((<span class=\"type\">char</span> *)&amp;p, <span class=\"built_in\">sizeof</span>(p));</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class=\"string\">&quot; 年龄： &quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>文件输入流对象 可以通过read函数，以二进制方式读数据</li>\n</ul>\n","tags":["C++"]}]